/*! Built with IMPACT - impactjs.com */
(function(window) {
    "use strict";
    Array.prototype.sum = function() {
        var sum = 0;
        for (var i = 0; i < this.length; i++)
            sum += this[i];
        return sum;
    };
    Array.prototype.isArray = function() {
        var isArr = false;
        if (this && typeof this === 'object' && this.constructor === Array) {
            isArr = true;
        } else if (Object.prototype.toString.apply(this) === '[object Array]') {
            isArr = true;
        }
        return isArr;
    }
    Array.prototype.lastElement = function() {
        return this[this.length - 1];
    }
    Number.prototype.map = function(istart, istop, ostart, ostop) {
        return ostart + (ostop - ostart) * ((this - istart) / (istop - istart));
    };
    Number.prototype.limit = function(min, max) {
        return Math.min(max, Math.max(min, this));
    };
    Number.prototype.round = function(precision) {
        precision = Math.pow(10, precision || 0);
        return Math.round(this * precision) / precision;
    };
    Number.prototype.floor = function() {
        return Math.floor(this);
    };
    Number.prototype.ceil = function() {
        return Math.ceil(this);
    };
    Number.prototype.toInt = function() {
        return (this | 0);
    };
    Number.prototype.toRad = function() {
        return (this / 180) * Math.PI;
    };
    Number.prototype.toDeg = function() {
        return (this * 180) / Math.PI;
    };
    Array.prototype.erase = function(item) {
        for (var i = this.length; i--;) {
            if (this[i] === item) {
                this.splice(i, 1);
            }
        }
        return this;
    };
    Array.prototype.random = function() {
        return this[Math.floor(Math.random() * this.length)];
    };
    Date.prototype.getCurrentTime = function() {
        return ((this.getHours() < 10) ? "0" : "") + this.getHours() + ":" + ((this.getMinutes() < 10) ? "0" : "") + this.getMinutes();
    }
    Math.trunc = function(value) {
        return value < 0 ? Math.ceil(value) : Math.floor(value);
    }
    Math.truncate = function(value, decimals) {
        var decimalMultiplicator = Math.pow(10, decimals);
        var fMultParsed = parseInt(value * decimalMultiplicator);
        return fMultParsed / decimalMultiplicator;
    }
    Function.prototype.bind = Function.prototype.bind || function(oThis) {
        if (typeof this !== "function") {
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
        }
        var aArgs = Array.prototype.slice.call(arguments, 1),
            fToBind = this,
            fNOP = function() {},
            fBound = function() {
                return fToBind.apply((this instanceof fNOP && oThis ? this : oThis), aArgs.concat(Array.prototype.slice.call(arguments)));
            };
        fNOP.prototype = this.prototype;
        fBound.prototype = new fNOP();
        return fBound;
    };
    window.ig = {
        game: null,
        debug: null,
        version: '1.21',
        global: window,
        modules: {},
        resources: [],
        ready: false,
        baked: false,
        nocache: '',
        ua: {},
        prefix: (window.ImpactPrefix || ''),
        lib: 'private/',
        touchEvents: "",
        touchStartEvents: "",
        touchEndEvents: "",
        _current: null,
        _loadQueue: [],
        _waitForOnload: 0,
        $: function(selector) {
            return selector.charAt(0) == '#' ? document.getElementById(selector.substr(1)) : document.getElementsByTagName(selector);
        },
        $new: function(name) {
            return document.createElement(name);
        },
        copy: function(object) {
            if (!object || typeof(object) != 'object' || object instanceof HTMLElement || object instanceof ig.Class) {
                return object;
            } else if (object instanceof Array) {
                var c = [];
                for (var i = 0, l = object.length; i < l; i++) {
                    c[i] = ig.copy(object[i]);
                }
                return c;
            } else {
                var c = {};
                for (var i in object) {
                    c[i] = ig.copy(object[i]);
                }
                return c;
            }
        },
        merge: function(original, extended) {
            for (var key in extended) {
                var ext = extended[key];
                if (typeof(ext) != 'object' || ext instanceof HTMLElement || ext instanceof ig.Class) {
                    original[key] = ext;
                } else {
                    if (!original[key] || typeof(original[key]) != 'object') {
                        original[key] = (ext instanceof Array) ? [] : {};
                    }
                    ig.merge(original[key], ext);
                }
            }
            return original;
        },
        ksort: function(obj) {
            if (!obj || typeof(obj) != 'object') {
                return [];
            }
            var keys = [],
                values = [];
            for (var i in obj) {
                keys.push(i);
            }
            keys.sort();
            for (var i = 0; i < keys.length; i++) {
                values.push(obj[keys[i]]);
            }
            return values;
        },
        setVendorAttribute: function(el, attr, val) {
            var uc = attr.charAt(0).toUpperCase() + attr.substr(1);
            el[attr] = el['ms' + uc] = el['moz' + uc] = el['webkit' + uc] = el['o' + uc] = val;
        },
        getVendorAttribute: function(el, attr) {
            var uc = attr.charAt(0).toUpperCase() + attr.substr(1);
            return el[attr] || el['ms' + uc] || el['moz' + uc] || el['webkit' + uc] || el['o' + uc];
        },
        normalizeVendorAttribute: function(el, attr) {
            var prefixedVal = ig.getVendorAttribute(el, attr);
            if (!el[attr] && prefixedVal) {
                el[attr] = prefixedVal;
            }
        },
        getImagePixels: function(image, x, y, width, height) {
            var canvas = ig.$new('canvas');
            canvas.width = image.width;
            canvas.height = image.height;
            var ctx = canvas.getContext('2d');
            var ratio = ig.getVendorAttribute(ctx, 'backingStorePixelRatio') || 1;
            ig.normalizeVendorAttribute(ctx, 'getImageDataHD');
            var realWidth = image.width / ratio,
                realHeight = image.height / ratio;
            canvas.width = Math.ceil(realWidth);
            canvas.height = Math.ceil(realHeight);
            ctx.drawImage(image, 0, 0, realWidth, realHeight);
            return (ratio === 1) ? ctx.getImageData(x, y, width, height) : ctx.getImageDataHD(x, y, width, height);
        },
        module: function(name) {
            if (ig._current) {
                throw ("Module '" + ig._current.name + "' defines nothing");
            }
            if (ig.modules[name] && ig.modules[name].body) {
                throw ("Module '" + name + "' is already defined");
            }
            ig._current = {
                name: name,
                requires: [],
                loaded: false,
                body: null
            };
            ig.modules[name] = ig._current;
            ig._loadQueue.push(ig._current);
            return ig;
        },
        requires: function() {
            ig._current.requires = Array.prototype.slice.call(arguments);
            return ig;
        },
        defines: function(body) {
            ig._current.body = body;
            ig._current = null;
            ig._initDOMReady();
        },
        addResource: function(resource) {
            ig.resources.push(resource);
        },
        addResources: function(resourceArray) {
            ig.resources = ig.resources.concat(resourceArray);
        },
        setNocache: function(set) {
            ig.nocache = set ? '?' + Date.now() : '';
        },
        log: function() {},
        assert: function(condition, msg) {},
        show: function(name, number) {},
        mark: function(msg, color) {},
        _loadScript: function(name, requiredFrom) {
            ig.modules[name] = {
                name: name,
                requires: [],
                loaded: false,
                body: null
            };
            ig._waitForOnload++;
            var path = ig.prefix + ig.lib + name.replace(/\./g, '/') + '.js' + ig.nocache;
            var script = ig.$new('script');
            script.type = 'text/javascript';
            script.src = path;
            script.onload = function() {
                ig._waitForOnload--;
                ig._execModules();
            };
            script.onerror = function() {
                throw ('Failed to load module ' + name + ' at ' + path + ' ' + 'required from ' + requiredFrom);
            };
            ig.$('head')[0].appendChild(script);
        },
        _execModules: function() {
            var modulesLoaded = false;
            for (var i = 0; i < ig._loadQueue.length; i++) {
                var m = ig._loadQueue[i];
                var dependenciesLoaded = true;
                for (var j = 0; j < m.requires.length; j++) {
                    var name = m.requires[j];
                    if (!ig.modules[name]) {
                        dependenciesLoaded = false;
                        ig._loadScript(name, m.name);
                    } else if (!ig.modules[name].loaded) {
                        dependenciesLoaded = false;
                    }
                }
                if (dependenciesLoaded && m.body) {
                    ig._loadQueue.splice(i, 1);
                    m.loaded = true;
                    m.body();
                    modulesLoaded = true;
                    i--;
                }
            }
            if (modulesLoaded) {
                ig._execModules();
            } else if (!ig.baked && ig._waitForOnload == 0 && ig._loadQueue.length != 0) {
                var unresolved = [];
                for (var i = 0; i < ig._loadQueue.length; i++) {
                    var unloaded = [];
                    var requires = ig._loadQueue[i].requires;
                    for (var j = 0; j < requires.length; j++) {
                        var m = ig.modules[requires[j]];
                        if (!m || !m.loaded) {
                            unloaded.push(requires[j]);
                        }
                    }
                    unresolved.push(ig._loadQueue[i].name + ' (requires: ' + unloaded.join(', ') + ')');
                }
                throw ('Unresolved (circular?) dependencies. ' + "Most likely there's a name/path mismatch for one of the listed modules:\n" +
                    unresolved.join('\n'));
            }
        },
        _DOMReady: function() {
            if (!ig.modules['dom.ready'].loaded) {
                if (!document.body) {
                    return setTimeout(ig._DOMReady, 13);
                }
                ig.modules['dom.ready'].loaded = true;
                ig._waitForOnload--;
                ig._execModules();
            }
            return 0;
        },
        _boot: function() {
            if (document.location.href.match(/\?nocache/)) {
                ig.setNocache(true);
            }
            ig.ua.pixelRatio = window.devicePixelRatio || 1;
            ig.ua.viewport = {
                width: window.innerWidth,
                height: window.innerHeight
            };
            ig.ua.screen = {
                width: window.screen.availWidth * ig.ua.pixelRatio,
                height: window.screen.availHeight * ig.ua.pixelRatio
            };
            ig.ua.iPhone = /iPhone/i.test(navigator.userAgent);
            ig.ua.iPhone4 = (ig.ua.iPhone && ig.ua.pixelRatio == 2);
            ig.ua.iPad = /iPad/i.test(navigator.userAgent);
            ig.ua.android = /android/i.test(navigator.userAgent);
            ig.ua.windowsPhone = /windows phone/i.test(navigator.userAgent);
            ig.ua.internetExplorer = /Trident/i.test(navigator.userAgent);
            ig.ua.edge = /Edge/i.test(navigator.userAgent);
            ig.ua.iOS9 = /OS 9/i.test(navigator.userAgent);
            ig.ua.iOS = ig.ua.iPhone || ig.ua.iPad;
            ig.ua.wp = ig.ua.windowsPhone;
            ig.ua.IE = ig.ua.internetExplorer || ig.ua.edge;
            ig.ua.mobile = ig.ua.iOS || ig.ua.android || ig.ua.wp;
            ig.ua.terminal = /adp-SBG/i.test(navigator.userAgent);
            if (ig.ua.mobile) {
                this.touchEvents = "touchstart";
                this.touchStartEvents = "touchstart";
                this.touchEndEvents = "touchend";
            } else {
                this.touchEvents = "click";
                this.touchStartEvents = "mousedown";
                this.touchEndEvents = "mouseup";
            }
        },
        _initDOMReady: function() {
            if (ig.modules['dom.ready']) {
                ig._execModules();
                return;
            }
            ig._boot();
            ig.modules['dom.ready'] = {
                requires: [],
                loaded: false,
                body: null
            };
            ig._waitForOnload++;
            if (document.readyState === 'complete') {
                ig._DOMReady();
            } else {
                document.addEventListener('DOMContentLoaded', ig._DOMReady, false);
                window.addEventListener('load', ig._DOMReady, false);
            }
        }
    };
    ig.normalizeVendorAttribute(window, 'requestAnimationFrame');
    if (window.requestAnimationFrame) {
        var next = 1,
            anims = {};
        window.ig.setAnimation = function(callback, element) {
            var current = next++;
            anims[current] = true;
            var animate = function() {
                if (!anims[current]) {
                    return;
                }
                window.requestAnimationFrame(animate);
                callback();
            };
            window.requestAnimationFrame(animate);
            return current;
        };
        window.ig.clearAnimation = function(id) {
            delete anims[id];
        };
    } else {
        window.ig.setAnimation = function(callback, element) {
            return window.setInterval(callback, 1000 / 30);
        };
        window.ig.clearAnimation = function(id) {
            window.clearInterval(id);
        };
    }
    var initializing = false,
        fnTest = /xyz/.test(function() {
            xyz;
        }) ? /\bparent\b/ : /.*/;
    window.ig.Class = function() {};
    var inject = function(prop) {
        var proto = this.prototype;
        var parent = {};
        for (var name in prop) {
            if (typeof(prop[name]) == "function" && typeof(proto[name]) == "function" && fnTest.test(prop[name])) {
                parent[name] = proto[name];
                proto[name] = (function(name, fn) {
                    return function() {
                        var tmp = this.parent;
                        this.parent = parent[name];
                        var ret = fn.apply(this, arguments);
                        this.parent = tmp;
                        return ret;
                    };
                })(name, prop[name]);
            } else {
                proto[name] = prop[name];
            }
        }
    };
    window.ig.Class.implements = function(prop) {
        var interfc = this.prototype;
        initializing = true;
        var prototype = new this();
        initializing = false;
        for (var name in prop) {
            if (typeof(prop[name]) == "function" && typeof(parent[name]) == "function") {
                prototype[name] = (function(name, fn) {
                    return function() {
                        var tmp = this.parent;
                        this.parent = parent[name];
                        var ret = fn.apply(this, arguments);
                        this.parent = tmp;
                        return ret;
                    };
                })(name, prop[name]);
            } else {
                throw "Class: needs to implement all Interface Methods";
            }
        }
    };
    window.ig.Class.extend = function(prop) {
        var parent = this.prototype;
        initializing = true;
        var prototype = new this();
        prototype["super"] = parent;
        initializing = false;
        for (var name in prop) {
            if (typeof(prop[name]) == "function" && typeof(parent[name]) == "function" && fnTest.test(prop[name])) {
                prototype[name] = (function(name, fn) {
                    return function() {
                        var tmp = this.parent;
                        this.parent = parent[name];
                        var ret = fn.apply(this, arguments);
                        this.parent = tmp;
                        return ret;
                    };
                })(name, prop[name]);
            } else {
                prototype[name] = prop[name];
            }
        }

        function Class() {
            if (!initializing) {
                if (this.staticInstantiate) {
                    var obj = this.staticInstantiate.apply(this, arguments);
                    if (obj) {
                        return obj;
                    }
                }
                for (var p in this) {
                    if (typeof(this[p]) == 'object') {
                        this[p] = ig.copy(this[p]);
                    }
                }
                if (this.init) {
                    this.init.apply(this, arguments);
                }
            }
            return this;
        }
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.extend = window.ig.Class.extend;
        Class.inject = inject;
        return Class;
    };
})(window);

// ../private/impact/image.js 
ig.baked = true;
ig.module('impact.image').defines(function() {
    "use strict";
    ig.Image = ig.Class.extend({
        data: null,
        width: 0,
        height: 0,
        loaded: false,
        pos: {
            x: 0,
            y: 0
        },
        failed: false,
        loadCallback: null,
        displayParent: null,
        visible: true,
        path: '',
        offset: {
            x: 0,
            y: 0
        },
        states: {},
        staticInstantiate: function(path, disableCache) {
            return ig.Image.cache[path] || null;
        },
        init: function(path, useCache) {
            this.path = path;
            this.load();
        },
        load: function(loadCallback) {
            if (this.loaded) {
                if (loadCallback) {
                    loadCallback(this.path, true);
                }
                return;
            } else if (!this.loaded && ig.ready) {
                this.loadCallback = loadCallback || null;
                this.data = new Image();
                this.data.onload = this.onload.bind(this);
                this.data.onerror = this.onerror.bind(this);
                this.data.src = ig.prefix + this.path + ig.nocache;
                this.states["default"] = this.data;
            } else {
                ig.addResource(this);
            }
            ig.Image.cache[this.path] = this;
        },
        reload: function() {
            this.loaded = false;
            this.data = new Image();
            this.data.onload = this.onload.bind(this);
            this.data.src = this.path + '?' + Date.now();
        },
        onload: function(event) {
            if (this.loaded) {
                return;
            }
            this.width = this.data.width;
            this.height = this.data.height;
            this.loaded = true;
            if (ig.system.scale != 1) {
                this.resize(ig.system.scale);
            }
            if (this.loadCallback) {
                this.loadCallback(this.path, true);
            }
        },
        onerror: function(event) {
            this.failed = true;
            if (this.loadCallback) {
                this.loadCallback(this.path, false);
            }
        },
        addState: function(id, data) {
            this.states[id] = data;
        },
        setState: function(id) {
            var state = this.states[id];
            if (state != undefined) {
                this.data = state;
            }
        },
        resize: function(scale) {
            var origPixels = ig.getImagePixels(this.data, 0, 0, this.width, this.height);
            var widthScaled = this.width * scale;
            var heightScaled = this.height * scale;
            var scaled = ig.$new('canvas');
            scaled.width = widthScaled;
            scaled.height = heightScaled;
            var scaledCtx = scaled.getContext('2d');
            var scaledPixels = scaledCtx.getImageData(0, 0, widthScaled, heightScaled);
            for (var y = 0; y < heightScaled; y++) {
                for (var x = 0; x < widthScaled; x++) {
                    var index = (Math.floor(y / scale) * this.width + Math.floor(x / scale)) * 4;
                    var indexScaled = (y * widthScaled + x) * 4;
                    scaledPixels.data[indexScaled] = origPixels.data[index];
                    scaledPixels.data[indexScaled + 1] = origPixels.data[index + 1];
                    scaledPixels.data[indexScaled + 2] = origPixels.data[index + 2];
                    scaledPixels.data[indexScaled + 3] = origPixels.data[index + 3];
                }
            }
            scaledCtx.putImageData(scaledPixels, 0, 0);
            this.data = scaled;
        },
        onRemoved: function() {},
        onAttached: function() {},
        draw: function(targetX, targetY, sourceX, sourceY, width, height, ctx) {
            if (!this.loaded) {
                return;
            }
            if (this.displayParent) {
                this.offset.x = this.displayParent.pos.x + this.displayParent.offset.x;
                this.offset.y = this.displayParent.pos.y + this.displayParent.offset.y;
            }
            var scale = ig.system.scale;
            sourceX = sourceX ? sourceX * scale : 0;
            sourceY = sourceY ? sourceY * scale : 0;
            width = (width ? width : this.width) * scale;
            height = (height ? height : this.height) * scale;
            if (!ctx) {
                ig.system.context.drawImage(this.data, sourceX, sourceY, width, height, ig.system.getDrawPos(targetX), ig.system.getDrawPos(targetY), width, Math.floor(height));
            } else {
                ctx.drawImage(this.data, sourceX, sourceY, width, height, ig.system.getDrawPos(targetX), ig.system.getDrawPos(targetY), width, Math.floor(height));
            }
            ig.Image.drawCount++;
        },
        getScaledVersion: function(scaleFactor) {
            var origPixels = ig.getImagePixels(this.data, 0, 0, this.width, this.height);
            var widthScaled = this.width * scaleFactor;
            var heightScaled = this.height * scaleFactor;
            var scaled = ig.$new('canvas');
            scaled.width = widthScaled;
            scaled.height = heightScaled;
            var scaledCtx = scaled.getContext('2d');
            var scaledPixels = scaledCtx.getImageData(0, 0, widthScaled, heightScaled);
            for (var y = 0; y < heightScaled; y++) {
                for (var x = 0; x < widthScaled; x++) {
                    var index = (Math.floor(y / scaleFactor) * this.width + Math.floor(x / scaleFactor)) * 4;
                    var indexScaled = (y * widthScaled + x) * 4;
                    scaledPixels.data[indexScaled] = origPixels.data[index];
                    scaledPixels.data[indexScaled + 1] = origPixels.data[index + 1];
                    scaledPixels.data[indexScaled + 2] = origPixels.data[index + 2];
                    scaledPixels.data[indexScaled + 3] = origPixels.data[index + 3];
                }
            }
            scaledCtx.putImageData(scaledPixels, 0, 0);
            return scaled;
        },
        drawTile: function(targetX, targetY, tile, tileWidth, tileHeight, flipX, flipY, ctx) {
            tileHeight = tileHeight ? tileHeight : tileWidth;
            if (!this.loaded || tileWidth > this.width || tileHeight > this.height) {
                return;
            }
            var scale = ig.system.scale;
            var tileWidthScaled = Math.floor(tileWidth * scale);
            var tileHeightScaled = Math.floor(tileHeight * scale);
            var scaleX = flipX ? -1 : 1;
            var scaleY = flipY ? -1 : 1;
            if (!ctx) {
                if (flipX || flipY) {
                    ig.system.context.save();
                    ig.system.context.scale(scaleX, scaleY);
                }
                ig.system.context.drawImage(this.data, (Math.floor(tile * tileWidth) % this.width) * scale, (Math.floor(tile * tileWidth / this.width) * tileHeight) * scale, tileWidthScaled, tileHeightScaled, ig.system.getDrawPos(targetX) * scaleX - (flipX ? tileWidthScaled : 0), ig.system.getDrawPos(targetY) * scaleY - (flipY ? tileHeightScaled : 0), tileWidthScaled, tileHeightScaled);
                if (flipX || flipY) {
                    ig.system.context.restore();
                }
            } else {
                if (flipX || flipY) {
                    ctx.save();
                    ctx.scale(scaleX, scaleY);
                }
                ctx.drawImage(this.data, (Math.floor(tile * tileWidth) % this.width) * scale, (Math.floor(tile * tileWidth / this.width) * tileHeight) * scale, tileWidthScaled, tileHeightScaled, ig.system.getDrawPos(targetX) * scaleX - (flipX ? tileWidthScaled : 0), ig.system.getDrawPos(targetY) * scaleY - (flipY ? tileHeightScaled : 0), tileWidthScaled, tileHeightScaled);
                if (flipX || flipY) {
                    ctx.restore();
                }
            }
            ig.Image.drawCount++;
        }
    });
    ig.Image.drawCount = 0;
    ig.Image.cache = {};
    ig.Image.reloadCache = function() {
        for (var path in ig.Image.cache) {
            ig.Image.cache[path].reload();
        }
    };
});

// ../private/impact/font.js 
ig.baked = true;
ig.module('impact.font').requires('impact.image').defines(function() {
    "use strict";
    ig.Font = ig.Image.extend({
        widthMap: [],
        indices: [],
        firstChar: 32,
        alpha: 1,
        letterSpacing: 1,
        lineSpacing: 1,
        onload: function(ev) {
            this._loadMetrics(this.data);
            this.parent(ev);
        },
        widthForString: function(text) {
            if (text.indexOf('\n') !== -1) {
                var lines = text.split('\n');
                var width = 0;
                for (var i = 0; i < lines.length; i++) {
                    width = Math.max(width, this._widthForLine(lines[i]));
                }
                return width;
            } else {
                return this._widthForLine(text);
            }
        },
        _widthForLine: function(text) {
            var width = 0;
            for (var i = 0; i < text.length; i++) {
                width += this.widthMap[text.charCodeAt(i) - this.firstChar] + this.letterSpacing;
            }
            return width;
        },
        heightForString: function(text) {
            var lines = text.split('\n');
            return lines.length * (this.height + this.lineSpacing);
        },
        draw: function(text, x, y, align) {
            if (typeof(text) != 'string') {
                text = text.toString();
            }
            if (text.indexOf('\n') !== -1) {
                var lines = text.split('\n');
                var lineHeight = this.height + this.lineSpacing;
                for (var i = 0; i < lines.length; i++) {
                    this.draw(lines[i], x, y + i * lineHeight, align);
                }
                return;
            }
            if (align == ig.Font.ALIGN.RIGHT || align == ig.Font.ALIGN.CENTER) {
                var width = this._widthForLine(text);
                x -= align == ig.Font.ALIGN.CENTER ? width / 2 : width;
            }
            if (this.alpha !== 1) {
                ig.system.context.globalAlpha = this.alpha;
            }
            for (var i = 0; i < text.length; i++) {
                var c = text.charCodeAt(i);
                x += this._drawChar(c - this.firstChar, x, y);
            }
            if (this.alpha !== 1) {
                ig.system.context.globalAlpha = 1;
            }
            ig.Image.drawCount += text.length;
        },
        _drawChar: function(c, targetX, targetY) {
            if (!this.loaded || c < 0 || c >= this.indices.length) {
                return 0;
            }
            var scale = ig.system.scale;
            var charX = this.indices[c] * scale;
            var charY = 0;
            var charWidth = this.widthMap[c] * scale;
            var charHeight = (this.height - 2) * scale;
            ig.system.context.drawImage(this.data, charX, charY, charWidth, charHeight, ig.system.getDrawPos(targetX), ig.system.getDrawPos(targetY), charWidth, charHeight);
            return this.widthMap[c] + this.letterSpacing;
        },
        _loadMetrics: function(image) {
            this.height = image.height - 1;
            this.widthMap = [];
            this.indices = [];
            var px = ig.getImagePixels(image, 0, image.height - 1, image.width, 1);
            var currentChar = 0;
            var currentWidth = 0;
            for (var x = 0; x < image.width; x++) {
                var index = x * 4 + 3;
                if (px.data[index] > 127) {
                    currentWidth++;
                } else if (px.data[index] == 0 && currentWidth) {
                    this.widthMap.push(currentWidth);
                    this.indices.push(x - currentWidth);
                    currentChar++;
                    currentWidth = 0;
                }
            }
            this.widthMap.push(currentWidth);
            this.indices.push(x - currentWidth);
        }
    });
    ig.Font.ALIGN = {
        LEFT: 0,
        RIGHT: 1,
        CENTER: 2
    };
});

// ../private/impact/sound.js 
ig.baked = true;
ig.module('impact.sound').defines(function() {
    "use strict";
    ig.SoundManager = ig.Class.extend({
        clips: {},
        volume: 1,
        format: null,
        init: function() {
            if (!ig.Sound.enabled || !window.Audio) {
                ig.Sound.enabled = false;
                return;
            }
            var probe = new Audio();
            for (var i = 0; i < ig.Sound.use.length; i++) {
                var format = ig.Sound.use[i];
                if (probe.canPlayType(format.mime)) {
                    this.format = format;
                    break;
                }
            }
            if (!this.format) {
                ig.Sound.enabled = false;
            }
        },
        load: function(path, multiChannel, loadCallback) {
            var realPath = ig.prefix + path.replace(/[^\.]+$/, this.format.ext) + ig.nocache;
            if (this.clips[path]) {
                if (multiChannel && this.clips[path].length < ig.Sound.channels) {
                    for (var i = this.clips[path].length; i < ig.Sound.channels; i++) {
                        var a = new Audio(realPath);
                        a.load();
                        this.clips[path].push(a);
                    }
                }
                return this.clips[path][0];
            }
            var clip = new Audio(realPath);
            if (loadCallback) {
                clip.addEventListener('canplaythrough', function cb(ev) {
                    clip.removeEventListener('canplaythrough', cb, false);
                    loadCallback(path, true, ev);
                }, false);
                clip.addEventListener('error', function(ev) {
                    loadCallback(path, false, ev);
                }, false);
            }
            clip.preload = 'auto';
            clip.load();
            this.clips[path] = [clip];
            if (multiChannel) {
                for (var i = 1; i < ig.Sound.channels; i++) {
                    var a = new Audio(realPath);
                    a.load();
                    this.clips[path].push(a);
                }
            }
            return clip;
        },
        get: function(path) {
            var channels = this.clips[path];
            for (var i = 0, clip; clip = channels[i++];) {
                if (clip.paused || clip.ended) {
                    if (clip.ended) {
                        clip.currentTime = 0;
                    }
                    return clip;
                }
            }
            channels[0].pause();
            channels[0].currentTime = 0;
            return channels[0];
        }
    });
    ig.Music = ig.Class.extend({
        tracks: [],
        namedTracks: {},
        currentTrack: null,
        currentIndex: 0,
        random: false,
        _volume: 1,
        _loop: false,
        _fadeInterval: 0,
        _fadeTimer: null,
        _endedCallbackBound: null,
        init: function() {
            this._endedCallbackBound = this._endedCallback.bind(this);
            if (Object.defineProperty) {
                Object.defineProperty(this, "volume", {
                    get: this.getVolume.bind(this),
                    set: this.setVolume.bind(this)
                });
                Object.defineProperty(this, "loop", {
                    get: this.getLooping.bind(this),
                    set: this.setLooping.bind(this)
                });
            } else if (this.__defineGetter__) {
                this.__defineGetter__('volume', this.getVolume.bind(this));
                this.__defineSetter__('volume', this.setVolume.bind(this));
                this.__defineGetter__('loop', this.getLooping.bind(this));
                this.__defineSetter__('loop', this.setLooping.bind(this));
            }
        },
        add: function(music, name) {
            if (!ig.Sound.enabled) {
                return;
            }
            var path = music instanceof ig.Sound ? music.path : music;
            var track = ig.soundManager.load(path, false);
            track.loop = this._loop;
            track.volume = this._volume;
            track.addEventListener('ended', this._endedCallbackBound, false);
            this.tracks.push(track);
            if (name) {
                this.namedTracks[name] = track;
            }
            if (!this.currentTrack) {
                this.currentTrack = track;
            }
        },
        next: function() {
            if (!this.tracks.length) {
                return;
            }
            this.stop();
            this.currentIndex = this.random ? Math.floor(Math.random() * this.tracks.length) : (this.currentIndex + 1) % this.tracks.length;
            this.currentTrack = this.tracks[this.currentIndex];
            this.play();
        },
        pause: function() {
            if (!this.currentTrack) {
                return;
            }
            this.currentTrack.pause();
        },
        stop: function() {
            if (!this.currentTrack) {
                return;
            }
            this.currentTrack.pause();
            this.currentTrack.currentTime = 0;
        },
        play: function(name) {
            if (name && this.namedTracks[name]) {
                var newTrack = this.namedTracks[name];
                if (newTrack != this.currentTrack) {
                    this.stop();
                    this.currentTrack = newTrack;
                }
            } else if (!this.currentTrack) {
                return;
            }
            this.currentTrack.play();
        },
        getLooping: function() {
            return this._loop;
        },
        setLooping: function(l) {
            this._loop = l;
            for (var i in this.tracks) {
                this.tracks[i].loop = l;
            }
        },
        getVolume: function() {
            return this._volume;
        },
        setVolume: function(v) {
            this._volume = v.limit(0, 1);
            for (var i in this.tracks) {
                this.tracks[i].volume = this._volume;
            }
        },
        fadeOut: function(time) {
            if (!this.currentTrack) {
                return;
            }
            clearInterval(this._fadeInterval);
            this.fadeTimer = new ig.Timer(time);
            this._fadeInterval = setInterval(this._fadeStep.bind(this), 50);
        },
        _fadeStep: function() {
            var v = this.fadeTimer.delta().map(-this.fadeTimer.target, 0, 1, 0).limit(0, 1) * this._volume;
            if (v <= 0.01) {
                this.stop();
                this.currentTrack.volume = this._volume;
                clearInterval(this._fadeInterval);
            } else {
                this.currentTrack.volume = v;
            }
        },
        _endedCallback: function() {
            if (this._loop) {
                this.play();
            } else {
                this.next();
            }
        }
    });
    ig.Sound = ig.Class.extend({
        path: '',
        volume: 1,
        currentClip: null,
        multiChannel: true,
        init: function(path, multiChannel) {
            this.path = path;
            this.multiChannel = (multiChannel !== false);
            this.load();
        },
        load: function(loadCallback) {
            if (!ig.Sound.enabled) {
                if (loadCallback) {
                    loadCallback(this.path, true);
                }
                return;
            }
            if (ig.ready) {
                ig.soundManager.load(this.path, this.multiChannel, loadCallback);
            } else {
                ig.addResource(this);
            }
        },
        play: function() {
            if (!ig.Sound.enabled) {
                return;
            }
            this.currentClip = ig.soundManager.get(this.path);
            this.currentClip.volume = ig.soundManager.volume * this.volume;
            this.currentClip.play();
        },
        stop: function() {
            if (this.currentClip) {
                this.currentClip.pause();
                this.currentClip.currentTime = 0;
            }
        }
    });
    ig.Sound.FORMAT = {
        MP3: {
            ext: 'mp3',
            mime: 'audio/mpeg'
        },
        M4A: {
            ext: 'm4a',
            mime: 'audio/mp4; codecs=mp4a'
        },
        OGG: {
            ext: 'ogg',
            mime: 'audio/ogg; codecs=vorbis'
        },
        WEBM: {
            ext: 'webm',
            mime: 'audio/webm; codecs=vorbis'
        },
        CAF: {
            ext: 'caf',
            mime: 'audio/x-caf'
        }
    };
    ig.Sound.use = [ig.Sound.FORMAT.OGG, ig.Sound.FORMAT.MP3];
    ig.Sound.channels = 4;
    ig.Sound.enabled = true;
});

// ../private/impact/loader.js 
ig.baked = true;
ig.module('impact.loader').requires('impact.image', 'impact.font', 'impact.sound').defines(function() {
    "use strict";
    ig.Loader = ig.Class.extend({
        resources: [],
        gameRootClass: null,
        casinoClass: null,
        gameFacadeClass: null,
        status: 0,
        done: false,
        _unloaded: [],
        _drawStatus: 0,
        _intervalId: 0,
        _loadCallbackBound: null,
        init: function(gameRootClass, gameFacadeClass, casinoClass, resources) {
            this.gameRootClass = gameRootClass;
            this.casinoClass = casinoClass;
            this.gameFacadeClass = gameFacadeClass;
            this.resources = resources;
            this._loadCallbackBound = this._loadCallback.bind(this);
            for (var i = 0; i < this.resources.length; i++) {
                this._unloaded.push(this.resources[i].path);
            }
        },
        load: function() {
            ig.system.clear('#000');
            if (!this.resources.length) {
                this.end();
                return;
            }
            for (var i = 0; i < this.resources.length; i++) {
                this.loadResource(this.resources[i]);
            }
            this._intervalId = setInterval(this.draw.bind(this), 16);
        },
        loadResource: function(res) {
            res.load(this._loadCallbackBound);
        },
        end: function() {
            if (this.done) {
                return;
            }
            this.done = true;
            clearInterval(this._intervalId);
            ig.system.setGame(this.gameRootClass, this.gameFacadeClass, this.casinoClass);
        },
        draw: function() {
            this._drawStatus += (this.status - this._drawStatus) / 5;
        },
        _loadCallback: function(path, status) {
            if (status) {
                this._unloaded.erase(path);
            } else {
                throw ('Failed to load resource: ' + path);
            }
            this.status = 1 - (this._unloaded.length / this.resources.length);
            if (this._unloaded.length == 0) {
                setTimeout(this.end.bind(this), 250);
            }
        }
    });
});

// ../private/impact/timer.js 
ig.baked = true;
ig.module('impact.timer').defines(function() {
    "use strict";
    ig.Timer = ig.Class.extend({
        target: 0,
        base: 0,
        last: 0,
        pausedAt: 0,
        init: function(seconds) {
            this.base = ig.Timer.time;
            this.last = ig.Timer.time;
            this.target = seconds || 0;
        },
        set: function(seconds) {
            this.target = seconds || 0;
            this.base = ig.Timer.time;
            this.pausedAt = 0;
        },
        reset: function() {
            this.base = ig.Timer.time;
            this.pausedAt = 0;
        },
        tick: function() {
            var delta = ig.Timer.time - this.last;
            this.last = ig.Timer.time;
            return (this.pausedAt ? 0 : delta);
        },
        delta: function() {
            return (this.pausedAt || ig.Timer.time) - this.base - this.target;
        },
        pause: function() {
            if (!this.pausedAt) {
                this.pausedAt = ig.Timer.time;
            }
        },
        unpause: function() {
            if (this.pausedAt) {
                this.base += ig.Timer.time - this.pausedAt;
                this.pausedAt = 0;
            }
        }
    });
    ig.Timer._last = 0;
    ig.Timer.time = Number.MIN_VALUE;
    ig.Timer.timeScale = 1;
    ig.Timer.maxStep = 0.05;
    ig.Timer.step = function() {
        var current = Date.now();
        var delta = (current - ig.Timer._last) / 1000;
        ig.Timer.time += Math.min(delta, ig.Timer.maxStep) * ig.Timer.timeScale;
        ig.Timer._last = current;
    };
});

// ../private/impact/system.js 
ig.baked = true;
ig.module('impact.system').requires('impact.timer', 'impact.image').defines(function() {
    "use strict";
    ig.System = ig.Class.extend({
        HD_SCALE_FACTOR: 2,
        hdDisplayScaleFactor: 1,
        isHDSupported: false,
        isHDRequired: false,
        fps: 30,
        width: 320,
        height: 240,
        realWidth: 320,
        realHeight: 240,
        stageWidth: 0,
        stageHeight: 0,
        gameHeight: 0,
        gameWidth: 0,
        stageX: 0,
        stageY: 0,
        stageScale: 1,
        scale: 1,
        currentFPS: 0,
        tick: 0,
        animationId: 0,
        isPortrait: false,
        newGameClass: null,
        running: false,
        clearColor: "#000",
        delegate: null,
        clock: null,
        canvas: null,
        canvasText: null,
        context: null,
        contextText: null,
        casino: null,
        webGlSupported: false,
        callbacksForRerender: [],
        resizableTextCanvas: null,
        resizableTextContext: null,
        resizableOffscreenCanvas: null,
        resizableOffscreenContext: null,
        init: function(canvasId, fps, width, height, scale, clearColor, clientSupportsWebGL) {
            this.fps = fps;
            this.clock = new ig.Timer();
            this.canvas = ig.$(canvasId);
            this.canvasText = ig.$("#canvasText");
            canvas.style.imageRendering = '-moz-crisp-edges';
            canvas.style.imageRendering = '-o-crisp-edges';
            canvas.style.imageRendering = '-webkit-optimize-contrast';
            canvas.style.imageRendering = 'crisp-edges';
            this.resize(width, height, scale);
            if (ig.System.isWebGlSupported() && clientSupportsWebGL) {
                this.context = this.canvas.getContext('webgl-2d');
            } else {
                this.context = this.canvas.getContext('2d');
            }
            this.contextText = this.canvasText.getContext('2d');
            this.contextText.imageSmoothingEnabled = true;
            this.resizableTextCanvas = ig.$("#resizableTextCanvas");
            this.resizableTextContext = this.resizableTextCanvas.getContext("2d");
            this.resizableTextContext.imageSmoothingEnabled = true;
            this.resizableOffscreenCanvas = document.createElement("canvas");
            this.resizableOffscreenCanvas.width = width * 2;
            this.resizableOffscreenCanvas.height = height * 2;
            this.resizableOffscreenCanvas.style.width = width + "px";
            this.resizableOffscreenCanvas.style.height = height + "px";
            this.resizableOffscreenContext = this.resizableOffscreenCanvas.getContext("2d");
            this.clearColor = clearColor;
            this.getDrawPos = ig.System.drawMode;
            if (this.scale != 1) {
                ig.System.scaleMode = ig.System.SCALE.CRISP;
            }
            ig.System.scaleMode(this.canvas, this.context);
        },
        resize: function(width, height, scale) {
            this.width = width;
            this.height = height;
            this.scale = scale || this.scale;
            if (height > 1.2 * width) {
                this.isPortrait = true;
            } else {
                this.isPortrait = false;
            }
            this.realWidth = this.width * this.scale;
            this.realHeight = this.height * this.scale;
            this.canvas.width = this.realWidth;
            this.canvas.height = this.realHeight;
            this.canvasText.width = this.realWidth;
            this.canvasText.height = this.realHeight;
        },
        setGame: function(gameRootClass, gameFacadeClass, casinoClass) {
            if (this.running) {
                this.newGameClass = gameRootClass;
            } else {
                this.setGameNow(gameRootClass, gameFacadeClass, casinoClass);
            }
        },
        setGameNow: function(gameRootClass, gameFacadeClass, casinoClass) {
            ig.game = new(gameRootClass)(gameFacadeClass, casinoClass);
            ig.game.clearColor = this.clearColor;
            ig.system.setDelegate(ig.game);
            ig.system.casino = casinoClass;
        },
        setDelegate: function(object) {
            if (typeof(object.run) == 'function') {
                this.delegate = object;
                this.startRunLoop();
            } else {
                throw ('System.setDelegate: No run() function in object');
            }
        },
        stopRunLoop: function() {
            ig.clearAnimation(this.animationId);
            this.running = false;
        },
        startRunLoop: function() {
            this.stopRunLoop();
            this.animationId = ig.setAnimation(this.run.bind(this), this.canvas);
            this.running = true;
        },
        clear: function(color) {
            this.context.clearRect(0, 0, this.realWidth, this.realHeight);
            this.context.fillStyle = color;
            this.context.fillRect(0, 0, this.realWidth, this.realHeight);
            this.contextText.clearRect(0, 0, this.realWidth, this.realHeight);
        },
        run: function() {
            ig.Timer.step();
            this.tick = this.clock.tick();
            this.delegate.run();
            ig.input.clearPressed();
            if (this.newGameClass) {
                this.setGameNow(this.newGameClass);
                this.newGameClass = null;
            }
        },
        now: function() {
            var performance = window.performance || {};
            performance.now = (function() {
                return performance.now || performance.webkitNow || performance.msNow || performance.oNow || performance.mozNow || function() {
                    return Date.now();
                };
            })();
            return performance.now();
        },
        getDevicePixelRatio: function() {
            var mediaQuery;
            var is_firefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
            if (window.devicePixelRatio !== undefined && !is_firefox) {
                return window.devicePixelRatio;
            } else if (window.matchMedia) {
                mediaQuery = "(-webkit-min-device-pixel-ratio: 1.5),\
            (min--moz-device-pixel-ratio: 1.5),\
            (-o-min-device-pixel-ratio: 3/2),\
            (min-resolution: 1.5dppx)";
                if (window.matchMedia(mediaQuery).matches)
                    return 1.5;
                mediaQuery = "(-webkit-min-device-pixel-ratio: 2),\
            (min--moz-device-pixel-ratio: 2),\
            (-o-min-device-pixel-ratio: 2/1),\
            (min-resolution: 2dppx)";
                if (window.matchMedia(mediaQuery).matches)
                    return 2;
                mediaQuery = "(-webkit-min-device-pixel-ratio: 0.75),\
            (min--moz-device-pixel-ratio: 0.75),\
            (-o-min-device-pixel-ratio: 3/4),\
            (min-resolution: 0.75dppx)";
                if (window.matchMedia(mediaQuery).matches)
                    return 0.7;
            } else
                return 1;
        },
        fitTextIntoArea: function(element, availableWidth, availableHeight, fontstep) {
            if (availableWidth <= 0) {
                return;
            }
            if (fontstep === undefined) {
                fontstep = 1;
            }
            var e = $(element);
            var wasBlocked = e.css("display");
            e.css("display", "block");
            var text = element.html();
            var classes = element.attr('class');
            var curFontSize = e.css('font-size');
            var curLineHeight = e.css('line-height');
            var textDimension = this.calculateTextDimensions(text, classes, curFontSize, curLineHeight);
        },
        fitTextInto: function(elem, availableHeight, fontstep, minFontSize, recursionDepth, initialLineHeight) {
            if (availableHeight <= 0) {
                return;
            }
            var lineHeightRatio = 1.328;
            if (fontstep === undefined) {
                fontstep = 1;
            }
            if (recursionDepth === undefined) {
                recursionDepth = 0;
            } else {
                recursionDepth++;
            }
            if (recursionDepth > 10) {
                return;
            }
            var e = $(elem);
            var wasBlocked = e.css("display");
            if (wasBlocked === "none") {
                e.css("display", "block");
            }
            var eHeight = e.height();
            if (availableHeight === undefined) {
                availableHeight = e.parent().height();
            }
            if (eHeight > availableHeight) {
                var ratio = availableHeight / eHeight;
                var curFontSize = e.css('font-size');
                var len = curFontSize.length;
                var fs = curFontSize.substr(0, len - 2);
                var newFontSize = Math.floor(fs * ratio);
                if (initialLineHeight === undefined) {
                    initialLineHeight = fs * lineHeightRatio;
                }
                var numOfLines = Math.floor(eHeight / fs);
                var lh = fs;
                if (newFontSize <= minFontSize) {
                    this.scaleTextDown(e, minFontSize, initialLineHeight);
                    return;
                }
                this.scaleTextDown(e, (newFontSize), initialLineHeight);
                ig.system.fitTextInto(elem, availableHeight, fontstep, minFontSize, recursionDepth, initialLineHeight);
            }
            e.css("display", wasBlocked);
        },
        scaleTextDown: function(e, fontSize, initialLineHeight) {
            e.css('font-size', fontSize + 'px');
            var eHeight = e.height();
            var numberOfLines = Math.floor(eHeight / fontSize);
            if (numberOfLines > 1) {
                var lheight = Math.ceil(fontSize);
                e.css('line-height', lheight + 'px');
            } else {
                var lheight = Math.ceil(initialLineHeight);
                e.css('line-height', lheight + 'px');
            }
        },
        fitTextIntoWidth: function(elem, availableWidth, fontstep, minFontSize, recursionDepth, initialLineHeight) {
            if (availableWidth <= 0) {
                return;
            }
            var lineHeightRatio = 1.328;
            if (fontstep === undefined) {
                fontstep = 1;
            }
            if (recursionDepth === undefined) {
                recursionDepth = 0;
            } else {
                recursionDepth++;
            }
            if (recursionDepth > 10) {
                return;
            }
            var e = $(elem);
            if (availableWidth === undefined) {
                availableWidth = e.parent().width();
            }
            var wasBlocked = e.css("display");
            if (wasBlocked === "none") {
                e.css("display", "block");
            }
            var text = elem.html();
            var classes = elem.attr('class');
            var curFontSize = e.css('font-size');
            var leng = curFontSize.length;
            var curLineHeight = e.css('line-height');
            curLineHeight = curFontSize.substr(0, leng - 2);
            var eheight = e.height();
            var numOfLines = Math.floor(eheight / curLineHeight);
            var textDimension = this.calculateTextDimensions(text, classes, curFontSize, curLineHeight, numOfLines, e[0].parentNode);
            var eWidth = textDimension.width;
            if (eWidth > availableWidth) {
                var ratio = availableWidth / eWidth;
                var len = curFontSize.length;
                var fs = curFontSize.substr(0, len - 2);
                var newFontSize = Math.floor(fs * ratio);
                if (initialLineHeight === undefined) {
                    initialLineHeight = fs * lineHeightRatio;
                }
                var lh = fs;
                if (numOfLines > 1) {
                    lh = fs - fontstep;
                }
                if (newFontSize <= minFontSize) {
                    this.scaleTextDown(e, minFontSize, initialLineHeight);
                    return;
                }
                this.scaleTextDown(e, (newFontSize), initialLineHeight);
                ig.system.fitTextIntoWidth(elem, availableWidth, fontstep, minFontSize, recursionDepth, initialLineHeight);
            }
            e.css("display", wasBlocked);
        },
        fitTextIntoSingleLine: function(elem, availableWidth, fontstep, minFontSize, recursionDepth, initialLineHeight) {
            if (availableWidth <= 0) {
                return;
            }
            var lineHeightRatio = 1.328;
            if (fontstep === undefined) {
                fontstep = 1;
            }
            if (recursionDepth === undefined) {
                recursionDepth = 0;
            } else {
                recursionDepth++;
            }
            if (recursionDepth > 10) {
                return;
            }
            var e = $(elem);
            if (availableWidth === undefined) {
                availableWidth = e.parent().width();
            }
            var wasBlocked = e.css("display");
            e.css("display", "block");
            var text = elem.html();
            var classes = elem.attr('class');
            var curFontSize = e.css('font-size');
            var curLineHeight = e.css('line-height');
            var leng = curFontSize.length;
            curLineHeight = curFontSize.substr(0, leng - 2);
            var eheight = e.height();
            var textDimension = this.calculateTextDimensions(text, classes, curFontSize, curLineHeight, 1, e[0].parentNode);
            var eWidth = textDimension.width;
            if (eWidth > availableWidth) {
                var len = curFontSize.length;
                var fs = curFontSize.substr(0, len - 2);
                if (initialLineHeight === undefined) {
                    initialLineHeight = fs * lineHeightRatio;
                }
                var lh = fs;
                if (fs - 1 <= minFontSize) {
                    this.scaleTextDown(e, minFontSize, initialLineHeight);
                    return;
                }
                this.scaleTextDown(e, (fs - fontstep), initialLineHeight);
                ig.system.fitTextIntoWidth(elem, availableWidth, fontstep, minFontSize, recursionDepth, initialLineHeight);
            }
            if (wasBlocked === "none") {
                e.css("display", "none");
            }
        },
        splitText: function(text, partCount) {
            var parts = [];
            var delimiter = text.match(/[- ]/);
            if (text.indexOf(delimiter) !== -1) {
                var partLength = Math.floor(text.length / partCount);
                for (var part = 1; part <= partCount; part++) {
                    var gapNotFound = true;
                    if (text.length < partLength) {
                        partLength = text.length;
                    }
                    for (var i = partLength; gapNotFound && i >= 0; i--) {
                        if (text.charAt(i) === delimiter[0]) {
                            var curPart = text.slice(0, i);
                            parts.push(curPart);
                            text = text.replace(curPart + delimiter[0], "");
                            gapNotFound = false;
                        }
                    }
                    if (gapNotFound) {
                        for (var i = partLength; gapNotFound && i < text.length; i++) {
                            if (text.charAt(i) === delimiter[0]) {
                                var curPart = text.slice(0, i);
                                parts.push(curPart);
                                text = text.replace(curPart, "");
                                gapNotFound = false;
                            }
                        }
                    }
                    if (gapNotFound) {
                        parts.push(text);
                    }
                }
                return parts.join("<br>");
            }
            return text;
        },
        calculateTextDimensions: function(text, classes, curFontSize, curLineHeight, numOfLines, parent, escape) {
            classes = classes || [];
            if (typeof classes === 'string') {
                classes = [classes];
            }
            if (escape === undefined) {
                escape = false;
            }
            classes.push('textDimensionCalculation');
            var div = document.createElement('div');
            div.setAttribute('class', classes.join(' '));
            div.style.fontSize = curFontSize;
            div.style.lineHeight = curLineHeight;
            if (numOfLines > 1) {
                text = this.splitText(text, numOfLines);
            }
            if (escape) {
                $(div).text(text);
            } else {
                div.innerHTML = text;
            }
            parent.appendChild(div);
            var dimensions = {
                width: $(div).outerWidth(),
                height: $(div).outerHeight()
            };
            div.parentNode.removeChild(div);
            return dimensions;
        },
        layoutHTMLElementAccordingToCanvas: function(element, posX, posY, width, height, fontSize) {
            var canvasX = ig.system.stageX;
            var canvasY = ig.system.stageY;
            $(element).css("position", "absolute");
            if (posX != undefined) {
                posX = (posX * ig.system.stageScale + canvasX);
                $(element).css("margin-left", posX);
            }
            if (posY != undefined) {
                posY = (posY * ig.system.stageScale + canvasY);
                $(element).css("margin-top", posY);
            }
            if (fontSize != undefined) {
                fontSize = fontSize * ig.system.stageScale;
                $(element).css("font-size", fontSize + "px");
            }
            if (width != undefined) {
                width = width * ig.system.stageScale;
                $(element).css("width", width + "px");
            }
            if (height != undefined) {
                height = height * ig.system.stageScale;
                $(element).css("height", height + "px");
            }
        },
        getDrawPos: null
    });
    ig.System.DRAW = {
        AUTHENTIC: function(p) {
            return Math.round(p) * this.scale;
        },
        SMOOTH: function(p) {
            return Math.round(p * this.scale);
        },
        SUBPIXEL: function(p) {
            return p * this.scale;
        }
    };
    ig.System.drawMode = ig.System.DRAW.SMOOTH;
    ig.System.SCALE = {
        CRISP: function(canvas, context) {
            context.imageSmoothingEnabled = false;
            canvas.style.imageRendering = '-moz-crisp-edges';
            canvas.style.imageRendering = '-o-crisp-edges';
            canvas.style.imageRendering = '-webkit-optimize-contrast';
            canvas.style.imageRendering = 'crisp-edges';
            canvas.style.msInterpolationMode = 'nearest-neighbor';
        },
        SMOOTH: function(canvas, context) {
            context.imageSmoothingEnabled = true;
            canvas.style.imageRendering = '';
            canvas.style.msInterpolationMode = '';
        }
    };
    ig.System.scaleMode = ig.System.SCALE.SMOOTH;
    ig.System.isWebGlSupported = function() {
        if (/OS 9_/i.test(navigator.userAgent)) {
            return false;
        }
        if (ig.ua.wp) {
            return false;
        }
        if (ig.system) {
            return ig.system.context instanceof WebGLRenderingContext;
        }
        var glCvs = document.createElement('canvas');
        var glTest = glCvs.getContext('webgl') || glCvs.getContext('experimental-webgl');
        if (glTest) {
            return true;
        } else {
            return false;
        }
    };
    ig.System.rerenderHTMLLayout = function(width, height) {
        ig.game.facade.gameGui.screenChangeNotification(width, height);
    };
});

// ../private/impact/input.js 
ig.baked = true;
ig.module('impact.input').defines(function() {
    "use strict";
    ig.KEY = {
        'MOUSE1': -1,
        'MOUSE2': -3,
        'MWHEEL_UP': -4,
        'MWHEEL_DOWN': -5,
        'BACKSPACE': 8,
        'TAB': 9,
        'ENTER': 13,
        'PAUSE': 19,
        'CAPS': 20,
        'ESC': 27,
        'SPACE': 32,
        'PAGE_UP': 33,
        'PAGE_DOWN': 34,
        'END': 35,
        'HOME': 36,
        'LEFT_ARROW': 37,
        'UP_ARROW': 38,
        'RIGHT_ARROW': 39,
        'DOWN_ARROW': 40,
        'INSERT': 45,
        'DELETE': 46,
        '_0': 48,
        '_1': 49,
        '_2': 50,
        '_3': 51,
        '_4': 52,
        '_5': 53,
        '_6': 54,
        '_7': 55,
        '_8': 56,
        '_9': 57,
        'A': 65,
        'B': 66,
        'C': 67,
        'D': 68,
        'E': 69,
        'F': 70,
        'G': 71,
        'H': 72,
        'I': 73,
        'J': 74,
        'K': 75,
        'L': 76,
        'M': 77,
        'N': 78,
        'O': 79,
        'P': 80,
        'Q': 81,
        'R': 82,
        'S': 83,
        'T': 84,
        'U': 85,
        'V': 86,
        'W': 87,
        'X': 88,
        'Y': 89,
        'Z': 90,
        'NUMPAD_0': 96,
        'NUMPAD_1': 97,
        'NUMPAD_2': 98,
        'NUMPAD_3': 99,
        'NUMPAD_4': 100,
        'NUMPAD_5': 101,
        'NUMPAD_6': 102,
        'NUMPAD_7': 103,
        'NUMPAD_8': 104,
        'NUMPAD_9': 105,
        'MULTIPLY': 106,
        'ADD': 107,
        'SUBSTRACT': 109,
        'DECIMAL': 110,
        'DIVIDE': 111,
        'F1': 112,
        'F2': 113,
        'F3': 114,
        'F4': 115,
        'F5': 116,
        'F6': 117,
        'F7': 118,
        'F8': 119,
        'F9': 120,
        'F10': 121,
        'F11': 122,
        'F12': 123,
        'SHIFT': 16,
        'CTRL': 17,
        'ALT': 18,
        'PLUS': 187,
        'COMMA': 188,
        'MINUS': 189,
        'PERIOD': 190
    };
    ig.Input = ig.Class.extend({
        bindings: {},
        actions: {},
        presses: {},
        locks: {},
        delayedKeyup: {},
        isUsingMouse: false,
        isUsingKeyboard: false,
        isUsingAccelerometer: false,
        mouse: {
            x: 0,
            y: 0
        },
        accel: {
            x: 0,
            y: 0,
            z: 0
        },
        initMouse: function() {
            if (this.isUsingMouse) {
                return;
            }
            this.isUsingMouse = true;
            var mouseWheelBound = this.mousewheel.bind(this);
            ig.system.canvas.addEventListener('mousewheel', mouseWheelBound, false);
            ig.system.canvas.addEventListener('DOMMouseScroll', mouseWheelBound, false);
            ig.system.canvas.addEventListener('contextmenu', this.contextmenu.bind(this), false);
            ig.system.canvas.addEventListener('mousedown', this.keydown.bind(this), false);
            ig.system.canvas.addEventListener('mouseup', this.keyup.bind(this), false);
            ig.system.canvas.addEventListener('mousemove', this.mousemove.bind(this), false);
            ig.system.canvas.addEventListener('touchstart', this.keydown.bind(this), false);
            ig.system.canvas.addEventListener('touchend', this.keyup.bind(this), false);
            ig.system.canvas.addEventListener('touchmove', this.mousemove.bind(this), false);
        },
        initKeyboard: function() {
            if (this.isUsingKeyboard) {
                return;
            }
            this.isUsingKeyboard = true;
            window.addEventListener('keydown', this.keydown.bind(this), false);
            window.addEventListener('keyup', this.keyup.bind(this), false);
        },
        initAccelerometer: function() {
            if (this.isUsingAccelerometer) {
                return;
            }
            window.addEventListener('devicemotion', this.devicemotion.bind(this), false);
        },
        mousewheel: function(event) {
            var delta = event.wheelDelta ? event.wheelDelta : (event.detail * -1);
            var code = delta > 0 ? ig.KEY.MWHEEL_UP : ig.KEY.MWHEEL_DOWN;
            var action = this.bindings[code];
            if (action) {
                this.actions[action] = true;
                this.presses[action] = true;
                this.delayedKeyup[action] = true;
                event.stopPropagation();
                event.preventDefault();
            }
        },
        mousemove: function(event) {
            var internalWidth = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth;
            var scale = ig.system.scale * (internalWidth / ig.system.realWidth);
            var pos = {
                left: 0,
                top: 0
            };
            if (ig.system.canvas.getBoundingClientRect) {
                pos = ig.system.canvas.getBoundingClientRect();
            }
            var ev = event.touches ? event.touches[0] : event;
            this.mouse.x = (ev.clientX - pos.left) / scale;
            this.mouse.y = (ev.clientY - pos.top) / scale;
        },
        contextmenu: function(event) {
            if (this.bindings[ig.KEY.MOUSE2]) {
                event.stopPropagation();
                event.preventDefault();
            }
        },
        keydown: function(event) {
            var tag = event.target.tagName;
            if (tag == 'INPUT' || tag == 'TEXTAREA') {
                return;
            }
            var code = event.type == 'keydown' ? event.keyCode : (event.button == 2 ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1);
            if (event.type == 'touchstart' || event.type == 'mousedown') {
                this.mousemove(event);
            }
            var action = this.bindings[code];
            if (action) {
                this.actions[action] = true;
                if (!this.locks[action]) {
                    this.presses[action] = true;
                    this.locks[action] = true;
                }
                event.stopPropagation();
                event.preventDefault();
            }
        },
        keyup: function(event) {
            var tag = event.target.tagName;
            if (tag == 'INPUT' || tag == 'TEXTAREA') {
                return;
            }
            var code = event.type == 'keyup' ? event.keyCode : (event.button == 2 ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1);
            var action = this.bindings[code];
            if (action) {
                this.delayedKeyup[action] = true;
                event.stopPropagation();
                event.preventDefault();
            }
        },
        devicemotion: function(event) {
            this.accel = event.accelerationIncludingGravity;
        },
        bind: function(key, action) {
            if (key < 0) {
                this.initMouse();
            } else if (key > 0) {
                this.initKeyboard();
            }
            this.bindings[key] = action;
        },
        bindTouch: function(selector, action) {
            var element = ig.$(selector);
            var that = this;
            element.addEventListener('touchstart', function(ev) {
                that.touchStart(ev, action);
            }, false);
            element.addEventListener('touchend', function(ev) {
                that.touchEnd(ev, action);
            }, false);
        },
        unbind: function(key) {
            var action = this.bindings[key];
            this.delayedKeyup[action] = true;
            this.bindings[key] = null;
        },
        unbindAll: function() {
            this.bindings = {};
            this.actions = {};
            this.presses = {};
            this.locks = {};
            this.delayedKeyup = {};
        },
        state: function(action) {
            return this.actions[action];
        },
        pressed: function(action) {
            return this.presses[action];
        },
        released: function(action) {
            return this.delayedKeyup[action];
        },
        clearPressed: function() {
            for (var action in this.delayedKeyup) {
                this.actions[action] = false;
                this.locks[action] = false;
            }
            this.delayedKeyup = {};
            this.presses = {};
        },
        touchStart: function(event, action) {
            this.actions[action] = true;
            this.presses[action] = true;
            event.stopPropagation();
            event.preventDefault();
            return false;
        },
        touchEnd: function(event, action) {
            this.delayedKeyup[action] = true;
            event.stopPropagation();
            event.preventDefault();
            return false;
        }
    });
});

// ../private/impact/impact.js 
ig.baked = true;
ig.module('impact.impact').requires('dom.ready', 'impact.loader', 'impact.system', 'impact.input', 'impact.sound').defines(function() {
    "use strict";
    ig.main = function(canvasId, gameRootClass, gameFacadeClass, casinoClass, fps, width, height, scale, loaderClass, clearColor, clientSupportsWebGL) {
        ig.system = new ig.System(canvasId, fps, width, height, scale || 1, clearColor, clientSupportsWebGL);
        ig.input = new ig.Input();
        ig.soundManager = new ig.SoundManager();
        ig.music = new ig.Music();
        ig.ready = true;
        var loader = new(loaderClass || ig.Loader)(gameRootClass, gameFacadeClass, casinoClass, ig.resources);
        loader.load();
    };
});



// ../private/plugins/ajax.js 
ig.baked = true;
ig.module('plugins.ajax').requires('impact.impact').defines(function() {
    ig.Ajax = ig.Class.extend({
        get: function(url, callback) {
            this.send(url, callback, 'GET');
        },
        getJSON: function(url, callback) {
            this.get(url, function(response) {
                callback(JSON.parse(response));
            });
        },
        get_sync: function(url) {
            xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            xhr.send(null);
            return xhr.responseText;
        },
        getJSON_sync: function(url) {
            return JSON.parse(this.get_sync(url));
        },
        post: function(url, params, callback) {
            this.send(url, callback, 'POST', this.serialize(params));
        },
        send: function(url, callback, method, params) {
            xhr = new XMLHttpRequest();
            xhr.open(method, url, true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    callback(JSON.parse(xhr.responseText));
                }
            };
            if (method == 'POST') {
                xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            }
            xhr.send(params);
        },
        serialize: function(object) {
            var params = "";
            for (var key in object) {
                if (params != "") {
                    params += "&";
                }
                params += key + "=" + object[key];
            }
            return params;
        }
    });
});


// ../private/de/adp/web/provider/depotProvider.js 
ig.baked = true;
ig.module('de.adp.web.provider.depotProvider').requires('impact.impact').defines(function() {
    DepotProvider = ig.Class.extend({
        portal: null,
        init: function(p_portal) {
            this.portal = p_portal;
        },
        getDepotBalance: function() {
            var limit = this.getLimitedDepotBalance();
            var depot = this.portal.getDepotBalance();
            if (limit < depot) {
                return limit;
            }
            return depot;
        },
        getDepotBalanceForDisplay: function() {
            var depot = this.portal.getDepotBalance();
            return depot;
        },
        addToDepot: function(value) {
            if (typeof(value) === "number" && value >= 0) {
                this.depotValue += value;
            } else {
                throw "Value must be of Type 'Number' and equal or greater than Zero!";
            }
        },
        removeFromDepot: function(value) {
            if (typeof(value) === "number" && value >= 0) {
                this.depotValue -= value;
            } else {
                throw "Value must be of Type 'Number' and equal or greater than Zero";
            }
        },
        canAfford: function(value) {
            return this.getDepotBalance() >= value;
        },
        setDepotBalance: function(value) {
            if (typeof(value) === "number" && value >= 0) {
                this.depotValue = value;
            } else {
                throw "Depotvalue must be of Type 'Number' and equal or greater than Zero";
            }
        },
        getLimitedDepotBalance: function() {
            return this.portal.getLimitedDepotBalance();
        }
    });
});

// ../private/de/adp/web/provider/resourceProvider.js 
ig.baked = true;
ig.module('de.adp.web.provider.resourceProvider').requires('impact.impact').defines(function() {
    ResourceProvider = ig.Class.extend({
        translations: null,
        translatableClasses: [],
        localeID: "",
        translationsReceived: false,
        portal: null,
        init: function(p_portal) {
            this.portal = p_portal
            ig.logger.log(Logger.LogLevel.INFO, "Resource Provider created! Translations can be added now");
        },
        setLocaleId: function(localeid) {
            if (typeof(localeid) !== "undefined" && !Array.isArray(localeid)) {
                this.localeID = localeid;
            } else {
                throw "No localeID specified";
            }
        },
        addTranslations: function(translations) {
            if (typeof(translations) !== "undefined" && typeof(translations) !== "string") {
                if (this.translations === null) {
                    this.translations = translations;
                } else {
                    this.concatTranslations(translations);
                }
                this.translationsReceived = true;
                if (this.translatableClasses.length > 0) {
                    this.callTranslateMethod();
                }
                this.translateHTMLTags();
            }
        },
        registerTranslatableObject: function(classObj) {
            if (classObj !== null && classObj !== undefined) {
                if (typeof classObj.translate === "function") {
                    this.translatableClasses.push(classObj);
                } else {
                    throw "Translatable class " + classObj.toString() + " does not implement function translate!";
                }
                if (this.translationsReceived) {
                    classObj.translate(this);
                }
            }
        },
        callTranslateMethod: function() {
            for (var i = 0; i < this.translatableClasses.length; i++) {
                this.translatableClasses[i].translate(this);
            }
        },
        getLocaleId: function() {
            return this.localeID;
        },
        getString: function(requestString) {
            var translation = "";
            if (requestString === "currency_sign") {
                var curr = this.portal.getCurrency();
                if (curr !== undefined) {
                    return curr.currencySymbol;
                }
            }
            if (this.translations !== null && this.translations.hasOwnProperty(requestString)) {
                translation = this.translations[requestString];
            } else {
                translation = this.portal.getTranslation(requestString);
            }
            return translation;
        },
        concatTranslations: function(translations) {
            for (var key in translations) {
                this.translations[key] = translations[key];
            }
        },
        getCurrencyOptions: function() {
            var curr = this.portal.getCurrency();
            return curr;
        },
        translateHTMLTags: function() {
            var translatableElements = $("*[translatable]");
            for (var i = 0; i < translatableElements.length; i++) {
                var key = translatableElements[i].getAttribute("translatable");
                var dataRole = translatableElements[i].getAttribute("data-role");
                var needsUpperCase = translatableElements[i].getAttribute('data-uppercase');
                if (dataRole === "button") {
                    translatableElements[i].innerHTML = '<span class="ui-btn-inner"><span class="ui-btn-text">' + this.getString(key) + '</span></span>';
                } else if (needsUpperCase) {
                    translatableElements[i].innerHTML = this.getString(key).toUpperCase();
                } else {
                    translatableElements[i].innerHTML = this.getString(key);
                }
            }
            currencyFormatter.translate(this);
        }
    });
});


// ../private/de/adp/web/utils/spaceFiller.js 
ig.baked = true;
ig.module("de.adp.web.utils.spaceFiller").requires("impact.impact").defines(function() {
    SpaceFiller = ig.Class.extend({});
    SpaceFiller.fitMoneyStringInto = function() {};
    SpaceFiller.getFontSizeInPixel = function(selector) {
        var currentFontSize = $(selector).css("font-size");
        var length = currentFontSize.length;
        return currentFontSize.substr(0, length - 2);
    };
    SpaceFiller.getSizeMismatch = function(element, availableWidth) {
        if (availableWidth === undefined) {
            availableWidth = element.parent().width;
        }
        var elementWidth = element.width;
        return availableWidth - elementWidth;
    };
    SpaceFiller.getRequiredDownScaleRatio = function(element, availableWidth) {
        if (availableWidth === undefined) {
            availableWidth = element.parent().width;
        }
        var text = element.html();
        var classes = element.attr('class');
        var curFontSize = element.css('font-size');
        var curLineHeight = element.css('line-height');
        var size = ig.system.calculateTextDimensions(text, classes, curFontSize, curLineHeight, 1, element[0].parentNode);
        var elementWidth = size.width;
        var ratio = availableWidth / elementWidth;
        if (ratio > 1) {
            ratio = 1;
        }
        return ratio;
    };
});

// ../private/de/adp/web/tracking/uitracker.js 
ig.baked = true;
ig.module('de.adp.web.tracking.uitracker').requires('impact.impact').defines(function() {
    UITracker = ig.Class.extend({});
    UITracker.enabled = false;
    UITracker.sessionID = 0;
    UITracker.track = function(event, data) {
        if (!UITracker.enabled) {
            return;
        }
        if (UITracker.sessionID == 0) {
            UITracker.generateSessionID();
        }
        var timeStamp = ig.system.now();
        if (data !== undefined) {
            console.log("[" + UITracker.sessionID + "]" + timeStamp + ":" + event + "," + data);
        } else {
            console.log("[" + UITracker.sessionID + "]" + timeStamp + ":" + event);
        }
    };
    UITracker.generateSessionID = function() {
        UITracker.sessionID = Math.random();
    };
});

// ../private/de/adp/web/provider/displayProvider.js 
ig.baked = true;
ig.module('de.adp.web.provider.displayProvider').requires('impact.impact', 'de.adp.web.utils.spaceFiller', 'de.adp.web.tracking.uitracker').defines(function() {
    DisplayProvider = ig.Class.extend({
        currentWinSum: 0,
        currentBet: 0,
        stageHeight: 0,
        stageWidth: 0,
        textOffsetLeft: 0,
        depotString: "",
        betString: "",
        currencyString: "",
        winString: "",
        limitString: "",
        isWinZoneVisible: false,
        casino: null,
        init: function() {},
        addToWinSumDisplay: function(amount) {
            this.currentWinSum += amount;
            var winSum = "";
            if (currencyFormatter) {
                winSum = currencyFormatter.getMoneyString(this.currentWinSum);
            } else {
                winSum = (this.currentWinSum / 100).toFixed(2);
            }
            this.updateDesktopWinAmount(this.currentWinSum);
        },
        adjustFontSize: function(containerID, captionID, amountFieldID) {
            var containerWidth = $(containerID).innerWidth();
            var captionWidth = $(captionID).outerWidth();
            var availableWidth = containerWidth - captionWidth;
            if (ig.system !== undefined) {
                ig.system.fitTextIntoWidth($(amountFieldID), availableWidth * 0.8);
            }
        },
        setWinSumDisplayTo: function(amount) {
            this.currentWinSum = amount;
            var winSum = "";
            if (currencyFormatter) {
                winSum = currencyFormatter.getMoneyString(this.currentWinSum);
            } else {
                winSum = (this.currentWinSum / 100).toFixed(2);
            }
            this.updateDesktopWinAmount(amount);
        },
        updateBetSumDisplay: function(amount) {
            this.currentBet = amount;
            var bet = "";
            if (currencyFormatter) {
                bet = currencyFormatter.getMoneyString(amount);
            } else {
                bet = (amount / 100).toFixed(2);
            }
            $("#stake-meter").html(this.betString + " " + bet);
            if (this.terminalGUI) {
                this.terminalGUI.setStake(bet);
            }
            if (this.casino) {
                this.casino.onTotalStakeChanged(amount);
            }
            this.rearrangeDepotAndBettingDisplay();
        },
        updateDepotDisplay: function(amount, limitAmount) {
            if (this.casino) {
                if (this.casino.shallShowDepotBalance()) {
                    if (ig.System.depotVisible) {
                        $("#depot-meter").css("display", "");
                    } else {
                        $("#limit-meter").css("display", "");
                    }
                } else {
                    $("#limit-meter").css("display", "none");
                    $("#depot-meter").css("display", "none");
                }
            }
            var depot = 0;
            if (currencyFormatter) {
                depot = currencyFormatter.getDepotString(amount);
            } else {
                depot = ((amount / 100).toFixed(2));
            }
            $("#depot-meter").html(this.depotString + " " + depot);
            $("#limit-meter").html(this.limitString + " " + currencyFormatter.getDepotString(limitAmount.toString()));
            this.rearrangeDepotAndBettingDisplay();
            if (this.terminalGUI) {
                this.terminalGUI.setDepot(depot);
            }
            UITracker.track("depotMeter", depot);
        },
        getStageWidth: function() {
            return this.stageWidth;
        },
        getStageHeight: function() {
            return this.stageHeight;
        },
        rearrangeDepotAndBettingDisplay: function() {
            $(".betting-panel div p").css("font-size", "3em");
            var containerWidth = $(".info-panel").innerWidth();
            var midSpace = $(".betting-panel div p:last-child").css("margin-left");
            if (midSpace !== undefined) {
                var leng = midSpace.length;
                midSpace = parseInt(midSpace.substr(0, leng - 2));
            } else {
                midSpace = 10;
            }
            var elementsWidth = $("#stake-meter").outerWidth() + $("#depot-meter").outerWidth() + midSpace + 1;
            var ratio = containerWidth / elementsWidth;
            if (ratio < 1) {
                var newSize = (3 * ratio) - 0.25 + "em";
                $(".betting-panel div p").css("font-size", newSize);
            }
        },
        updateDesktopWinAmount: function(amount) {
            if (typeof amount !== 'Number') {
                amount = parseInt(amount);
            }
            if (amount === 0) {
                if (this.isWinZoneVisible) {
                    this.showWinZone(false);
                }
            } else {
                if (!this.isWinZoneVisible) {
                    this.showWinZone(true);
                }
            }
            if (currencyFormatter) {
                $("#win-meter").html("<span style='font-size:45%;color:#FFF;font-weight: normal'>" + this.winString + "</span> <span class=' win-number-gradient-yellow'>" + currencyFormatter.getMoneyString(this.currentWinSum) + "</span>");
            } else {
                $("#win-meter").html(this.winString + " " + (this.currentWinSum / 100).toFixed(2));
            }
            this.rearrangeDepotAndBettingDisplay();
            if (this.terminalGUI) {
                this.terminalGUI.setWin(currencyFormatter.getMoneyString(this.currentWinSum));
            }
            if (this.casino) {
                this.casino.onWinChanged(amount);
            }
        },
        translate: function(resProv) {
            this.betString = resProv.getString("stake_label").toUpperCase();
            this.winString = resProv.getString("winnings_label").toUpperCase();
            this.depotString = resProv.getString("depot_label").toUpperCase();
            this.limitString = resProv.getString("limited_depot_label").toUpperCase();
            this.currencyString = resProv.getCurrencyOptions().currencySymbol;
        },
        showWinZone: function(visible) {
            this.isWinZoneVisible = visible;
            if (visible) {
                $('.win-panel').css('visibility', 'visible');
                $('.win-meter').css('visibility', 'visible');
            } else {
                $('.win-panel').css('visibility', 'hidden');
                $('.win-meter').css('visibility', 'hidden');
            }
        },
        showMessage: function(message) {
            this.hideMessage();
            if (this.gameName) {
                message = this.gameName + " " + message.toString();
            }
            $("#message-area").html(message.toString());
            $("#message-area").show();
            this.calcMessageAreaLeftMargin();
        },
        showGameName: function(name) {
            this.gameName = name;
            var message = $("#message-area").html();
            this.showMessage(message);
        },
        hideMessage: function() {
            $("#message-area").hide();
        },
        calcMessageAreaLeftMargin: function() {
            var centerMargin = ($("#header").outerWidth() - $("#message-area").outerWidth()) / 2;
            var realMargin = centerMargin - $(".clock-area").outerWidth();
            $("#message-area").css("margin-left", realMargin + "px");
        },
        addToMessageArea: function(element) {
            $("#respGaming-area").append(element);
        },
        showFrameRate: function(fps) {
            $("fps-counter").css("display", "block");
            $("fps-counter").html(fps + " fps");
        }
    });
});

// ../private/de/adp/web/provider/buttonProvider.js 
ig.baked = true;
ig.module("de.adp.web.provider.buttonProvider").requires("impact.impact").defines(function() {
    ButtonProvider = ig.Class.extend({
        availableButtons: {},
        mainButtonContainer: "",
        supportButtonContainer: "",
        buttonWidth: 0,
        buttonHeight: 0,
        buttonScale: 0,
        init: function() {
            this.mainButtonContainer = "game-controls";
            this.supportButtonContainer = "support-game-controls";
        },
        registerButton: function(button, side) {
            if (side === "" || side === undefined) {
                side = "main";
            }
            if (button instanceof Button) {
                this.availableButtons[button.buttonId] = button;
                if (ig.ua.mobile) {
                    if (side === "main") {
                        $("#" + this.mainButtonContainer).append(button.getView());
                    } else {
                        $("#" + this.supportButtonContainer).append(button.getView());
                    }
                } else {
                    if (button.buttonId === "COLLECT_AND_SPIN") {
                        if (!this.casino.getCasinoConfiguration("ENABLE_AUTOPLAY")) {
                            $("#RISK_BLACKRED_CHOICE").parent().before(button.getView());
                        } else {
                            $("#RISK_LADDER_CHOICE").parent().before(button.getView());
                        }
                    } else {
                        $(".button-bar").append(button.getView());
                    }
                }
                button.hide();
                button.setButtonProvider(this);
                this.updateButtonsAfterResize();
            }
        },
        showButtonsWithIds: function(buttonIDs) {
            this.hideAllButtons();
            $("#" + this.mainButtonContainer).css("display", "block");
            $("#" + this.supportButtonContainer).css("display", "block");
            for (var i = 0; i < buttonIDs.length; i++) {
                if (this.availableButtons[buttonIDs[i]] !== undefined) {
                    this.availableButtons[buttonIDs[i]].show();
                }
            }
            this.adjustPositionOfContainer();
        },
        hideAllButtons: function() {
            for (var buttonID in this.availableButtons) {
                this.availableButtons[buttonID].hide();
            }
        },
        adjustPositionOfContainer: function() {
            if (ig.system.isPortrait) {
                var marginTopLeft = ig.system.gameHeight + ((ig.system.gameHeight / 2) - ($("#" + this.mainButtonContainer).outerHeight() / 2));
                var marginTopRight = ig.system.gameHeight + ((ig.system.gameHeight / 2) - ($("#" + this.supportButtonContainer).outerHeight() / 2));
            } else {
                var marginTopLeft = (ig.system.stageHeight / 2) - ($("#" + this.mainButtonContainer).outerHeight() / 2);
                var marginTopRight = (ig.system.stageHeight / 2) - ($("#" + this.supportButtonContainer).outerHeight() / 2);
            }
            $("#" + this.mainButtonContainer).css("margin-top", Math.floor(marginTopLeft));
            $("#" + this.supportButtonContainer).css("margin-top", Math.floor(marginTopRight));
        },
        disableButtons: function() {
            for (var buttonID in this.availableButtons) {
                this.availableButtons[buttonID].disable();
            }
        },
        enableButtons: function() {
            for (var buttonID in this.availableButtons) {
                this.availableButtons[buttonID].enable();
            }
        },
        updateButtonsAfterResize: function(scale, width, height) {
            if (ig.ua.mobile) {
                return;
            }
            if (height !== undefined) {
                this.buttonHeight = height;
            }
            if (width !== undefined) {
                this.buttonWidth = width;
            }
            if (scale !== undefined) {
                this.buttonScale = scale;
            }
            for (var id in this.availableButtons) {
                if (this.availableButtons.hasOwnProperty(id)) {
                    var btn = this.availableButtons[id];
                    $(btn.getView()).css('width', Math.floor(this.buttonWidth * this.buttonScale) + "px");
                    $(btn.getView()).css('height', Math.floor(this.buttonHeight * this.buttonScale) + "px");
                    $(btn.captionBox).css('font-size', $('#stake-meter').css('font-size'));
                    ig.system.fitTextInto($(btn.captionBox), this.buttonHeight * this.buttonScale);
                    ig.system.fitTextIntoWidth(btn.captionBox, this.buttonWidth * this.buttonScale);
                }
            }
        }
    });
});


// ../private/de/adp/web/utils/logger.js 
ig.baked = true;
ig.module("de.adp.web.utils.logger").requires("impact.impact").defines(function() {
    Logger = ig.Class.extend({
        currentLogLevel: 2,
        loggerConsole: {},
        init: function(facade) {
            this.facade = facade;
            this.loggerConsole = window.console;
            this.mockConsole();
            if (typeof ReleaseBuild === 'undefined') {
                this.currentLogLevel = Logger.LogLevel.DEBUG;
            }
            this.log = this.log.bind(this);
            window.onerror = this.log;
        },
        mockConsole: function() {
            if (ECG.debug !== undefined) {
                if (ECG.debug.log) {
                    this.loggerConsole.log = ECG.debug.log;
                }
            }
            if (!this.loggerConsole.info) {
                this.loggerConsole.info = this.loggerConsole.log;
            }
            if (!this.loggerConsole.error) {
                this.loggerConsole.error = this.loggerConsole.log;
            }
        },
        setLogLevel: function(loglevel) {
            if (typeof ReleaseBuild === 'undefined') {
                this.currentLogLevel = loglevel;
            }
        },
        log: function(type, msg) {
            if (this.facade) {
                this.facade.sendNotification(PaytableIDs.LOG_TO_EXTERNAL_PAYTABLE, type + ":" + msg);
            }
            if (typeof ReleaseBuild !== 'undefined') {
                return;
            }
            switch (type) {
                case Logger.LogLevel.ERROR:
                    if (this.currentLogLevel > Logger.LogLevel.NONE) {
                        this.loggerConsole.error(msg);
                    }
                    break;
                case Logger.LogLevel.INFO:
                    if (this.currentLogLevel > Logger.LogLevel.ERROR) {
                        this.loggerConsole.info(msg);
                    }
                    break;
                case Logger.LogLevel.DEBUG:
                    if (this.currentLogLevel > Logger.LogLevel.INFO) {
                        this.loggerConsole.log(msg);
                    }
                    break;
                default:
                    if (this.currentLogLevel > Logger.LogLevel.ERROR) {
                        this.loggerConsole.info(msg);
                    }
            }
        }
    });
    (function() {
        Logger.LogLevel = {
            NONE: 0,
            ERROR: 1,
            INFO: 2,
            DEBUG: 3
        };
    }());
});

// ../private/de/adp/web/utils/inactivityTimer.js 
ig.baked = true;
ig.module("de.adp.web.utils.inactivityTimer").requires("impact.impact", "de.adp.web.utils.logger").defines(function() {
    InactivityTimer = ig.Class.extend({});
    InactivityTimer.popUpTimer = null;
    InactivityTimer.logOutTimer = null;
    InactivityTimer.delay = 900000;
    InactivityTimer.descisionTime = 60000;
    InactivityTimer.countDown = 60;
    InactivityTimer.countDownInterval = null;
    InactivityTimer.casino = null;
    InactivityTimer.game = null;
    InactivityTimer.isCountingDown = false;
    InactivityTimer.reset = function() {
        if (InactivityTimer.isCountingDown) {
            return;
        }
        if (InactivityTimer.popUpTimer !== null) {
            InactivityTimer.clear();
        }
        if (InactivityTimer.countDownInterval !== null) {
            clearInterval(InactivityTimer.countDownInterval);
        }
        InactivityTimer.countDown = 60;
        InactivityTimer.popUpTimer = setTimeout(InactivityTimer.onTimeout, InactivityTimer.delay - InactivityTimer.descisionTime);
        ig.logger.log(Logger.LogLevel.DEBUG, "timer " + InactivityTimer.popUpTimer + " is started.");
    };
    InactivityTimer.onTimeout = function() {
        InactivityTimer.isCountingDown = true;
        ig.logger.log("timer " + InactivityTimer.timer + " timed out");
        InactivityTimer.clear();
        InactivityTimer.game.root.facade.pauseGame();
        InactivityTimer.game.root.showInactivityScreen();
        InactivityTimer.startCountdown();
        InactivityTimer.logOutTimer = setTimeout(InactivityTimer.onLogOut, InactivityTimer.descisionTime);
        ig.logger.log(Logger.LogLevel.DEBUG, "timer " + InactivityTimer.logOutTimer + " counts down");
    };
    InactivityTimer.startCountdown = function() {
        $("#inactivity-time-left").html(InactivityTimer.countDown);
        InactivityTimer.countDownInterval = setInterval(InactivityTimer.proceedCountdown, 1000);
    };
    InactivityTimer.proceedCountdown = function() {
        InactivityTimer.countDown = InactivityTimer.countDown - 1;
        $("#inactivity-time-left").html(InactivityTimer.countDown);
    };
    InactivityTimer.onLogOut = function() {
        ig.logger.log("timer " + InactivityTimer.logOutTimer + " logs you out.");
        InactivityTimer.clear();
        InactivityTimer.game.root.inactivityPopUpTimedOut();
    };
    InactivityTimer.clear = function() {
        clearTimeout(InactivityTimer.popUpTimer);
        clearTimeout(InactivityTimer.logOutTimer);
        clearInterval(InactivityTimer.countDownInterval);
        ig.logger.log(Logger.LogLevel.DEBUG, "timer " + InactivityTimer.logOutTimer + " cleared.");
        InactivityTimer.popUpTimer = null;
    };
});




// ../private/de/adp/web/dtos/winExtension.js 
ig.baked = true;
ig.module("de.adp.web.dtos.winExtension").requires("impact.impact").defines(function() {
    WinExtension = ig.Class.extend({
        key: "",
        parameters: {},
        _data: {},
        init: function(data) {
            this.fill(data);
        },
        fill: function(data) {
            this._data = data;
            if (typeof data !== "undefined") {
                if (typeof data.key !== "undefined") {
                    this.key = data.key;
                } else {
                    throw "WinExtension has no key";
                }
                if (typeof data.parameters !== "undefined") {
                    this.parameters = data.parameters;
                }
            }
        },
        data: function() {
            return this._data;
        }
    });
});

// ../private/de/adp/web/dtos/win.js 
ig.baked = true;
ig.module("de.adp.web.dtos.win").requires("impact.impact", "de.adp.web.dtos.winExtension").defines(function() {
    Win = ig.Class.extend({
        _rawData: null,
        highlight: null,
        items: [],
        winSum: 0,
        winFactor: 0,
        wagerId: 0,
        wagerPositionId: 0,
        lineId: null,
        evalId: null,
        winExtensions: [],
        _wonFeatureGameIDs: [],
        init: function(data) {
            this.fill(data);
        },
        fill: function(data) {
            this._rawData = data;
            if (typeof data !== "undefined") {
                if (typeof data.winSum !== "undefined") {
                    this.winSum = parseInt(data.winSum, 10);
                }
                if (typeof data.winFactor !== "undefined") {
                    this.winFactor = parseInt(data.winFactor);
                }
                if (typeof data.wagerId !== "undefined") {
                    this.wagerId = parseInt(data.wagerId, 10);
                }
                if (typeof data.wagerPositionId !== "undefined") {
                    this.wagerPositionId = data.wagerPositionId;
                }
                if (typeof data.lid !== undefined || typeof data.lid !== null) {
                    this.lineId = data.lid;
                }
                if (typeof data.eid !== undefined || typeof data.eid !== null) {
                    this.evalId = data.eid;
                }
                if (typeof data.highlight !== "undefined") {
                    var hid = parseInt(data.highlight.payGroupMemberId);
                    var occ = parseInt(data.highlight.occurrence);
                    this.highlight = {
                        id: hid,
                        occurrence: occ
                    };
                }
                if (typeof data.winExtensions !== "undefined") {
                    var rawExtensions = data.winExtensions;
                    var winExtension;
                    for (var i = 0; i < rawExtensions.length; i++) {
                        winExtension = new WinExtension(rawExtensions[i]);
                        this.winExtensions.push(winExtension);
                    }
                    for (var j = 0; j < this.winExtensions.length; j++) {
                        var ext = this.winExtensions[j];
                        var keyConst = "ADD_ON_GAME";
                        if (ext.key === keyConst) {
                            var wonFeatureID = ext.parameters.GAME_NAME;
                            this._wonFeatureGameIDs.push(wonFeatureID);
                        }
                    }
                }
                if (typeof data.items !== "undefined") {
                    this.items = data.items;
                }
            }
        },
        wonFreegames: function() {
            var fgExtension = this.winExtension("FREE_GAME");
            if (typeof fgExtension !== "undefined" && fgExtension !== null) {
                var wonGames = fgExtension.parameters.FREEGAMES;
                return wonGames;
            }
            return 0;
        },
        wonMultiplier: function() {
            var fgExt = this.winExtension("FREE_GAME");
            if (typeof fgExt !== "undefined" && fgExt !== null) {
                var wonMultiplier = fgExt.parameters.MULTIPLIER;
                return wonMultiplier;
            }
            return 1;
        },
        wonFeatureIDs: function() {
            return this._wonFeatureGameIDs;
        },
        winExtension: function(key) {
            for (var i = 0; i < this.winExtensions.length; i++) {
                var ext = this.winExtensions[i];
                if (ext.key === key) {
                    return ext;
                }
            }
            return null;
        },
        data: function() {
            return this._rawData;
        }
    });
});

// ../private/de/adp/web/dtos/gameResult.js 
ig.baked = true;
ig.module("de.adp.web.dtos.gameResult").requires("impact.impact", "de.adp.web.dtos.win").defines(function() {
    GameResult = ig.Class.extend({
        creator: "",
        winnings: [],
        reels: [],
        parameters: {},
        freeGameRound: 0,
        freeGamesTotal: 0,
        currMultiplier: 1,
        _rawData: null,
        _wonFreegames: 0,
        _wonMultiplier: 0,
        _wonMoney: 0,
        _childGameResult: null,
        init: function() {},
        fill: function(data) {
            this._rawData = data;
            if (typeof data !== "undefined") {
                if (typeof data.creatorName !== "undefined") {
                    this.creator = data.creatorName;
                }
                if (typeof data.freeGameRound !== "undefined") {
                    this.freeGameRound = data.freeGameRound;
                }
                if (typeof data.freeGamesTotal !== "undefined") {
                    this.freeGamesTotal = data.freeGamesTotal;
                }
                if (typeof data.multiplier !== "undefined") {
                    this.currMultiplier = data.multiplier;
                }
                if (typeof data.parameters !== "undefined") {
                    this.parameters = data.parameters;
                }
                if (typeof data.winnings !== "undefined") {
                    var wins = data.winnings;
                    for (var i = 0; i < wins.length; i++) {
                        var win = this.createWin(wins[i]);
                        this._wonFreegames += win.wonFreegames();
                        this._wonMultiplier = Math.max(this._wonMultiplier, win.wonMultiplier());
                        this._wonMoney += win.winSum;
                        this.winnings.push(win);
                    }
                }
                if (typeof data.childGameResult !== "undefined" && data.childGameResult !== null) {
                    this._childGameResult = new GameResult();
                    this._childGameResult.fill(data.childGameResult);
                } else {
                    this._childGameResult = null;
                }
                if (typeof data.reels !== "undefined" && data.reels !== null) {
                    this.reels = data.reels;
                }
            }
        },
        createWin: function(data) {
            return new Win(data);
        },
        wonFreegames: function() {
            return this._wonFreegames;
        },
        wonMultiplier: function() {
            return this._wonMultiplier;
        },
        totalWonFreegames: function() {
            if (typeof this._childGameResult !== "null" && this._childGameResult !== null) {
                return this._wonFreegames + this._childGameResult.totalWonFreegames();
            } else {
                return this._wonFreegames;
            }
        },
        totalWinAmount: function() {
            if (typeof this._childGameResult !== "undefined" && this._childGameResult !== null) {
                return this._wonMoney + this._childGameResult.totalWinAmount();
            } else {
                return this._wonMoney;
            }
        },
        childGameResult: function() {
            return this._childGameResult;
        }
    });
});

// ../private/de/adp/web/provider/edictNetworkProviderAdapter.js 
ig.baked = true;
ig.module('de.adp.web.provider.edictNetworkProviderAdapter').requires('impact.impact', 'de.adp.web.provider.displayProvider', 'de.adp.web.provider.depotProvider', 'de.adp.web.utils.inactivityTimer', "de.adp.web.dtos.gameResult", 'de.adp.web.tracking.uitracker').defines(function() {
    EdictNetworkProviderAdapter = ig.Class.extend({
        currentResultHandler: null,
        lastResult: null,
        casino: null,
        edictNetworkProvider: null,
        reqCntr: 0,
        requestQueue: [],
        lastRID: "",
        init: function(eNetworkProvider, pcasino) {
            this.edictNetworkProvider = eNetworkProvider;
            this.casino = pcasino;
            this.onResponseReceived = this.onResponseReceived.bind(this);
            this.requestCallback = this.requestCallback.bind(this);
        },
        addAdpGame: function(adpgame) {
            this.adpgame = adpgame;
        },
        getLastResponse: function() {
            if (typeof this.lastResult === "string") {
                return new ActionResponse(JSON.parse(this.lastResult));
            } else {
                return this.lastResult;
            }
        },
        constructSessionDataString: function() {
            var data = this.casino.retrieveSlotSessionData();
            if (!$.isEmptyObject(data)) {
                var cap1 = this.casino.resourceProvider.getString("slotSession_label");
                var stake = currencyFormatter.getDepotString(data.stakeSum);
                var winning = currencyFormatter.getDepotString(data.winningsSum);
                var profit = currencyFormatter.getDepotString(data.profit);
                cap1 = cap1.replace("{1}", stake);
                cap1 = cap1.replace("{0}", winning);
                cap1 = cap1.replace("{2}", profit);
                this.casino.displayProvider.showMessage(cap1);
            }
        },
        pause: function() {
            this.isPaused = true;
        },
        resume: function() {
            this.isPaused = false;
            this.releaseNextWaitingResponse();
        },
        send: function(request, resultHandler, statusHandler) {
            InactivityTimer.reset();
            this.reqCntr++;
            var cmd = this.extractCommand(request);
            this.requestQueue.push({
                request: request,
                callback: resultHandler,
                rID: cmd + this.reqCntr
            });
            this.printOutRequestQueue();
            if (this.requestQueue.length === 1) {
                this.sendNextRequestFromQueue();
            }
        },
        extractCommand: function(request) {
            if (typeof request === "string") {
                var idx = request.indexOf("gameActionId");
                if (idx !== -1) {
                    return request.substr(idx + 15, 4);
                }
            } else {
                if (request.gameActionId) {
                    return request.gameActionId;
                }
            }
            return "unknown";
        },
        printOutRequestQueue: function() {
            var s = "";
            for (var i = 0; i < this.requestQueue.length; i++) {
                s = s + this.requestQueue[i].rID + ",";
            }
            this.log("queue:" + s);
        },
        requestCallback: function(data) {
            if (this.requestQueue.length > 0) {
                this.requestQueue[0].response = data;
                this.log("Now receiving response of request " + this.requestQueue[0].rID);
                if (!this.isPaused) {
                    this.releaseNextWaitingResponse();
                }
            } else {
                throw new Error("Requests mixed up!");
            }
        },
        log: function(msg) {
            ig.logger.log(Logger.LogLevel.INFO, msg);
        },
        releaseNextWaitingResponse: function() {
            if (this.requestQueue.length > 0) {
                if (this.requestQueue[0].response) {
                    var currRequest = this.requestQueue.shift();
                    this.printOutRequestQueue();
                    this.currentResultHandler = currRequest.callback;
                    this.log("Now processing response of request " + currRequest.rID);
                    this.lastRID = "";
                    this.onResponseReceived(currRequest.response);
                    if (this.requestQueue.length > 0) {
                        this.sendNextRequestFromQueue();
                    }
                }
            }
        },
        onResponseReceived: function(data) {
            this.casino.displayProvider.updateDepotDisplay(this.casino.depotProvider.getDepotBalanceForDisplay(), this.casino.depotProvider.getLimitedDepotBalance());
            this.lastResult = data;
            this.constructSessionDataString();
            UITracker.track("receive", data);
            this.currentResultHandler(data);
        },
        sendNextRequestFromQueue: function() {
            if (this.requestQueue.length > 0) {
                if (this.lastRID !== this.requestQueue[0].rID) {
                    this.log("Now sending request " + this.requestQueue[0].rID + ", last was " + this.lastRID);
                    this.lastRID = this.requestQueue[0].rID;
                    UITracker.track("send", this.requestQueue[0].request);
                    this.edictNetworkProvider.send(this.requestQueue[0].request, this.requestCallback);
                } else {
                    this.log("Tried to send request " + this.requestQueue[0].rID + " twice for some unknown reason.");
                }
            }
        }
    });
});



// ../private/de/adp/web/portal/portalInterface.js 
ig.baked = true;
ig.module('de.adp.web.portal.portalInterface').requires('impact.impact').defines(function() {
    PortalInterface = ig.Class.extend({
        onPrepared: function(callBack, status) {},
        startBackend: function(callBack) {},
        showLoadProgressDisplay: function() {},
        setLoadProgress: function(progress) {},
        hideLoadProgressDisplay: function() {},
        abortGame: function() {},
        closeGame: function() {},
        getCasinoConfiguration: function(key, scope) {},
        showSuppressedCasinoMessages: function(resumeFunction) {},
        openResponsibleGamingLink: function() {},
        getResponsibleGamingIconURL: function() {},
        isResponsibleGamingActive: function() {},
        retrieveSlotSessionData: function() {},
        getDisplaySize: function() {},
        getHelpContent: function() {},
        getDepotBalance: function() {},
        getLimitedDepotBalance: function() {},
        send: function(data, callBack) {},
        getLocale: function() {},
        getTranslation: function(id) {},
        getCurrency: function() {},
        areThereWaitingMessages: function() {},
        gameRoundStarted: function() {},
        gameRoundEnded: function() {},
        logOutPortalUser: function(reason) {},
        shallShowDepotBalance: function() {
            return true;
        },
        betChangeEnabled: function() {
            return true;
        },
        lineChangeEnabled: function() {
            return true;
        },
        maxBetEnabled: function() {
            return true;
        },
        onTotalStakeChanged: function(newStake) {},
        onWinChanged: function(newWin) {},
        onAudioEnabled: function() {},
        onAudioDisabled: function() {},
        getJurisdictionID: function() {
            return "iom";
        },
        mustShowRTP: function() {
            return false;
        },
        mustShowBanButton: function() {
            return false;
        },
        getMaxAllowedBetSize: function() {
            return -1;
        }
    });
});

// ../private/de/adp/web/portal/edictPortalAdapter.js 
ig.baked = true;
ig.module('de.adp.web.portal.edictPortalAdapter').requires('de.adp.web.portal.portalInterface', 'impact.impact', 'de.adp.web.tracking.uitracker').defines(function() {
    EdictPortalAdapter = PortalInterface.extend({
        edictAPI: null,
        requestQueue: [],
        init: function(edictPortalAPI, async) {
            this.async = async;
            this.openResponsibleGamingLink = this.openResponsibleGamingLink.bind(this);
            this.edictAPI = edictPortalAPI;
        },
        getCasinoConfiguration: function(key, scope) {
            val = this.edictAPI.gamblingMachineSpecification.getCasinoOption(key);
            if (val !== null && val !== undefined) {
                return val;
            }
            if (key === "SHALL_CHECK_DEPOT_IN_CLIENT") {
                return false;
            }
            ig.logger.log(Logger.LogLevel.INFO, "No CasinoConfiguration found for key '" + key + "'!");
            return false;
        },
        showSuppressedCasinoMessages: function(resumeFunction) {
            this.edictAPI.gamblingMachineService.showSuppressedCasinoMessages(resumeFunction);
        },
        openResponsibleGamingLink: function() {
            this.edictAPI.gamblingMachineSpecification.openResponsibleGamingUrl();
        },
        getResponsibleGamingIconURL: function() {
            return this.edictAPI.gamblingMachineSpecification.getResponsibleGamingIconPath();
        },
        isResponsibleGamingActive: function() {
            return this.edictAPI.gamblingMachineSpecification.isResponsibleGamingActive();
        },
        retrieveSlotSessionData: function() {
            return this.edictAPI.gamblingMachineSpecification.getSlotSessionInformation();
        },
        closeGame: function() {
            this.edictAPI.gamblingMachineService.stop();
        },
        onPrepared: function(callBack, status, resizeCallback) {
            this.edictAPI.gamblingMachineEnvironment.onPrepared(callBack, status, resizeCallback);
        },
        getDisplaySize: function() {
            return this.edictAPI.gamblingMachineSpecification.getDisplaySize();
        },
        getHelpContent: function() {
            return this.edictAPI.gamblingMachineSpecification.getHelpContent();
        },
        startBackend: function() {
            return this.edictAPI.gamblingMachineService.start();
        },
        setLoadProgress: function(progress) {
            this.edictAPI.loadProgressDisplay.setProgress(progress);
        },
        showLoadProgressDisplay: function() {
            this.edictAPI.loadProgressDisplay.show();
        },
        hideLoadProgressDisplay: function() {
            this.edictAPI.loadProgressDisplay.hide();
        },
        getDepotBalance: function() {
            return this.edictAPI.gamblingMachineService.getDepotBalance();
        },
        getLimitedDepotBalance: function() {
            return this.edictAPI.gamblingMachineService.getLimitedDepotBalance();
        },
        abortGame: function() {
            this.edictAPI.gamblingMachineService.abortGame();
        },
        send: function(data, callBack) {
            if (this.async) {
                this.edictAPI.gamblingMachineService.send(data, callBack, false);
            } else {
                this.edictAPI.gamblingMachineService.send(data, callBack, true);
            }
        },
        getLocale: function() {
            return this.edictAPI.gamblingMachineSpecification.getLocale();
        },
        getTranslation: function(id) {
            return this.edictAPI.gamblingMachineSpecification.getTranslation(id);
        },
        getCurrency: function() {
            var curr = {};
            var edictCurr = this.edictAPI.gamblingMachineSpecification.getCurrency();
            if (edictCurr !== undefined) {
                curr.currencySymbol = edictCurr.currencySymbol;
                curr.currency = edictCurr.currency;
                curr.multiplier = edictCurr.multiplier;
                curr.decimalPoint = edictCurr.decimalPoint;
                curr.thousandSeparator = edictCurr.thousandsSeparator;
                curr.showDecimals = edictCurr.showDecimals;
                curr.printedBefore = edictCurr.printedBefore;
                curr.numberOfFractionDigits = edictCurr.fractionDigits;
            }
            return curr;
        },
        maximizeClient: function() {
            "use strict";
            this.edictAPI.gamblingMachineService.maximizeClient();
        },
        minimizeClient: function() {
            "use strict";
            this.edictAPI.gamblingMachineService.minimizeClient();
        },
        logOutPortalUser: function(reason) {
            this.edictAPI.gamblingMachineService.logoutPortalUser(reason);
        },
        gameRoundStarted: function() {
            if (this.edictAPI.gamblingMachineService.gameRoundStarted) {
                this.edictAPI.gamblingMachineService.gameRoundStarted();
            }
        },
        gameRoundEnded: function() {
            if (this.edictAPI.gamblingMachineService.gameRoundEnded) {
                this.edictAPI.gamblingMachineService.gameRoundEnded();
            }
        },
        areThereWaitingMessages: function() {
            return true;
        },
        shallShowDepotBalance: function() {
            if (ECG.api.layoutSpecification) {
                if (ECG.api.layoutSpecification.depotBalanceVisible) {
                    return ECG.api.layoutSpecification.depotBalanceVisible();
                }
            }
            return true;
        },
        betChangeEnabled: function() {
            if (ECG.api.layoutSpecification) {
                if (ECG.api.layoutSpecification.coinSizesEnabled) {
                    return ECG.api.layoutSpecification.coinSizesEnabled();
                }
            }
            return true;
        },
        lineChangeEnabled: function() {
            if (ECG.api.layoutSpecification) {
                if (ECG.api.layoutSpecification.lineEnabled) {
                    return ECG.api.layoutSpecification.lineEnabled();
                }
            }
            return true;
        },
        maxBetEnabled: function() {
            if (ECG.api.layoutSpecification) {
                if (ECG.api.layoutSpecification.maxBetEnabled) {
                    return ECG.api.layoutSpecification.maxBetEnabled();
                }
            }
            return true;
        },
        onTotalStakeChanged: function(newStake, withForce) {
            if (withForce) {
                this.lastStake = newStake;
                this.edictAPI.gamblingMachineService.stakeUpdated(newStake);
            }
            if (this.lastStake != undefined) {
                if (this.lastStake == newStake) {
                    return;
                }
            }
            this.lastStake = newStake;
            UITracker.track("betMeter", newStake);
            this.edictAPI.gamblingMachineService.stakeUpdated(newStake);
        },
        onWinChanged: function(newWin) {
            UITracker.track("winMeter", newWin);
            this.edictAPI.gamblingMachineService.winUpdated(newWin);
        },
        onAudioEnabled: function() {
            this.edictAPI.gamblingMachineService.audioEnabled();
        },
        onAudioDisabled: function() {
            this.edictAPI.gamblingMachineService.audioDisabled();
        },
        getJurisdictionID: function() {
            return this.edictAPI.gamblingMachineSpecification.getJurisdiction();
        },
        mustShowRTP: function() {
            return this.getCasinoConfiguration("SHOW_RTP_INFORMATION");
        },
        mustShowBanButton: function() {
            return this.getCasinoConfiguration("SHOW_INGAME_24H_BAN_BUTTON");
        },
        banPlayer: function() {
            this.edictAPI.gamblingMachineService.ingame24hBanTriggered();
        },
        getMaxAllowedBetSize: function() {
            if (this.mustShowRTP()) {
                return 100;
            }
            return -1;
        }
    });
});


// ../private/de/adp/web/sound/soundPlayer.js 
ig.baked = true;
ig.module('de.adp.web.sound.soundPlayer').requires('impact.impact').defines(function() {
    SoundPlayer = ig.Class.extend({
        gameSoundSprite: null,
        coreSoundSprite: null,
        nextSound: "",
        ambientChannel: null,
        effectChannels: [],
        ready: false,
        soundOn: false,
        coreEffectChannels: [],
        coreAmbientChannel: null,
        reelRunChannel: null,
        usesWebAudio: false,
        currentAmbientSound: "",
        pausedAmbientSounds: "",
        waitingAmbientSound: "",
        ambientIsPaused: false,
        stitcher: null,
        volume: 1,
        init: function() {
            this.audioIsLoaded = this.audioIsLoaded.bind(this);
            this.coreAudioLoaded = this.coreAudioLoaded.bind(this);
        },
        startLoadSound: function(soundLoadedCb) {
            if (!this.ready) {
                this.gameSoundSprite.onload = this.audioIsLoaded;
                this.coreSoundSprite.onload = this.coreAudioLoaded;
                this.coreAmbientChannel = new Howl(this.coreSoundSprite);
                this.ambientChannel = new Howl(this.gameSoundSprite);
                this.usesWebAudio = this.coreAmbientChannel._webAudio;
            }
        },
        toggleSound: function() {
            this.soundOn = !this.soundOn;
        },
        audioIsLoaded: function() {
            this.ready = true;
            this.gameSoundSprite.onload = null;
            this.effectChannels.push(new Howl(this.gameSoundSprite));
            this.effectChannels.push(new Howl(this.gameSoundSprite));
            this.effectChannels.push(new Howl(this.gameSoundSprite));
            this.effectChannels.push(new Howl(this.gameSoundSprite));
            this.effectChannels.push(new Howl(this.gameSoundSprite));
            this.effectChannels.push(new Howl(this.gameSoundSprite));
            this.stitcher = new Howl(this.gameSoundSprite);
            this.reelRunChannel = new Howl(this.gameSoundSprite);
            this.resumeAmbientSound();
        },
        coreAudioLoaded: function() {
            this.coreSoundSprite.onload = null;
            this.coreEffectChannels.push(new Howl(this.coreSoundSprite));
            this.coreEffectChannels.push(new Howl(this.coreSoundSprite));
            this.coreEffectChannels.push(new Howl(this.coreSoundSprite));
            this.coreEffectChannels.push(new Howl(this.coreSoundSprite));
            this.coreEffectChannels.push(new Howl(this.coreSoundSprite));
            this.coreEffectChannels.push(new Howl(this.coreSoundSprite));
            this.resumeAmbientSound();
        },
        registerSounds: function(soundSpriteSheet) {
            this.gameSoundSprite = soundSpriteSheet.getSoundSprite();
        },
        registerCoreSounds: function(coreSoundSprite) {
            this.coreSoundSprite = coreSoundSprite.getSoundSprite();
        },
        playAmbient: function(soundName) {
            if (soundName === "") {
                return;
            }
            this.currentAmbientSound = soundName;
            if (this.soundOn && this.ready) {
                this.waitingAmbientSound = "";
                if (this.gameSoundSprite.sprite[soundName] !== undefined) {
                    if (this.ambientChannel.isSeekable()) {
                        this.ambientChannel.stop();
                        this.ambientChannel.volume(this.volume);
                        this.logSound(soundName);
                        this.ambientChannel.play(soundName);
                    }
                } else if (this.coreSoundSprite.sprite[soundName] !== undefined) {
                    if (this.coreAmbientChannel.isSeekable()) {
                        this.coreAmbientChannel.stop();
                        this.coreAmbientChannel.volume(this.volume);
                        this.logSound(soundName);
                        this.coreAmbientChannel.play(soundName);
                    }
                } else {
                    throw "No Sound for " + soundName + " registered in Gamesounds or Coresounds";
                }
            } else {
                ig.logger.log(Logger.LogLevel.INFO, "Damn it could not play Ambientsound: " + soundName + " Because Sound enabled : " + this.soundOn + " Soundfile ready: " + this.ready + " Web Audio: " + this.usesWebAudio);
                this.pausedAmbientSounds = this.currentAmbientSound;
                this.waitingAmbientSound = this.currentAmbientSound;
            }
        },
        setAmbientVolume: function(volume) {
            this.coreAmbientChannel.volume(volume);
            this.ambientChannel.volume(volume);
        },
        stopAmbient: function() {
            this.pausedAmbientSounds = "";
            this.currentAmbientSound = "";
            this.waitingAmbientSound = "";
            if (this.soundOn && this.ready) {
                this.ambientChannel.stop();
                this.coreAmbientChannel.stop();
            }
        },
        pauseAllAmbient: function() {
            if (this.ambientIsPaused) {
                return;
            }
            this.ambientIsPaused = true;
            this.pausedAmbientSounds = this.currentAmbientSound;
            this.currentAmbientSound = "";
            if (this.soundOn && this.ready) {
                this.coreAmbientChannel.mute();
                this.ambientChannel.mute();
            }
        },
        pauseAndStopAllAmbient: function() {
            if (this.ambientIsPaused) {
                return;
            }
            this.ambientIsPaused = true;
            this.pausedAmbientSounds = this.currentAmbientSound;
            this.currentAmbientSound = "";
            if (this.soundOn && this.ready) {
                this.coreAmbientChannel.pause();
                this.ambientChannel.pause();
            }
        },
        stopAllAmbient: function() {
            this.pausedAmbientSounds = "";
            this.currentAmbientSound = "";
            this.waitingAmbientSound = "";
            if (this.soundOn && this.ready) {
                this.coreAmbientChannel.stop();
                this.ambientChannel.stop();
            }
        },
        playEffect: function(soundName) {
            if (soundName === "") {
                return;
            }
            var msToGo = 0;
            if (this.soundOn && this.ready) {
                this.clearStuckSounds();
                var nextFreeChannelIdx = -1;
                var shortestRemainingPlayDuration = 9999999999;
                if (this.gameSoundSprite.sprite[soundName] !== undefined) {
                    for (var i = 0; i < this.effectChannels.length; i++) {
                        if (this.effectChannels[i].isSeekable()) {
                            if (!this.effectChannels[i]._playing) {
                                this.effectChannels[i].volume(this.volume);
                                this.logSound(soundName);
                                this.effectChannels[i].play(soundName);
                                return;
                            } else {
                                msToGo = this.effectChannels[i].getMilliSecondsToGo();
                                if (msToGo < shortestRemainingPlayDuration && !this.effectChannels[i]._loop) {
                                    shortestRemainingPlayDuration = msToGo;
                                    nextFreeChannelIdx = i;
                                }
                            }
                        }
                    }
                    ig.logger.log(Logger.LogLevel.INFO, "UI DARN! I had to stop channel " + nextFreeChannelIdx + " in order to be able to play " + soundName + ". Gladly it had only " + shortestRemainingPlayDuration + "ms left to play, so hopefully no one will notice.");
                    if (shortestRemainingPlayDuration >= 0 && nextFreeChannelIdx !== -1) {
                        this.effectChannels[nextFreeChannelIdx].stop();
                        this.logSound(soundName);
                        this.effectChannels[nextFreeChannelIdx].play(soundName);
                    }
                } else if (this.coreSoundSprite.sprite[soundName] !== undefined) {
                    for (var k = 0; k < this.coreEffectChannels.length; k++) {
                        if (this.coreEffectChannels[k].isSeekable()) {
                            if (!this.coreEffectChannels[k]._playing) {
                                this.coreEffectChannels[k].volume(this.volume);
                                this.logSound(soundName);
                                this.coreEffectChannels[k].play(soundName);
                                return;
                            } else {
                                msToGo = this.coreEffectChannels[k].getMilliSecondsToGo();
                                if (msToGo < shortestRemainingPlayDuration && !this.coreEffectChannels[k]._loop) {
                                    shortestRemainingPlayDuration = msToGo;
                                    nextFreeChannelIdx = k;
                                }
                            }
                        }
                    }
                    if (nextFreeChannelIdx !== -1 && shortestRemainingPlayDuration > 0 && nextFreeChannelIdx !== -1) {
                        ig.logger.log(Logger.LogLevel.INFO, "UI DARN! I had to stop channel " + nextFreeChannelIdx + " in order to be able to play " + soundName + ". Gladly it had only " + shortestRemainingPlayDuration + "ms left to play, so hopefully no one will notice.");
                        this.coreEffectChannels[nextFreeChannelIdx].stop();
                        this.logSound(soundName);
                        this.coreEffectChannels[nextFreeChannelIdx].play(soundName);
                    }
                } else {
                    throw "No Sound for " + soundName + " registered in Gamesounds or Coresounds";
                }
            }
        },
        clearStuckSounds: function() {
            var channel;
            for (var gameChans = 0; gameChans < this.effectChannels.length; gameChans++) {
                channel = this.effectChannels[gameChans];
                if (channel._audioNode[0].currentTime >= channel._duration) {
                    channel.stop();
                }
            }
            for (var coreChans = 0; coreChans < this.coreEffectChannels.length; coreChans++) {
                channel = this.coreEffectChannels[coreChans];
                if (channel._audioNode[0].currentTime >= channel._duration) {
                    channel.stop();
                }
            }
        },
        logSound: function(soundName) {
            ig.logger.log(Logger.LogLevel.INFO, "Now playing sound : " + soundName + " with leght " + this.getSoundLengthInMilliSeconds(soundName) + "ms");
        },
        playReelRunSound: function(soundName, looping) {
            if (!this.ready) {
                return;
            }
            if (this.reelRunChannel.isSeekable() && this.isSoundFileAvailable(soundName) && this.soundOn) {
                if (looping) {
                    this.reelRunChannel._sprite[soundName][2] = true;
                } else {
                    this.reelRunChannel._sprite[soundName][2] = false;
                }
                this.reelSpinFaded = false;
                if (!this.reelRunChannel._playing) {
                    this.reelRunChannel.stop();
                    this.logSound(soundName);
                    this.reelRunChannel.play(soundName);
                } else {
                    this.reelRunChannel.stop();
                    this.reelRunChannel.volume(this.volume);
                    this.logSound(soundName);
                    this.reelRunChannel.play(soundName);
                }
            }
        },
        stopReelRunSound: function() {
            if (this.soundOn && this.ready) {
                this.reelRunChannel.stop();
                this.reelRunChannel.volume(this.volume);
            }
        },
        stopEffect: function(soundName) {
            for (var i = 0; i < this.effectChannels.length; i++) {
                if (this.effectChannels[i]._activeSprite === soundName) {
                    this.effectChannels[i].stop();
                    this.effectChannels[i].volume(this.volume);
                } else if (this.coreEffectChannels[i]._activeSprite === soundName) {
                    this.coreEffectChannels[i].stop();
                    this.coreEffectChannels[i].volume(this.volume);
                }
            }
        },
        stopAllEffects: function() {
            for (var i = 0; i < this.effectChannels.length; i++) {
                this.effectChannels[i].stop();
            }
            for (var j = 0; j < this.coreEffectChannels.length; j++) {
                this.coreEffectChannels[j].stop();
            }
            if (this.stitcher) {
                this.stitcher.stop();
            }
        },
        getCurrentSound: function() {
            if (this.currentSound.length > 0) {
                return this.currentSound;
            }
        },
        getSoundLengthInMilliSeconds: function(soundId) {
            var snd;
            if (this.gameSoundSprite.sprite[soundId] !== undefined) {
                snd = this.gameSoundSprite.sprite[soundId];
            } else {
                snd = this.coreSoundSprite.sprite[soundId];
            }
            if (snd == undefined) {
                return 0;
            }
            return snd[1];
        },
        getSoundLengthInFrames: function(soundId) {
            var snd;
            if (this.gameSoundSprite.sprite[soundId] !== undefined) {
                snd = this.gameSoundSprite.sprite[soundId];
            } else {
                snd = this.coreSoundSprite.sprite[soundId];
            }
            ig.logger.log(Logger.LogLevel.INFO, "###Soundplayer returned Soundlength of: " + Math.floor(((snd[1]) / 1000) * parseInt(ig.system.currentFPS)) + " Frames");
            if (this.soundOn && this.ready) {
                return Math.floor(((snd[1]) / 1000) * parseInt(ig.system.currentFPS));
            } else {
                return 45;
            }
        },
        fade: function(soundID, from, to, durationInMilliseconds, callBack) {
            this.reelSpinFaded = true;
            var channel = null;
            channel = this.reelRunChannel;
            if (channel !== null && this.ready && this.soundOn) {
                channel.fade(from, to, durationInMilliseconds, callBack);
            } else {
                if (callBack !== undefined) {
                    callBack();
                }
            }
        },
        isSoundFileAvailable: function(soundname) {
            if (this.gameSoundSprite.sprite[soundname] !== undefined) {
                return true;
            }
            if (this.coreSoundSprite[soundname] !== undefined) {
                return true;
            }
            return false;
        },
        resumeAmbientSound: function() {
            if (ig.ua.IE) {
                return;
            }
            this.ambientIsPaused = false;
            if (this.pausedAmbientSounds !== "") {
                this.currentAmbientSound = this.pausedAmbientSounds;
                if (this.soundOn && this.ready) {
                    this.coreAmbientChannel.unmute();
                    this.ambientChannel.unmute();
                    this.pausedAmbientSounds = "";
                }
            }
            if (this.waitingAmbientSound !== "") {
                this.waitingAmbientSound = "";
                this.playAmbient(this.currentAmbientSound, false);
            }
        },
        resumeAmbientSoundToPausedPosition: function() {
            this.ambientIsPaused = false;
            if (this.pausedAmbientSounds !== "") {
                this.currentAmbientSound = this.pausedAmbientSounds;
                if (this.soundOn && this.ready) {
                    this.coreAmbientChannel.play(this.currentAmbientSound);
                    this.ambientChannel.play(this.currentAmbientSound);
                    this.pausedAmbientSounds = "";
                }
            }
            if (this.waitingAmbientSound !== "") {
                this.waitingAmbientSound = "";
                this.playAmbient(this.currentAmbientSound, false);
            }
        },
        setVolumeTo: function(value) {
            this.volume = value;
            for (var i = 0; i < this.coreEffectChannels.length; i++) {
                this.coreEffectChannels[i].volume(this.volume);
            }
            for (var j = 0; j < this.effectChannels.length; j++) {
                this.effectChannels[j].volume(this.volume);
            }
            this.coreAmbientChannel.volume(this.volume);
            this.ambientChannel.volume(this.volume);
            if (this.ambientIsPaused) {
                this.coreAmbientChannel.mute();
                this.ambientChannel.mute();
            }
            if (this.reelRunChannel) {
                this.reelRunChannel.volume(this.volume);
            }
            if (this.stitcher) {
                this.stitcher.volume(this.volume);
            }
        },
        pauseAllSounds: function() {
            if (!this.ready) {
                return;
            }
            this.pauseAllEffects();
            this.pauseReelRunSound();
            if (this.ambientChannel._playing) {
                this.ambientIsPaused = true;
                this.ambientChannel.pause();
            }
            if (this.coreAmbientChannel._playing) {
                this.coreAmbientChannel.pause();
            }
            if (this.stitcher._playing) {
                this.stitcher.pause();
            }
        },
        resumeAllSounds: function() {
            if (!this.ready) {
                return;
            }
            this.resumeAllEffects();
            this.resumeReelRunSound();
            if (this.ambientChannel.paused) {
                this.ambientIsPaused = false;
                this.ambientChannel.play();
            }
            if (this.coreAmbientChannel.paused) {
                this.coreAmbientChannel.play();
            }
            if (this.stitcher.paused) {
                this.stitcher.play();
            }
        },
        pauseReelRunSound: function() {
            if (!this.ready) {
                return;
            }
            if (this.reelRunChannel._playing) {
                this.reelRunChannel.pause();
            }
        },
        resumeReelRunSound: function() {
            if (!this.ready) {
                return;
            }
            if (this.reelRunChannel.paused && !this.reelSpinFaded) {
                this.reelRunChannel.play();
            }
        },
        pauseAllEffects: function() {
            if (!this.ready) {
                return;
            }
            var msToGo = 0;
            for (var i = 0; i < this.effectChannels.length; i++) {
                if (this.effectChannels[i]._playing) {
                    msToGo = this.effectChannels[i].getMilliSecondsToGo();
                    if (msToGo > 300) {
                        this.effectChannels[i].pause();
                    }
                }
            }
            for (var i = 0; i < this.coreEffectChannels.length; i++) {
                if (this.coreEffectChannels[i]._playing) {
                    msToGo = this.effectChannels[i].getMilliSecondsToGo();
                    if (msToGo > 300) {
                        this.coreEffectChannels[i].pause();
                    }
                }
            }
        },
        resumeAllEffects: function() {
            if (!this.ready) {
                return;
            }
            for (var i = 0; i < this.effectChannels.length; i++) {
                if (this.effectChannels[i].paused) {
                    this.effectChannels[i].play();
                }
            }
            for (var i = 0; i < this.coreEffectChannels.length; i++) {
                if (this.coreEffectChannels[i].paused) {
                    this.coreEffectChannels[i].play();
                }
            }
        },
        resumeSoundOnTouch: function() {
            this.reelRunChannel;
        },
        playStitchedSounds: function(ids) {
            this.stitcher.playStitchedSounds(ids);
        }
    });
});

// ../private/de/adp/web/casino/edictCasino.js 
ig.baked = true;
ig.module('de.adp.web.casino.edictCasino').requires('impact.impact', 'plugins.ajax', 'de.adp.web.provider.depotProvider', 'de.adp.web.provider.resourceProvider', 'de.adp.web.provider.displayProvider', 'de.adp.web.provider.buttonProvider', 'de.adp.web.provider.edictNetworkProviderAdapter', 'de.adp.web.portal.edictPortalAdapter', 'de.adp.web.sound.soundPlayer').defines(function() {
    EdictCasino = ig.Class.extend({
        controlOrientation: 'right',
        gameGui: null,
        networkProvider: null,
        depotProvider: null,
        displayProvider: null,
        resourceProvider: null,
        soundPlayer: null,
        buttonProvider: null,
        portal: null,
        init: function(edict, async) {
            this.openResponsibleGamingLink = this.openResponsibleGamingLink.bind(this);
            this.portal = new EdictPortalAdapter(edict, async);
            this.depotProvider = new DepotProvider(this.portal);
            this.resourceProvider = new ResourceProvider(this.portal);
            this.displayProvider = new DisplayProvider();
            this.displayProvider.casino = this;
            this.resourceProvider.registerTranslatableObject(this.displayProvider);
            this.soundPlayer = new SoundPlayer();
            this.buttonProvider = new ButtonProvider();
            this.networkProvider = new EdictNetworkProviderAdapter(this.portal, this);
        },
        addGameGui: function(gui) {
            if (typeof(gui) !== "undefined" && gui != null) {
                this.gameGui = gui;
            }
        },
        getCasinoConfiguration: function(key, scope) {
            var val = "";
            if (key === "SHALL_CHECK_DEPOT_IN_CLIENT") {
                val = this.portal.getCasinoConfiguration(key);
                if (val === null || val === undefined) {
                    return false;
                }
                return val;
            }
            return this.portal.getCasinoConfiguration(key);
        },
        showSuppressedCasinoMessages: function(resumeFunction) {
            this.portal.showSuppressedCasinoMessages(resumeFunction);
        },
        openResponsibleGamingLink: function() {
            this.portal.openResponsibleGamingLink();
        },
        getResponsibleGamingIconURL: function() {
            return this.portal.getResponsibleGamingIconURL();
        },
        isResponsibleGamingActive: function() {
            return this.portal.isResponsibleGamingActive();
        },
        retrieveSlotSessionData: function() {
            return this.portal.retrieveSlotSessionData();
        },
        closeGame: function() {
            this.portal.closeGame();
        },
        onPrepared: function(callBack, status, resizeCallback) {
            this.portal.onPrepared(callBack, status, resizeCallback);
        },
        getDisplaySize: function() {
            return this.portal.getDisplaySize();
        },
        getHelpContent: function() {
            return this.portal.getHelpContent();
        },
        start: function(callBack) {
            this.portal.startBackend();
            this.resourceProvider.setLocaleId(this.portal.getLocale());
            return this.networkProvider.send({
                gameActionId: "INIT"
            }, callBack);
        },
        showLoadProgress: function(progress) {
            this.portal.setLoadProgress(progress);
        },
        maximizeGame: function() {
            "use strict";
            this.portal.maximizeClient();
        },
        minimizeGame: function() {
            "use strict";
            this.portal.minimizeClient();
        },
        logOutPortalUser: function(reason) {
            this.portal.logOutPortalUser(reason);
        },
        gameRoundStarted: function() {
            this.portal.gameRoundStarted();
        },
        gameRoundEnded: function() {
            this.portal.gameRoundEnded();
        },
        shallShowDepotBalance: function() {
            return this.portal.shallShowDepotBalance();
        },
        betChangeEnabled: function() {
            return this.portal.betChangeEnabled();
        },
        lineChangeEnabled: function() {
            return this.portal.lineChangeEnabled();
        },
        maxBetEnabled: function() {
            return this.portal.maxBetEnabled();
        },
        onTotalStakeChanged: function(newStake) {
            this.portal.onTotalStakeChanged(newStake);
        },
        getJurisdictionID: function() {
            return this.portal.getJurisdictionID();
        },
        onWinChanged: function(newWin) {
            this.portal.onWinChanged(newWin);
        },
        onAudioEnabled: function() {
            this.portal.onAudioEnabled();
        },
        onAudioDisabled: function() {
            this.portal.onAudioDisabled();
        },
        mustShowRTP: function() {
            return this.portal.mustShowRTP();
        },
        mustShowBanButton: function() {
            return this.portal.mustShowBanButton();
        },
        banPlayer: function() {
            this.portal.banPlayer();
        },
        getMaxAllowedBetSize: function() {
            return this.portal.getMaxAllowedBetSize();
        }
    });
});


// ../private/de/adp/web/resources/resourceLoader.js 
ig.baked = true;
ig.module('de.adp.web.resources.resourceLoader').requires('impact.loader').defines(function() {
    ResourceLoader = ig.Loader.extend({
        maximumChunksPerLoad: 4,
        loadedChunks: 0,
        updateTimeOut: undefined,
        init: function(gameRootClass, gameFacadeClass, casinoClass, resources) {
            this.gameRootClass = gameRootClass;
            this.casinoClass = casinoClass;
            this.gameFacadeClass = gameFacadeClass;
            this.resources = resources;
            this._loadCallbackBound = this._loadCallback.bind(this);
            this.updateProgressDisplay = this.updateProgressDisplay.bind(this);
            for (var i = 0; i < this.resources.length; i++) {
                this._unloaded.push(this.resources[i].path);
            }
        },
        load: function() {
            ig.system.clear('#000');
            if (!this.resources.length) {
                this.end();
                return;
            }
            for (var i = 0; i < this.maximumChunksPerLoad; i++) {
                this.loadResource(this.resources[i]);
            }
            this._intervalId = setInterval(this.draw.bind(this), 16);
        },
        loadNextChunk: function() {
            for (var i = this.loadedChunks; i < this.resources.length && i < (this.loadedChunks + this.maximumChunksPerLoad) && this.loadedChunks < this.resources.length; i++) {
                this.loadResource(this.resources[i]);
            }
        },
        draw: function() {
            this._drawStatus += (this.status - this._drawStatus) / 5;
            if (typeof(ECG) === "undefined") {
                var s = ig.system.scale;
                var w = ig.system.width * 0.6;
                var h = ig.system.height * 0.1;
                var x = ig.system.width * 0.5 - w / 2;
                var y = ig.system.height * 0.5 - h / 2;
                ig.system.context.fillStyle = '#000';
                ig.system.context.fillRect(0, 0, 480, 320);
                ig.system.context.fillStyle = '#fff';
                ig.system.context.fillRect(x * s, y * s, w * s, h * s);
                ig.system.context.fillStyle = '#000';
                ig.system.context.fillRect(x * s + s, y * s + s, w * s - s - s, h * s - s - s);
                ig.system.context.fillStyle = '#fff';
                ig.system.context.fillRect(x * s, y * s, w * s * this._drawStatus, h * s);
            } else {
                if (typeof(ECG.api) !== "undefined") {
                    var status = this._drawStatus;
                    this.updateTimeOut = setTimeout(this.updateProgressDisplay, 10);
                }
            }
        },
        updateProgressDisplay: function() {
            this.casinoClass.showLoadProgress(this._drawStatus * 100);
            clearTimeout(this.updateTimeOut);
        },
        end: function() {
            this.parent();
            $('body').off('touchmove');
            $('body').css('pointer-events', '');
            this.casinoClass.portal.hideLoadProgressDisplay();
            if (this.casinoClass.soundPlayer.soundOn) {
                this.casinoClass.portal.onAudioEnabled();
            } else {
                this.casinoClass.portal.onAudioDisabled();
            }
            this.casinoClass.portal.onTotalStakeChanged(this.casinoClass.displayProvider.currentBet, true);
            $("#progress_display_canvas").remove();
            $("#main").css("visibility", "visible");
        },
        _loadCallback: function(path, status) {
            if (status) {
                this._unloaded.erase(path);
                ig.logger.log(Logger.LogLevel.INFO, 'Loaded chunk:' + this.loadedChunks);
                this.loadedChunks++;
                if (this.loadedChunks > 0 && this.loadedChunks % 4 === 0) {
                    ig.logger.log(Logger.LogLevel.INFO, "Loading next chunks of " + this.maximumChunksPerLoad);
                    this.loadNextChunk();
                }
            } else {
                throw ('Failed to load resource: ' + path);
            }
            this.status = 1 - (this._unloaded.length / this.resources.length);
            if (this._unloaded.length == 0) {
                setTimeout(this.end.bind(this), 250);
            }
        },
        preventClickingWhileLoading: function(evt) {
            evt.preventDefault();
            evt.stopPropagation();
        }
    });
});


// ../private/de/adp/web/gui/currencyFormatter.js 
ig.baked = true;
ig.module('de.adp.web.gui.currencyFormatter').requires('impact.impact').defines(function() {
    function fillUpCentsAndConvertToString(amountInCents, numOfFractionDigits) {
        var moneyString = "" + amountInCents;
        if (amountInCents < 0) {
            moneyString = "" + Math.abs(amountInCents);
        }
        if (moneyString.length > numOfFractionDigits) {
            moneyString = moneyString;
        }
        if (moneyString.length == numOfFractionDigits) {
            moneyString = "0" + moneyString;
        }
        if (moneyString.length == numOfFractionDigits - 1) {
            moneyString = "00" + moneyString;
        }
        if (moneyString.length == numOfFractionDigits - 2) {
            moneyString = "000" + moneyString;
        }
        if (moneyString.length == numOfFractionDigits - 3) {
            moneyString = "0000" + moneyString;
        }
        return moneyString;
    }
    CurrencyFormatter = ig.Class.extend({
        casino: null,
        canCutOffDecimals: false,
        currencyOptions: {
            currencySymbol: "",
            currency: "",
            multiplier: 1,
            decimalPoint: ".",
            printedBefore: false,
            thousandSeparator: ",",
            numberOfFractionDigits: 2
        },
        init: function(p_casino) {
            this.casino = p_casino;
        },
        getMoneyString: function(amountInCents, withoutDecimals) {
            if (withoutDecimals == undefined) {
                withoutDecimals = this.canCutOffDecimals;
            }
            if (this.casino) {
                this.currencyOptions = this.casino.resourceProvider.getCurrencyOptions();
            }
            var sign = "";
            var moneyString = fillUpCentsAndConvertToString(amountInCents, this.currencyOptions.numberOfFractionDigits);
            var cents = moneyString.substr(moneyString.length - this.currencyOptions.numberOfFractionDigits, this.currencyOptions.numberOfFractionDigits);
            var full = moneyString.substr(0, moneyString.length - this.currencyOptions.numberOfFractionDigits);
            var shortCutResult = this.applyShortCutsToMoneyString(full, cents);
            full = shortCutResult.full;
            var shortCut = shortCutResult.shortCut;
            if (shortCut != "") {
                var txt = this.casino.resourceProvider.getString("shortcutExplanation");
                this.casino.displayProvider.showMessage(txt);
            }
            cents = shortCutResult.cents;
            if (this.currencyOptions.thousandSeparator !== "") {
                full = this.fillInThousandSeparators(full, this.currencyOptions.thousandSeparator);
            }
            if (amountInCents < 0) {
                sign = "-";
            }
            moneyString = this.constructMoneyString(full, shortCut, this.currencyOptions.decimalPoint, cents, sign, withoutDecimals);
            if (this.currencyOptions.currencySymbol === " ") {
                this.currencyOptions.currencySymbol = "";
            }
            if (this.currencyOptions.currencySymbol != "") {
                moneyString = this.applyCurrencySymbol(moneyString, this.currencyOptions.currencySymbol, this.currencyOptions.printedBefore)
            }
            return moneyString;
        },
        fillInThousandSeparators: function(fullString, separator) {
            var fullParts = fullString.split("");
            fullString = "";
            for (var i = fullParts.length; i > 0; i--) {
                if ((fullParts.length - i) % 3 === 0 && i !== fullParts.length) {
                    fullString = separator + fullString;
                }
                fullString = fullParts[i - 1] + fullString;
            }
            return fullString;
        },
        getDepotString: function(amountInCents) {
            if (this.casino) {
                this.currencyOptions = this.casino.resourceProvider.getCurrencyOptions();
            }
            var sign = "";
            var moneyString = fillUpCentsAndConvertToString(amountInCents, this.currencyOptions.numberOfFractionDigits);
            var cents = moneyString.substr(moneyString.length - this.currencyOptions.numberOfFractionDigits, this.currencyOptions.numberOfFractionDigits);
            var full = moneyString.substr(0, moneyString.length - this.currencyOptions.numberOfFractionDigits);
            if (this.currencyOptions.thousandSeparator !== "") {
                full = this.fillInThousandSeparators(full, this.currencyOptions.thousandSeparator);
            }
            if (amountInCents < 0) {
                sign = "-";
            }
            moneyString = this.constructMoneyString(full, "", this.currencyOptions.decimalPoint, cents, sign, false);
            if (this.currencyOptions.currencySymbol === " ") {
                this.currencyOptions.currencySymbol = "";
            }
            if (this.currencyOptions.currencySymbol != "") {
                moneyString = this.applyCurrencySymbol(moneyString, this.currencyOptions.currencySymbol, this.currencyOptions.printedBefore)
            }
            return moneyString;
        },
        applyShortCutsToMoneyString: function(moneyString, p_cents) {
            var shortCut = "";
            var l = moneyString.length;
            var cutOffIndex = 0;
            var shortCutMillionPossible = false;
            var shortCutBillionPossible = false;
            if (l > 6) {
                var shortCutMillion = this.casino.resourceProvider.getString("shortMillion");
                shortCutMillionPossible = shortCutMillion != "shortMillion";
                if (shortCutMillionPossible) {
                    cutOffIndex = 6;
                    shortCut = shortCutMillion;
                }
            }
            if (l > 9) {
                var shortCutBillion = this.casino.resourceProvider.getString("shortBillion");
                shortCutBillionPossible = shortCutBillion != "shortBillion";
                if (shortCutBillionPossible) {
                    cutOffIndex = 9;
                    shortCut = shortCutBillion;
                }
            }
            if (l <= 6 || (!shortCutMillionPossible && !shortCutBillionPossible)) {
                return {
                    full: moneyString,
                    shortCut: shortCut,
                    cents: p_cents
                };
            }
            var cutOff = moneyString.substr(l - cutOffIndex);
            var zeroCnt = 0;
            var digits = cutOff.split("");
            var digitCnt = digits.length;
            for (var i = digitCnt; i > 0; i--) {
                if (digits[i - 1] == "0") {
                    zeroCnt++;
                } else {
                    break;
                }
            }
            cutOff = cutOff.substr(0, cutOff.length - zeroCnt);
            moneyString = moneyString.substr(0, l - cutOffIndex);
            return {
                full: moneyString,
                shortCut: shortCut,
                cents: cutOff
            };
        },
        constructMoneyString: function(full, shortCut, decimalPoint, cents, sign, withoutDecimals) {
            var moneyString = "";
            if (shortCut != "") {
                if (cents != "") {
                    return sign + full + decimalPoint + cents + " " + shortCut;
                }
                return sign + full + " " + shortCut;
            }
            if (cents != "") {
                if (withoutDecimals) {
                    if (!this.areXLastCharactersZero(cents, cents.length)) {
                        return full + decimalPoint + cents;
                    } else {
                        return full;
                    }
                }
                return sign + full + decimalPoint + cents;
            }
            return sign + full;
        },
        applyCurrencySymbol: function(moneyString, currencySymbol, printedBefore) {
            if (printedBefore) {
                moneyString = currencySymbol + " " + moneyString;
            } else {
                moneyString = moneyString + " " + currencySymbol;
            }
            return moneyString;
        },
        getCurrencySymbol: function() {
            var parsedCurrencySymbol = "";
            if (this.currencyOptions.currencySymbol.match(/&#[0-9]*/g)) {
                var unicodes = this.currencyOptions.currencySymbol.match(/&#[0-9]*/g),
                    codeNumber = 0;
                for (var i = 0; i < unicodes.length; i++) {
                    codeNumber = parseInt(unicodes[i].match(/[0-9]+/));
                    parsedCurrencySymbol += String.fromCharCode(codeNumber);
                }
            } else {
                parsedCurrencySymbol = this.currencyOptions.currencySymbol;
            }
            return parsedCurrencySymbol;
        },
        getMoneyStringForCanvas: function(amountInCents, withoutDecimals) {
            if (withoutDecimals == undefined) {
                withoutDecimals = this.canCutOffDecimals;
            }
            var parsedCurrencySymbol = "";
            if (this.casino) {
                this.currencyOptions = this.casino.resourceProvider.getCurrencyOptions();
                this.currencyOptions.showDecimals = this.currencyOptions.showDecimals !== undefined ? this.currencyOptions.showDecimals : true;
                var showDecimals = this.currencyOptions.showDecimals;
                if (this.currencyOptions.currencySymbol.match(/&#[0-9]*/g)) {
                    var unicodes = this.currencyOptions.currencySymbol.match(/&#[0-9]*/g),
                        codeNumber = 0;
                    for (var i = 0; i < unicodes.length; i++) {
                        codeNumber = parseInt(unicodes[i].match(/[0-9]+/));
                        parsedCurrencySymbol += String.fromCharCode(codeNumber);
                    }
                } else {
                    parsedCurrencySymbol = this.currencyOptions.currencySymbol;
                }
            }
            var sign = "";
            var moneyString = fillUpCentsAndConvertToString(amountInCents, this.currencyOptions.numberOfFractionDigits);
            var cents = moneyString.substr(moneyString.length - this.currencyOptions.numberOfFractionDigits, this.currencyOptions.numberOfFractionDigits);
            var full = moneyString.substr(0, moneyString.length - this.currencyOptions.numberOfFractionDigits);
            var shortCutResult = this.applyShortCutsToMoneyString(full, cents);
            full = shortCutResult.full;
            var shortCut = shortCutResult.shortCut;
            if (shortCut != "") {
                var txt = this.casino.resourceProvider.getString("shortcutExplanation");
                this.casino.displayProvider.showMessage(txt);
            }
            cents = shortCutResult.cents;
            if (this.currencyOptions.thousandSeparator !== "") {
                full = this.fillInThousandSeparators(full, this.currencyOptions.thousandSeparator);
            }
            if (amountInCents < 0) {
                sign = "-";
            }
            moneyString = this.constructMoneyString(full, shortCut, this.currencyOptions.decimalPoint, cents, sign, withoutDecimals);
            if (parsedCurrencySymbol === " ") {
                parsedCurrencySymbol = "";
            }
            if (parsedCurrencySymbol != "") {
                moneyString = this.applyCurrencySymbol(moneyString, parsedCurrencySymbol, this.currencyOptions.printedBefore)
            }
            return moneyString;
        },
        translate: function(stringProvider) {
            this.floatDelimiter = stringProvider.getString("Number.Delim.Float");
        },
        cutOffTrailingZeros: function(s) {
            var zeroCnt = 0;
            var digits = s.split("");
            var digitCnt = digits.length;
            for (var i = digitCnt; i > 0; i--) {
                if (digits[i - 1] === "0") {
                    zeroCnt++;
                } else {
                    break;
                }
            }
            s = s.substr(0, s.length - zeroCnt);
            return s;
        },
        areXLastCharactersZero: function(str, x) {
            var s = str.substr(-x);
            var zeroCnt = 0;
            var digits = s.split("");
            var digitCnt = digits.length;
            for (var i = digitCnt; i > 0; i--) {
                if (digits[i - 1] != "0") {
                    return false;
                }
            }
            return true;
        }
    });
    currencyFormatter = new CurrencyFormatter();
});
currentFPS = 0;
reelOffset = 93;
browserEngine = navigator.userAgent.match(/Webkit/) && navigator.userAgent.match(/Mozilla/) && navigator.userAgent.match(/Safari/);

// ../private/impact/animation.js 
ig.baked = true;
ig.module('impact.animation').requires('impact.timer', 'impact.image').defines(function() {
    "use strict";
    ig.AnimationSheet = ig.Class.extend({
        width: 8,
        height: 8,
        image: null,
        init: function(path, width, height) {
            this.width = width;
            this.height = height;
            this.image = new ig.Image(path);
        }
    });
    ig.Animation = ig.Class.extend({
        sheet: null,
        timer: null,
        trigger: null,
        name: "",
        sequence: [],
        loopSequence: [],
        isStillImage: false,
        flip: {
            x: false,
            y: false
        },
        pivot: {
            x: 0,
            y: 0
        },
        frame: 0,
        tile: 0,
        loopCount: 0,
        alpha: 1,
        angle: 0,
        isOverSized: false,
        isHorizontalOversized: false,
        overSizedOffset: {
            x: 0,
            y: 0
        },
        isAlwaysOnTop: false,
        init: function(sheet, frameTime, sequence, trigger, stop) {
            this.sheet = sheet;
            this.pivot = {
                x: sheet.width / 2,
                y: sheet.height / 2
            };
            this.timer = new ig.Timer();
            this.frameTime = frameTime;
            this.sequence = sequence;
            if (sequence.length === 1) {
                this.isStillImage = true;
            }
            this.stop = !!stop;
            this.trigger = trigger;
            this.tile = this.sequence[0];
        },
        pause: function() {
            this.timer.pause();
        },
        resume: function() {
            this.timer.unpause();
        },
        registerLoopSequence: function(sequence) {
            if (Array.isArray(sequence)) {
                this.loopSequence = sequence;
            }
        },
        setName: function(name) {
            this.name = name;
        },
        rewind: function() {
            this.timer.set();
            this.loopCount = 0;
            this.tile = this.sequence[0];
            return this;
        },
        triggeredBy: function(lineResult, result, position) {
            return this.trigger.triggeredBy(lineResult, result, position);
        },
        gotoFrame: function(f) {
            this.timer.set(this.frameTime * -f);
            this.update();
        },
        gotoRandomFrame: function() {
            this.gotoFrame(Math.floor(Math.random() * this.sequence.length))
        },
        update: function() {
            if (this.isStillImage) {
                return;
            }
            var frameTotal = Math.floor(this.timer.delta() / this.frameTime);
            this.loopCount = Math.floor(frameTotal / this.sequence.length);
            if (this.stop && this.loopCount > 0) {
                this.frame = this.sequence.length - 1;
                this.tile = this.sequence[this.frame];
            } else if (this.loopSequence.length > 0 && this.loopCount > 0) {
                var delta = this.sequence.length - this.loopSequence.length;
                this.frame = (frameTotal - delta) % this.loopSequence.length;
                this.tile = this.loopSequence[this.frame];
            } else {
                this.frame = frameTotal % this.sequence.length;
                this.tile = this.sequence[this.frame];
            }
        },
        onRemoved: function() {},
        onAttached: function() {},
        draw: function(targetX, targetY, ctx) {
            var bbsize = Math.max(this.sheet.width, this.sheet.height);
            if (!ctx) {
                if (targetX > ig.system.width || targetY > ig.system.height || targetX + bbsize < 0 || targetY + bbsize < 0) {
                    return;
                }
                if (this.alpha != 1) {
                    ig.system.context.globalAlpha = this.alpha;
                }
                if (this.angle == 0) {
                    this.sheet.image.drawTile(targetX + this.overSizedOffset.x, targetY + this.overSizedOffset.y, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y);
                } else {
                    ig.system.context.save();
                    ig.system.context.translate(ig.system.getDrawPos(targetX + this.pivot.x), ig.system.getDrawPos(targetY + this.pivot.y));
                    ig.system.context.rotate(this.angle);
                    this.sheet.image.drawTile(-this.pivot.x, -this.pivot.y, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y);
                    ig.system.context.restore();
                }
                if (this.alpha != 1) {
                    ig.system.context.globalAlpha = 1;
                }
            } else {
                if (targetX > ig.system.width || targetY > ig.system.height || targetX + bbsize < 0 || targetY + bbsize < 0) {
                    return;
                }
                if (this.alpha != 1) {
                    ig.system.context.globalAlpha = this.alpha;
                }
                if (this.angle == 0) {
                    this.sheet.image.drawTile(targetX + this.overSizedOffset.x, targetY + this.overSizedOffset.y, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y, ctx);
                } else {
                    ig.system.context.save();
                    ig.system.context.translate(ig.system.getDrawPos(targetX + this.pivot.x), ig.system.getDrawPos(targetY + this.pivot.y));
                    ig.system.context.rotate(this.angle);
                    this.sheet.image.drawTile(-this.pivot.x, -this.pivot.y, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y, ctx);
                    ig.system.context.restore();
                }
                if (this.alpha != 1) {
                    ig.system.context.globalAlpha = 1;
                }
            }
        }
    });
});

// ../private/impact/entity.js 
ig.baked = true;
ig.module('impact.entity').requires('impact.animation', 'impact.impact').defines(function() {
    "use strict";
    ig.Entity = ig.Class.extend({
        id: 0,
        settings: {},
        size: {
            x: 16,
            y: 16
        },
        offset: {
            x: 0,
            y: 0
        },
        pos: {
            x: 0,
            y: 0
        },
        last: {
            x: 0,
            y: 0
        },
        vel: {
            x: 0,
            y: 0
        },
        accel: {
            x: 0,
            y: 0
        },
        friction: {
            x: 0,
            y: 0
        },
        maxVel: {
            x: 100,
            y: 100
        },
        zIndex: 0,
        gravityFactor: 1,
        standing: false,
        bounciness: 0,
        minBounceVelocity: 40,
        anims: {},
        animSheets: {},
        currentAnim: null,
        health: 10,
        visible: true,
        type: 0,
        checkAgainst: 0,
        collides: 0,
        displayParent: null,
        _killed: false,
        slopeStanding: {
            min: (44).toRad(),
            max: (136).toRad()
        },
        init: function(x, y, settings) {
            this.id = ++ig.Entity._lastId;
            this.pos.x = x;
            this.pos.y = y;
            ig.merge(this, settings);
        },
        pause: function() {
            if (this.currentAnim !== null) {
                this.currentAnim.pause();
            }
        },
        resume: function() {
            if (this.currentAnim !== null) {
                this.currentAnim.resume();
            }
        },
        addAnim: function(name, frameTime, sequence, trigger, stop) {
            if (!this.animSheets[name]) {
                throw ('No animSheet with the name ' + name + ' to.');
            }
            var a = new ig.Animation(this.animSheets[name], frameTime, sequence, trigger, stop);
            this.anims[name] = a;
            this.anims[name].setName(name);
            if (!this.currentAnim) {
                this.currentAnim = a;
            }
            return a;
        },
        onRemoved: function() {},
        onAttached: function() {},
        draw: function(ctx) {
            if (this.displayParent) {
                this.offset.x = this.displayParent.pos.x + this.displayParent.offset.x;
                this.offset.y = this.displayParent.pos.y + this.displayParent.offset.y;
            }
            if (!this.visible) {
                return;
            }
            if (this.currentAnim) {
                if (!ctx) {
                    this.currentAnim.draw(this.pos.x + this.offset.x - ig.game._rscreen.x, this.pos.y + this.offset.y - ig.game._rscreen.y, ctx);
                } else {
                    this.currentAnim.draw(this.pos.x - ig.game._rscreen.x, this.pos.y - ig.game._rscreen.y, ctx);
                }
            }
        },
        update: function() {
            this.last.x = this.pos.x;
            this.last.y = this.pos.y;
            if (this.currentAnim) {
                this.currentAnim.update();
            }
        },
        getNewVelocity: function(vel, accel, friction, max) {
            if (accel) {
                return (vel + accel * ig.system.tick).limit(-max, max);
            } else if (friction) {
                var delta = friction * ig.system.tick;
                if (vel - delta > 0) {
                    return vel - delta;
                } else if (vel + delta < 0) {
                    return vel + delta;
                } else {
                    return 0;
                }
            }
            return vel.limit(-max, max);
        },
        handleMovementTrace: function(res) {
            this.standing = false;
            if (res.collision.y) {
                if (this.bounciness > 0 && Math.abs(this.vel.y) > this.minBounceVelocity) {
                    this.vel.y *= -this.bounciness;
                } else {
                    if (this.vel.y > 0) {
                        this.standing = true;
                    }
                    this.vel.y = 0;
                }
            }
            if (res.collision.x) {
                if (this.bounciness > 0 && Math.abs(this.vel.x) > this.minBounceVelocity) {
                    this.vel.x *= -this.bounciness;
                } else {
                    this.vel.x = 0;
                }
            }
            if (res.collision.slope) {
                var s = res.collision.slope;
                if (this.bounciness > 0) {
                    var proj = this.vel.x * s.nx + this.vel.y * s.ny;
                    this.vel.x = (this.vel.x - s.nx * proj * 2) * this.bounciness;
                    this.vel.y = (this.vel.y - s.ny * proj * 2) * this.bounciness;
                } else {
                    var lengthSquared = s.x * s.x + s.y * s.y;
                    var dot = (this.vel.x * s.x + this.vel.y * s.y) / lengthSquared;
                    this.vel.x = s.x * dot;
                    this.vel.y = s.y * dot;
                    var angle = Math.atan2(s.x, s.y);
                    if (angle > this.slopeStanding.min && angle < this.slopeStanding.max) {
                        this.standing = true;
                    }
                }
            }
            this.pos = res.pos;
        },
        kill: function() {
            ig.game.removeEntity(this);
        },
        receiveDamage: function(amount, from) {
            this.health -= amount;
            if (this.health <= 0) {
                this.kill();
            }
        },
        touches: function(other) {
            return !(this.pos.x >= other.pos.x + other.size.x || this.pos.x + this.size.x <= other.pos.x || this.pos.y >= other.pos.y + other.size.y || this.pos.y + this.size.y <= other.pos.y);
        },
        distanceTo: function(other) {
            var xd = (this.pos.x + this.size.x / 2) - (other.pos.x + other.size.x / 2);
            var yd = (this.pos.y + this.size.y / 2) - (other.pos.y + other.size.y / 2);
            return Math.sqrt(xd * xd + yd * yd);
        },
        angleTo: function(other) {
            return Math.atan2((other.pos.y + other.size.y / 2) - (this.pos.y + this.size.y / 2), (other.pos.x + other.size.x / 2) - (this.pos.x + this.size.x / 2));
        },
        check: function(other) {},
        collideWith: function(other, axis) {},
        ready: function() {}
    });
    ig.Entity._lastId = 0;
    ig.Entity.COLLIDES = {
        NEVER: 0,
        LITE: 1,
        PASSIVE: 2,
        ACTIVE: 4,
        FIXED: 8
    };
    ig.Entity.TYPE = {
        NONE: 0,
        A: 1,
        B: 2,
        BOTH: 3
    };
    ig.Entity.checkPair = function(a, b) {
        if (a.checkAgainst & b.type) {
            a.check(b);
        }
        if (b.checkAgainst & a.type) {
            b.check(a);
        }
        if (a.collides && b.collides && a.collides + b.collides > ig.Entity.COLLIDES.ACTIVE) {
            ig.Entity.solveCollision(a, b);
        }
    };
    ig.Entity.solveCollision = function(a, b) {
        var weak = null;
        if (a.collides == ig.Entity.COLLIDES.LITE || b.collides == ig.Entity.COLLIDES.FIXED) {
            weak = a;
        } else if (b.collides == ig.Entity.COLLIDES.LITE || a.collides == ig.Entity.COLLIDES.FIXED) {
            weak = b;
        }
        if (a.last.x + a.size.x > b.last.x && a.last.x < b.last.x + b.size.x) {
            if (a.last.y < b.last.y) {
                ig.Entity.seperateOnYAxis(a, b, weak);
            } else {
                ig.Entity.seperateOnYAxis(b, a, weak);
            }
            a.collideWith(b, 'y');
            b.collideWith(a, 'y');
        } else if (a.last.y + a.size.y > b.last.y && a.last.y < b.last.y + b.size.y) {
            if (a.last.x < b.last.x) {
                ig.Entity.seperateOnXAxis(a, b, weak);
            } else {
                ig.Entity.seperateOnXAxis(b, a, weak);
            }
            a.collideWith(b, 'x');
            b.collideWith(a, 'x');
        }
    };
    ig.Entity.seperateOnXAxis = function(left, right, weak) {
        var nudge = (left.pos.x + left.size.x - right.pos.x);
        if (weak) {
            var strong = left === weak ? right : left;
            weak.vel.x = -weak.vel.x * weak.bounciness + strong.vel.x;
            var resWeak = ig.game.collisionMap.trace(weak.pos.x, weak.pos.y, weak == left ? -nudge : nudge, 0, weak.size.x, weak.size.y);
            weak.pos.x = resWeak.pos.x;
        } else {
            var v2 = (left.vel.x - right.vel.x) / 2;
            left.vel.x = -v2;
            right.vel.x = v2;
            var resLeft = ig.game.collisionMap.trace(left.pos.x, left.pos.y, -nudge / 2, 0, left.size.x, left.size.y);
            left.pos.x = Math.floor(resLeft.pos.x);
            var resRight = ig.game.collisionMap.trace(right.pos.x, right.pos.y, nudge / 2, 0, right.size.x, right.size.y);
            right.pos.x = Math.ceil(resRight.pos.x);
        }
    };
    ig.Entity.seperateOnYAxis = function(top, bottom, weak) {
        var nudge = (top.pos.y + top.size.y - bottom.pos.y);
        if (weak) {
            var strong = top === weak ? bottom : top;
            weak.vel.y = -weak.vel.y * weak.bounciness + strong.vel.y;
            var nudgeX = 0;
            if (weak == top && Math.abs(weak.vel.y - strong.vel.y) < weak.minBounceVelocity) {
                weak.standing = true;
                nudgeX = strong.vel.x * ig.system.tick;
            }
            var resWeak = ig.game.collisionMap.trace(weak.pos.x, weak.pos.y, nudgeX, weak == top ? -nudge : nudge, weak.size.x, weak.size.y);
            weak.pos.y = resWeak.pos.y;
            weak.pos.x = resWeak.pos.x;
        } else if (ig.game.gravity && (bottom.standing || top.vel.y > 0)) {
            var resTop = ig.game.collisionMap.trace(top.pos.x, top.pos.y, 0, -(top.pos.y + top.size.y - bottom.pos.y), top.size.x, top.size.y);
            top.pos.y = resTop.pos.y;
            if (top.bounciness > 0 && top.vel.y > top.minBounceVelocity) {
                top.vel.y *= -top.bounciness;
            } else {
                top.standing = true;
                top.vel.y = 0;
            }
        } else {
            var v2 = (top.vel.y - bottom.vel.y) / 2;
            top.vel.y = -v2;
            bottom.vel.y = v2;
            var nudgeX = bottom.vel.x * ig.system.tick;
            var resTop = ig.game.collisionMap.trace(top.pos.x, top.pos.y, nudgeX, -nudge / 2, top.size.x, top.size.y);
            top.pos.y = resTop.pos.y;
            var resBottom = ig.game.collisionMap.trace(bottom.pos.x, bottom.pos.y, 0, nudge / 2, bottom.size.x, bottom.size.y);
            bottom.pos.y = resBottom.pos.y;
        }
    };
});

// ../private/impact/map.js 
ig.baked = true;
ig.module('impact.map').defines(function() {
    "use strict";
    ig.Map = ig.Class.extend({
        tilesize: 8,
        width: 1,
        height: 1,
        data: [
            []
        ],
        name: null,
        init: function(tilesize, data) {
            this.tilesize = tilesize;
            this.data = data;
            this.height = data.length;
            this.width = data[0].length;
        },
        getTile: function(x, y) {
            var tx = Math.floor(x / this.tilesize);
            var ty = Math.floor(y / this.tilesize);
            if ((tx >= 0 && tx < this.width) && (ty >= 0 && ty < this.height)) {
                return this.data[ty][tx];
            } else {
                return 0;
            }
        },
        setTile: function(x, y, tile) {
            var tx = Math.floor(x / this.tilesize);
            var ty = Math.floor(y / this.tilesize);
            if ((tx >= 0 && tx < this.width) && (ty >= 0 && ty < this.height)) {
                this.data[ty][tx] = tile;
            }
        }
    });
});

// ../private/impact/collision-map.js 
ig.baked = true;
ig.module('impact.collision-map').requires('impact.map').defines(function() {
    "use strict";
    ig.CollisionMap = ig.Map.extend({
        lastSlope: 1,
        tiledef: null,
        init: function(tilesize, data, tiledef) {
            this.parent(tilesize, data);
            this.tiledef = tiledef || ig.CollisionMap.defaultTileDef;
            for (var t in this.tiledef) {
                if (t | 0 > this.lastSlope) {
                    this.lastSlope = t | 0;
                }
            }
        },
        trace: function(x, y, vx, vy, objectWidth, objectHeight) {
            var res = {
                collision: {
                    x: false,
                    y: false,
                    slope: false
                },
                pos: {
                    x: x,
                    y: y
                },
                tile: {
                    x: 0,
                    y: 0
                }
            };
            var steps = Math.ceil(Math.max(Math.abs(vx), Math.abs(vy)) / this.tilesize);
            if (steps > 1) {
                var sx = vx / steps;
                var sy = vy / steps;
                for (var i = 0; i < steps && (sx || sy); i++) {
                    this._traceStep(res, x, y, sx, sy, objectWidth, objectHeight, vx, vy, i);
                    x = res.pos.x;
                    y = res.pos.y;
                    if (res.collision.x) {
                        sx = 0;
                        vx = 0;
                    }
                    if (res.collision.y) {
                        sy = 0;
                        vy = 0;
                    }
                    if (res.collision.slope) {
                        break;
                    }
                }
            } else {
                this._traceStep(res, x, y, vx, vy, objectWidth, objectHeight, vx, vy, 0);
            }
            return res;
        },
        _traceStep: function(res, x, y, vx, vy, width, height, rvx, rvy, step) {
            res.pos.x += vx;
            res.pos.y += vy;
            var t = 0;
            if (vx) {
                var pxOffsetX = (vx > 0 ? width : 0);
                var tileOffsetX = (vx < 0 ? this.tilesize : 0);
                var firstTileY = Math.max(Math.floor(y / this.tilesize), 0);
                var lastTileY = Math.min(Math.ceil((y + height) / this.tilesize), this.height);
                var tileX = Math.floor((res.pos.x + pxOffsetX) / this.tilesize);
                var prevTileX = Math.floor((x + pxOffsetX) / this.tilesize);
                if (step > 0 || tileX == prevTileX || prevTileX < 0 || prevTileX >= this.width) {
                    prevTileX = -1;
                }
                if (tileX >= 0 && tileX < this.width) {
                    for (var tileY = firstTileY; tileY < lastTileY; tileY++) {
                        if (prevTileX != -1) {
                            t = this.data[tileY][prevTileX];
                            if (t > 1 && t <= this.lastSlope && this._checkTileDef(res, t, x, y, rvx, rvy, width, height, prevTileX, tileY)) {
                                break;
                            }
                        }
                        t = this.data[tileY][tileX];
                        if (t == 1 || t > this.lastSlope || (t > 1 && this._checkTileDef(res, t, x, y, rvx, rvy, width, height, tileX, tileY))) {
                            if (t > 1 && t <= this.lastSlope && res.collision.slope) {
                                break;
                            }
                            res.collision.x = true;
                            res.tile.x = t;
                            x = res.pos.x = tileX * this.tilesize - pxOffsetX + tileOffsetX;
                            rvx = 0;
                            break;
                        }
                    }
                }
            }
            if (vy) {
                var pxOffsetY = (vy > 0 ? height : 0);
                var tileOffsetY = (vy < 0 ? this.tilesize : 0);
                var firstTileX = Math.max(Math.floor(res.pos.x / this.tilesize), 0);
                var lastTileX = Math.min(Math.ceil((res.pos.x + width) / this.tilesize), this.width);
                var tileY = Math.floor((res.pos.y + pxOffsetY) / this.tilesize);
                var prevTileY = Math.floor((y + pxOffsetY) / this.tilesize);
                if (step > 0 || tileY == prevTileY || prevTileY < 0 || prevTileY >= this.height) {
                    prevTileY = -1;
                }
                if (tileY >= 0 && tileY < this.height) {
                    for (var tileX = firstTileX; tileX < lastTileX; tileX++) {
                        if (prevTileY != -1) {
                            t = this.data[prevTileY][tileX];
                            if (t > 1 && t <= this.lastSlope && this._checkTileDef(res, t, x, y, rvx, rvy, width, height, tileX, prevTileY)) {
                                break;
                            }
                        }
                        t = this.data[tileY][tileX];
                        if (t == 1 || t > this.lastSlope || (t > 1 && this._checkTileDef(res, t, x, y, rvx, rvy, width, height, tileX, tileY))) {
                            if (t > 1 && t <= this.lastSlope && res.collision.slope) {
                                break;
                            }
                            res.collision.y = true;
                            res.tile.y = t;
                            res.pos.y = tileY * this.tilesize - pxOffsetY + tileOffsetY;
                            break;
                        }
                    }
                }
            }
        },
        _checkTileDef: function(res, t, x, y, vx, vy, width, height, tileX, tileY) {
            var def = this.tiledef[t];
            if (!def) {
                return false;
            }
            var lx = (tileX + def[0]) * this.tilesize,
                ly = (tileY + def[1]) * this.tilesize,
                lvx = (def[2] - def[0]) * this.tilesize,
                lvy = (def[3] - def[1]) * this.tilesize,
                solid = def[4];
            var tx = x + vx + (lvy < 0 ? width : 0) - lx,
                ty = y + vy + (lvx > 0 ? height : 0) - ly;
            if (lvx * ty - lvy * tx > 0) {
                if (vx * -lvy + vy * lvx < 0) {
                    return solid;
                }
                var length = Math.sqrt(lvx * lvx + lvy * lvy);
                var nx = lvy / length,
                    ny = -lvx / length;
                var proj = tx * nx + ty * ny;
                var px = nx * proj,
                    py = ny * proj;
                if (px * px + py * py >= vx * vx + vy * vy) {
                    return solid || (lvx * (ty - vy) - lvy * (tx - vx) < 0.5);
                }
                res.pos.x = x + vx - px;
                res.pos.y = y + vy - py;
                res.collision.slope = {
                    x: lvx,
                    y: lvy,
                    nx: nx,
                    ny: ny
                };
                return true;
            }
            return false;
        }
    });
    var H = 1 / 2,
        N = 1 / 3,
        M = 2 / 3,
        SOLID = true,
        NON_SOLID = false;
    ig.CollisionMap.defaultTileDef = {
        5: [0, 1, 1, M, SOLID],
        6: [0, M, 1, N, SOLID],
        7: [0, N, 1, 0, SOLID],
        3: [0, 1, 1, H, SOLID],
        4: [0, H, 1, 0, SOLID],
        2: [0, 1, 1, 0, SOLID],
        10: [H, 1, 1, 0, SOLID],
        21: [0, 1, H, 0, SOLID],
        32: [M, 1, 1, 0, SOLID],
        43: [N, 1, M, 0, SOLID],
        54: [0, 1, N, 0, SOLID],
        27: [0, 0, 1, N, SOLID],
        28: [0, N, 1, M, SOLID],
        29: [0, M, 1, 1, SOLID],
        25: [0, 0, 1, H, SOLID],
        26: [0, H, 1, 1, SOLID],
        24: [0, 0, 1, 1, SOLID],
        11: [0, 0, H, 1, SOLID],
        22: [H, 0, 1, 1, SOLID],
        33: [0, 0, N, 1, SOLID],
        44: [N, 0, M, 1, SOLID],
        55: [M, 0, 1, 1, SOLID],
        16: [1, N, 0, 0, SOLID],
        17: [1, M, 0, N, SOLID],
        18: [1, 1, 0, M, SOLID],
        14: [1, H, 0, 0, SOLID],
        15: [1, 1, 0, H, SOLID],
        13: [1, 1, 0, 0, SOLID],
        8: [H, 1, 0, 0, SOLID],
        19: [1, 1, H, 0, SOLID],
        30: [N, 1, 0, 0, SOLID],
        41: [M, 1, N, 0, SOLID],
        52: [1, 1, M, 0, SOLID],
        38: [1, M, 0, 1, SOLID],
        39: [1, N, 0, M, SOLID],
        40: [1, 0, 0, N, SOLID],
        36: [1, H, 0, 1, SOLID],
        37: [1, 0, 0, H, SOLID],
        35: [1, 0, 0, 1, SOLID],
        9: [1, 0, H, 1, SOLID],
        20: [H, 0, 0, 1, SOLID],
        31: [1, 0, M, 1, SOLID],
        42: [M, 0, N, 1, SOLID],
        53: [N, 0, 0, 1, SOLID],
        12: [0, 0, 1, 0, NON_SOLID],
        23: [1, 1, 0, 1, NON_SOLID],
        34: [1, 0, 1, 1, NON_SOLID],
        45: [0, 1, 0, 0, NON_SOLID]
    };
    ig.CollisionMap.staticNoCollision = {
        trace: function(x, y, vx, vy) {
            return {
                collision: {
                    x: false,
                    y: false,
                    slope: false
                },
                pos: {
                    x: x + vx,
                    y: y + vy
                },
                tile: {
                    x: 0,
                    y: 0
                }
            };
        }
    };
});

// ../private/impact/background-map.js 
ig.baked = true;
ig.module('impact.background-map').requires('impact.map', 'impact.image').defines(function() {
    "use strict";
    ig.BackgroundMap = ig.Map.extend({
        tiles: null,
        scroll: {
            x: 0,
            y: 0
        },
        distance: 1,
        repeat: false,
        tilesetName: '',
        foreground: false,
        enabled: true,
        preRender: false,
        preRenderedChunks: null,
        chunkSize: 512,
        debugChunks: false,
        anims: {},
        init: function(tilesize, data, tileset) {
            this.parent(tilesize, data);
            this.setTileset(tileset);
        },
        setTileset: function(tileset) {
            this.tilesetName = tileset instanceof ig.Image ? tileset.path : tileset;
            this.tiles = new ig.Image(this.tilesetName);
            this.preRenderedChunks = null;
        },
        setScreenPos: function(x, y) {
            this.scroll.x = x / this.distance;
            this.scroll.y = y / this.distance;
        },
        preRenderMapToChunks: function() {
            var totalWidth = this.width * this.tilesize * ig.system.scale,
                totalHeight = this.height * this.tilesize * ig.system.scale;
            var chunkCols = Math.ceil(totalWidth / this.chunkSize),
                chunkRows = Math.ceil(totalHeight / this.chunkSize);
            this.preRenderedChunks = [];
            for (var y = 0; y < chunkRows; y++) {
                this.preRenderedChunks[y] = [];
                for (var x = 0; x < chunkCols; x++) {
                    var chunkWidth = (x == chunkCols - 1) ? totalWidth - x * this.chunkSize : this.chunkSize;
                    var chunkHeight = (y == chunkRows - 1) ? totalHeight - y * this.chunkSize : this.chunkSize;
                    this.preRenderedChunks[y][x] = this.preRenderChunk(x, y, chunkWidth, chunkHeight);
                }
            }
        },
        preRenderChunk: function(cx, cy, w, h) {
            var tw = w / this.tilesize / ig.system.scale + 1,
                th = h / this.tilesize / ig.system.scale + 1;
            var nx = (cx * this.chunkSize / ig.system.scale) % this.tilesize,
                ny = (cy * this.chunkSize / ig.system.scale) % this.tilesize;
            var tx = Math.floor(cx * this.chunkSize / this.tilesize / ig.system.scale),
                ty = Math.floor(cy * this.chunkSize / this.tilesize / ig.system.scale);
            var chunk = ig.$new('canvas');
            chunk.width = w;
            chunk.height = h;
            var oldContext = ig.system.context;
            ig.system.context = chunk.getContext("2d");
            for (var x = 0; x < tw; x++) {
                for (var y = 0; y < th; y++) {
                    if (x + tx < this.width && y + ty < this.height) {
                        var tile = this.data[y + ty][x + tx];
                        if (tile) {
                            this.tiles.drawTile(x * this.tilesize - nx, y * this.tilesize - ny, tile - 1, this.tilesize);
                        }
                    }
                }
            }
            ig.system.context = oldContext;
            return chunk;
        },
        draw: function() {
            if (!this.tiles.loaded || !this.enabled) {
                return;
            }
            if (this.preRender) {
                this.drawPreRendered();
            } else {
                this.drawTiled();
            }
        },
        drawPreRendered: function() {
            if (!this.preRenderedChunks) {
                this.preRenderMapToChunks();
            }
            var dx = ig.system.getDrawPos(this.scroll.x),
                dy = ig.system.getDrawPos(this.scroll.y);
            if (this.repeat) {
                var w = this.width * this.tilesize * ig.system.scale;
                dx = (dx % w + w) % w;
                var h = this.height * this.tilesize * ig.system.scale;
                dy = (dy % h + h) % h;
            }
            var minChunkX = Math.max(Math.floor(dx / this.chunkSize), 0),
                minChunkY = Math.max(Math.floor(dy / this.chunkSize), 0),
                maxChunkX = Math.ceil((dx + ig.system.realWidth) / this.chunkSize),
                maxChunkY = Math.ceil((dy + ig.system.realHeight) / this.chunkSize),
                maxRealChunkX = this.preRenderedChunks[0].length,
                maxRealChunkY = this.preRenderedChunks.length;
            if (!this.repeat) {
                maxChunkX = Math.min(maxChunkX, maxRealChunkX);
                maxChunkY = Math.min(maxChunkY, maxRealChunkY);
            }
            var nudgeY = 0;
            for (var cy = minChunkY; cy < maxChunkY; cy++) {
                var nudgeX = 0;
                for (var cx = minChunkX; cx < maxChunkX; cx++) {
                    var chunk = this.preRenderedChunks[cy % maxRealChunkY][cx % maxRealChunkX];
                    var x = -dx + cx * this.chunkSize - nudgeX;
                    var y = -dy + cy * this.chunkSize - nudgeY;
                    ig.system.context.drawImage(chunk, x, y);
                    ig.Image.drawCount++;
                    if (this.debugChunks) {
                        ig.system.context.strokeStyle = '#f0f';
                        ig.system.context.strokeRect(x, y, this.chunkSize, this.chunkSize);
                    }
                    if (this.repeat && chunk.width < this.chunkSize && x + chunk.width < ig.system.realWidth) {
                        nudgeX = this.chunkSize - chunk.width;
                        maxChunkX++;
                    }
                }
                if (this.repeat && chunk.height < this.chunkSize && y + chunk.height < ig.system.realHeight) {
                    nudgeY = this.chunkSize - chunk.height;
                    maxChunkY++;
                }
            }
        },
        drawTiled: function() {
            var tile = 0,
                anim = null,
                tileOffsetX = (this.scroll.x / this.tilesize).toInt(),
                tileOffsetY = (this.scroll.y / this.tilesize).toInt(),
                pxOffsetX = this.scroll.x % this.tilesize,
                pxOffsetY = this.scroll.y % this.tilesize,
                pxMinX = -pxOffsetX - this.tilesize,
                pxMinY = -pxOffsetY - this.tilesize,
                pxMaxX = ig.system.width + this.tilesize - pxOffsetX,
                pxMaxY = ig.system.height + this.tilesize - pxOffsetY;
            for (var mapY = -1, pxY = pxMinY; pxY < pxMaxY; mapY++, pxY += this.tilesize) {
                var tileY = mapY + tileOffsetY;
                if (tileY >= this.height || tileY < 0) {
                    if (!this.repeat) {
                        continue;
                    }
                    tileY = (tileY % this.height + this.height) % this.height;
                }
                for (var mapX = -1, pxX = pxMinX; pxX < pxMaxX; mapX++, pxX += this.tilesize) {
                    var tileX = mapX + tileOffsetX;
                    if (tileX >= this.width || tileX < 0) {
                        if (!this.repeat) {
                            continue;
                        }
                        tileX = (tileX % this.width + this.width) % this.width;
                    }
                    if ((tile = this.data[tileY][tileX])) {
                        if ((anim = this.anims[tile - 1])) {
                            anim.draw(pxX, pxY);
                        } else {
                            this.tiles.drawTile(pxX, pxY, tile - 1, this.tilesize);
                        }
                    }
                }
            }
        }
    });
});

// ../private/impact/game.js 
ig.baked = true;
ig.module('impact.game').requires('impact.impact', 'impact.entity', 'impact.collision-map', 'impact.background-map').defines(function() {
    "use strict";
    ig.Game = ig.Class.extend({
        clearColor: '#000000',
        gravity: 0,
        screen: {
            x: 0,
            y: 0
        },
        _rscreen: {
            x: 0,
            y: 0
        },
        entities: [],
        namedEntities: {},
        collisionMap: ig.CollisionMap.staticNoCollision,
        backgroundMaps: [],
        backgroundAnims: {},
        autoSort: false,
        sortBy: null,
        cellSize: 64,
        _deferredKill: [],
        _levelToLoad: null,
        _doSortEntities: false,
        fpsFilterStrength: 10,
        frameTime: 0,
        lastLoop: null,
        thisLoop: 0,
        staticInstantiate: function() {
            this.sortBy = this.sortBy || ig.Game.SORT.Z_INDEX;
            ig.game = this;
            return null;
        },
        loadLevel: function(data) {
            this.screen = {
                x: 0,
                y: 0
            };
            this.entities = [];
            this.namedEntities = {};
            for (var i = 0; i < data.entities.length; i++) {
                var ent = data.entities[i];
                this.spawnEntity(ent.type, ent.x, ent.y, ent.settings);
            }
            this.sortEntities();
            this.collisionMap = ig.CollisionMap.staticNoCollision;
            this.backgroundMaps = [];
            for (var i = 0; i < data.layer.length; i++) {
                var ld = data.layer[i];
                if (ld.name == 'collision') {
                    this.collisionMap = new ig.CollisionMap(ld.tilesize, ld.data);
                } else {
                    var newMap = new ig.BackgroundMap(ld.tilesize, ld.data, ld.tilesetName);
                    newMap.anims = this.backgroundAnims[ld.tilesetName] || {};
                    newMap.repeat = ld.repeat;
                    newMap.distance = ld.distance;
                    newMap.foreground = !!ld.foreground;
                    newMap.preRender = !!ld.preRender;
                    newMap.name = ld.name;
                    this.backgroundMaps.push(newMap);
                }
            }
            for (var i = 0; i < this.entities.length; i++) {
                this.entities[i].ready();
            }
        },
        loadLevelDeferred: function(data) {
            this._levelToLoad = data;
        },
        getMapByName: function(name) {
            if (name == 'collision') {
                return this.collisionMap;
            }
            for (var i = 0; i < this.backgroundMaps.length; i++) {
                if (this.backgroundMaps[i].name == name) {
                    return this.backgroundMaps[i];
                }
            }
            return null;
        },
        getEntityByName: function(name) {
            return this.namedEntities[name];
        },
        getEntitiesByType: function(type) {
            var entityClass = typeof(type) === 'string' ? ig.global[type] : type;
            var a = [];
            for (var i = 0; i < this.entities.length; i++) {
                var ent = this.entities[i];
                if (ent instanceof entityClass && !ent._killed) {
                    a.push(ent);
                }
            }
            return a;
        },
        spawnEntity: function(type, x, y, settings) {
            var entityClass = typeof(type) === 'string' ? ig.global[type] : type;
            if (!entityClass) {
                throw ("Can't spawn entity of type " + type);
            }
            var ent = new(entityClass)(x, y, settings || {});
            this.entities.push(ent);
            if (ent.name) {
                this.namedEntities[ent.name] = ent;
            }
            return ent;
        },
        sortEntities: function() {
            this.entities.sort(this.sortBy);
        },
        sortEntitiesDeferred: function() {
            this._doSortEntities = true;
        },
        removeEntity: function(ent) {
            if (ent.name) {
                delete this.namedEntities[ent.name];
            }
            ent._killed = true;
            ent.type = ig.Entity.TYPE.NONE;
            ent.checkAgainst = ig.Entity.TYPE.NONE;
            ent.collides = ig.Entity.COLLIDES.NEVER;
            this._deferredKill.push(ent);
        },
        run: function() {
            this.update();
            this.draw();
        },
        update: function() {
            if (!this.lastLoop) {
                this.lastLoop = new Date;
            }
            if (this._levelToLoad) {
                this.loadLevel(this._levelToLoad);
                this._levelToLoad = null;
            }
            if (this._doSortEntities || this.autoSort) {
                this.sortEntities();
                this._doSortEntities = false;
            }
            this.updateEntities();
            this.checkEntities();
            for (var i = 0; i < this._deferredKill.length; i++) {
                this.entities.erase(this._deferredKill[i]);
            }
            this._deferredKill = [];
            for (var tileset in this.backgroundAnims) {
                var anims = this.backgroundAnims[tileset];
                for (var a in anims) {
                    anims[a].update();
                }
            }
            var thisFrameTime = (this.thisLoop = new Date) - this.lastLoop;
            this.frameTime += (thisFrameTime - this.frameTime) / this.fpsFilterStrength;
            this.lastLoop = this.thisLoop;
            ig.system.currentFPS = parseInt((1000 / this.frameTime).toFixed(1));
        },
        updateEntities: function() {
            for (var i = 0; i < this.entities.length; i++) {
                var ent = this.entities[i];
                if (!ent._killed) {
                    ent.update();
                }
            }
        },
        draw: function() {
            if (this.clearColor) {
                ig.system.clear(this.clearColor);
            }
            this._rscreen.x = ig.system.getDrawPos(this.screen.x) / ig.system.scale;
            this._rscreen.y = ig.system.getDrawPos(this.screen.y) / ig.system.scale;
            var mapIndex;
            for (mapIndex = 0; mapIndex < this.backgroundMaps.length; mapIndex++) {
                var map = this.backgroundMaps[mapIndex];
                if (map.foreground) {
                    break;
                }
                map.setScreenPos(this.screen.x, this.screen.y);
                map.draw();
            }
            this.drawEntities();
            for (mapIndex; mapIndex < this.backgroundMaps.length; mapIndex++) {
                var map = this.backgroundMaps[mapIndex];
                map.setScreenPos(this.screen.x, this.screen.y);
                map.draw();
            }
        },
        drawEntities: function() {
            for (var i = 0; i < this.entities.length; i++) {
                this.entities[i].draw();
            }
        },
        checkEntities: function() {
            var hash = {};
            for (var e = 0; e < this.entities.length; e++) {
                var entity = this.entities[e];
                if (entity.type == ig.Entity.TYPE.NONE && entity.checkAgainst == ig.Entity.TYPE.NONE && entity.collides == ig.Entity.COLLIDES.NEVER) {
                    continue;
                }
                var checked = {},
                    xmin = Math.floor(entity.pos.x / this.cellSize),
                    ymin = Math.floor(entity.pos.y / this.cellSize),
                    xmax = Math.floor((entity.pos.x + entity.size.x) / this.cellSize) + 1,
                    ymax = Math.floor((entity.pos.y + entity.size.y) / this.cellSize) + 1;
                for (var x = xmin; x < xmax; x++) {
                    for (var y = ymin; y < ymax; y++) {
                        if (!hash[x]) {
                            hash[x] = {};
                            hash[x][y] = [entity];
                        } else if (!hash[x][y]) {
                            hash[x][y] = [entity];
                        } else {
                            var cell = hash[x][y];
                            for (var c = 0; c < cell.length; c++) {
                                if (entity.touches(cell[c]) && !checked[cell[c].id]) {
                                    checked[cell[c].id] = true;
                                    ig.Entity.checkPair(entity, cell[c]);
                                }
                            }
                            cell.push(entity);
                        }
                    }
                }
            }
        }
    });
    ig.Game.SORT = {
        Z_INDEX: function(a, b) {
            return a.zIndex - b.zIndex;
        },
        POS_X: function(a, b) {
            return (a.pos.x + a.size.x) - (b.pos.x + b.size.x);
        },
        POS_Y: function(a, b) {
            return (a.pos.y + a.size.y) - (b.pos.y + b.size.y);
        }
    };
});


// ../private/de/adp/web/base/baseValues.js 
ig.baked = true;
ig.module("de.adp.web.base.baseValues").requires("impact.impact").defines(function() {
    BaseValues = ig.Class.extend({});
    BaseValues.DesktopButtonWidth = 111;
    BaseValues.DesktopButtonFontSize = 111;
    BaseValues.DesktopButtonHeight = 111;
    BaseValues.GameMenuButtonHeight = 43;
    BaseValues.GameMenuButtonWidth = 43;
    BaseValues.DesktopScaleFactor = 0;
    BaseValues.DesktopButtonWidthScaled = 0;
    BaseValues.DesktopButtonHeightScaled = 0;
    BaseValues.HeaderHeight = 55;
});

// ../private/de/adp/web/base/htmlConfig.js 
ig.baked = true;
ig.module('de.adp.web.base.htmlConfig').requires('impact.impact', "de.adp.web.base.baseValues").defines(function() {
    HTMLConfig = ig.Class.extend({
        footerRatio: 0,
        documentScroll: null,
        footerGFXWidth: 2048,
        footerGFXHeight: 148,
        footerScale: 0,
        depotWidth: 630,
        stakeWinWidth: 500,
        winWidth: 670,
        borderStrength: 36,
        casino: null,
        init: function(casino) {
            this.casino = casino;
            this.footerGFXHeight = 143;
            this.footerGFXWidth = 1920;
            this.footerRatio = (ig.system.stageWidth / this.footerGFXWidth);
            this.footerScale = this.footerGFXHeight * this.footerRatio;
            this.adjustFooterSizeToScreen();
            this.adjustHeaderMenuesHeightToScreen();
            this.adjustFooterItemsToScreen();
        },
        adjustHeaderMenuesHeightToScreen: function() {
            var availableHeight = ((ig.system.stageHeight) - (this.footerScale + 2 * (ig.system.stageHeight * 0.02)));
            $("#paytable").css("height", availableHeight);
            $("#help").css("height", availableHeight);
            var headerHeight = BaseValues.HeaderHeight;
            var headerScaled = headerHeight * this.footerRatio;
            $('#header').css('height', headerScaled);
            $('#volumeSlider').css('top', '10%');
            $('#volumeWrapper').css('top', $("#header").outerHeight());
            $('.desktopGameMenu-button-round').css('width', Math.floor((headerScaled * 0.9)) + "px");
            $('.desktopGameMenu-button-round').css('height', Math.floor((headerScaled * 0.9)) + "px");
            $('#paytableButton').css('font-size', Math.floor((headerScaled * 0.35)) + 'px');
            $('.clock-area').css('font-size', Math.floor((headerScaled * 0.35) / 2) + 'px');
            if (ig.ua.mobile) {
                this.adjustMobileSideMenu(headerScaled);
            }
        },
        adjustMobileSideMenu: function(headerScaled) {
            var buttonWidth = Math.floor(headerScaled * 1.2);
            $('.desktopGameMenu-button-round').css('width', buttonWidth + "px");
            $('.desktopGameMenu-button-round').css('height', buttonWidth + "px");
            $('#close-game-btn').css('margin-top', buttonWidth / 2);
            var borderWidth = 2;
            var margin = 1;
            var offSetToHide = -(buttonWidth + 2 * borderWidth + margin);
            var barsHeight = headerScaled + this.footerScale;
            var topOffsetToCentre = ((ig.system.stageHeight - barsHeight) / 2) + headerScaled;
            var menuButtonsOffset = (topOffsetToCentre - ($("#mobile-menu-container").height() / 2));
            $("#mobile-menu-container").css({
                left: offSetToHide
            });
            $("#mobile-menu-buttons").css({
                top: menuButtonsOffset
            });
            $("#mobileMenuExpander").css({
                top: topOffsetToCentre - (buttonWidth / 2)
            });
        },
        adjustFooterSizeToScreen: function() {
            $("#depotDisplay").css("height", this.footerScale);
            var topOffset = ig.system.stageHeight - $("#depotDisplay").outerHeight();
            ig.logger.log(Logger.LogLevel.INFO, "############## Footer Top Offset:" + topOffset);
            $("#depotDisplay").css("top", topOffset + "px");
            this.scaleDesktopButtons();
        },
        adjustFooterItemsToScreen: function() {
            $("#depot").css("width", (this.depotWidth * this.footerRatio) + "px");
            $("#limit").css("width", (this.depotWidth * this.footerRatio) + "px");
            $("#betContainer").css("width", (this.stakeWinWidth * this.footerRatio) + "px");
            var widthLeft = this.winWidth;
            $("#winnings").css("width", (widthLeft * this.footerRatio) + "px");
            var maxFontHeight = ((this.footerGFXHeight - 100) * this.footerRatio);
            var messageFontHeight = maxFontHeight * 0.6;
            var betMargin = Math.ceil(((this.footerScale / 2)) * 0.5);
            var messageMargin;
            $("#message-area").css("top", "50%");
            $("#depot").css("font-size", maxFontHeight + "px");
            $("#depot").css("margin-left", (72 * this.footerRatio) + "px");
            $("#depot").css("margin-top", betMargin + "px");
            $("#limit").css("font-size", maxFontHeight + "px");
            $("#limit").css("margin-left", (72 * this.footerRatio) + "px");
            $("#limit").css("margin-top", betMargin + "px");
            $("#message-area").css("font-size", messageFontHeight + "px");
            $(".clock").css("font-size", messageFontHeight + "px");
            var clockPos = $("#depotDisplay").offset().top + (this.footerScale * 0.7);
            $(".clock").css("margin-top", clockPos + "px");
            $("#main").css("padding-bottom", 0);
            $("#winnings").css("font-size", maxFontHeight + "px");
            $("#winnings").css("margin-top", betMargin + "px");
            if (ig.ua.iPhone) {
                $('.betting-controls').css('width', 'auto');
                $('.betting-controls').css('margin-top', -1 * $('.betting-controls').height() * 0.75 + 'px');
                $('.button-bar').css('width', 'auto');
                $('.button-bar').css('float', 'right');
                $('.button-bar').css('clear', 'none');
                $('.button-bar').css('margin-top', -1 * $('.betting-controls').height() * 0.75 + 'px');
                $('.info-panel').css('margin-left', (($('#depotDisplay').width() - $('.info-panel').width()) / 2) - $('.betting-controls').width() + 'px');
            }
        },
        scaleDesktopButtons: function() {
            var scale = (this.footerScale / BaseValues.DesktopButtonHeight) * 0.8;
            var width = BaseValues.DesktopButtonWidth;
            var height = BaseValues.DesktopButtonHeight;
            BaseValues.DesktopButtonHeightScaled = Math.floor(height * scale);
            BaseValues.DesktopButtonWidthScaled = Math.floor(width * scale);
            BaseValues.DesktopScaleFactor = scale;
            $('#lineSelectorContainer').css('width', BaseValues.DesktopButtonWidthScaled + "px");
            $('#lineSelectorContainer').css('height', BaseValues.DesktopButtonHeightScaled + "px");
            $('#coinSelectorContainer').css('width', BaseValues.DesktopButtonWidthScaled + "px");
            $('#coinSelectorContainer').css('height', BaseValues.DesktopButtonHeightScaled + "px");
            $('#autoSpinSelectorContainer').css('width', BaseValues.DesktopButtonWidthScaled + "px");
            $('#autoSpinSelectorContainer').css('height', BaseValues.DesktopButtonHeightScaled + "px");
            $('#controlSwitchContainer').css('width', BaseValues.DesktopButtonWidthScaled + "px");
            $('#controlSwitchContainer').css('height', BaseValues.DesktopButtonHeightScaled + "px");
            $('#maxBetContainer').css('width', BaseValues.DesktopButtonWidthScaled + "px");
            $('#maxBetContainer').css('height', BaseValues.DesktopButtonHeightScaled + "px");
            $('body').css('font-size', Math.floor(10 * scale) + "px");
            BaseValues.DesktopButtonFontSize = 3 * 10 * scale;
            this.casino.buttonProvider.updateButtonsAfterResize(scale, width, height);
            this.casino.displayProvider.rearrangeDepotAndBettingDisplay();
        }
    });
});

// ../private/de/adp/web/gameRoot.js 
ig.baked = true;
ig.module('de.adp.web.gameRoot').requires('impact.game', 'de.adp.web.base.htmlConfig', 'de.adp.web.utils.inactivityTimer').defines(function() {
    GameRoot = ig.Game.extend({
        facade: null,
        casino: null,
        scanGameResult: false,
        footerRatio: 0,
        htmlConfig: null,
        bettingEnabled: false,
        controlLeftBtn: null,
        controlRightBtn: null,
        soundToggleBtn: null,
        settingsButtons: [],
        autoSpinSelector: "",
        controlSwitchButton: {},
        init: function(facadeClass, casino) {
            this.casino = casino;
            this.checkAspectRatio();
            this.bindFunctionsToClass();
            this.createSettingsMenue();
            this.facade = new(facadeClass)(this.casino, this);
            this.facade.onGameSizeChanged();
            this.clearColor = '#000';
            this.addListener();
            var depotValue = this.casino.depotProvider.getDepotBalanceForDisplay();
            var limitValue = this.casino.depotProvider.getLimitedDepotBalance();
            if (limitValue !== depotValue) {
                this.onDepotTouched();
            } else {
                this.onLimitTouched();
            }
            var gameMode = "";
            if (this.casino.resourceProvider.getString("currency_sign") === "") {
                gameMode = "*** FUN GAME ***";
            }
            $('body').on('click touchstart', this.keepAlive);
            this.casino.displayProvider.showMessage(gameMode);
            this.facade.showRTP();
            if (this.casino.isResponsibleGamingActive()) {
                this.constructResponsibleGamingIcon();
            }
            this.facade.coinStepper.setCaptionForMainButton();
        },
        constructResponsibleGamingIcon: function() {
            var url = this.casino.getResponsibleGamingIconURL();
            var icon = $('<img src="' + url + '" class="message-area-icon">');
            icon.on(ig.touchEvents, this.casino.openResponsibleGamingLink);
            this.casino.displayProvider.addToMessageArea(icon);
        },
        bindFunctionsToClass: function() {
            this.closeGame = this.closeGame.bind(this);
            this.soundPopUpClickActivate = this.soundPopUpClickActivate.bind(this);
            this.soundPopUpClickDeactivate = this.soundPopUpClickDeactivate.bind(this);
            this.toggleControlSide = this.toggleControlSide.bind(this);
            this.toggleTurboSpin = this.toggleTurboSpin.bind(this);
            this.controlsLeft = this.controlsLeft.bind(this);
            this.controlsRight = this.controlsRight.bind(this);
            this.activateTurboSpin = this.activateTurboSpin.bind(this);
            this.deactivateTurboSpin = this.deactivateTurboSpin.bind(this);
            this.disableSettings = this.disableSettings.bind(this);
            this.enableSettings = this.enableSettings.bind(this);
            this.onAutospinsChanged = this.onAutospinsChanged.bind(this);
            this.keepAlive = this.keepAlive.bind(this);
            this.hideOpenSelectors = this.hideOpenSelectors.bind(this);
            this.inactivityPopUpConfirmed = this.inactivityPopUpConfirmed.bind(this);
            this.inactivityPopUpDeclined = this.inactivityPopUpDeclined.bind(this);
            this.toggleMenu = this.toggleMenu.bind(this);
            this.closeGamePopUpConfirmed = this.closeGamePopUpConfirmed.bind(this);
            this.closeGamePopUpDeclined = this.closeGamePopUpDeclined.bind(this);
            this.inactivityPopUpTimedOut = this.inactivityPopUpTimedOut.bind(this);
            this.pauseGame = this.pauseGame.bind(this);
            this.resumeGame = this.resumeGame.bind(this);
            this.onDepotTouched = this.onDepotTouched.bind(this);
            this.onLimitTouched = this.onLimitTouched.bind(this);
            this.iOSUserWantsSound = this.iOSUserWantsSound.bind(this);
        },
        checkAspectRatio: function() {
            var aspectRatio = ig.system.stageWidth / ig.system.stageHeight;
            if (aspectRatio <= 1.5) {
                $("#settings-spinner-area").css("height", "65%");
                $("#settings-button-bar").css("height", "35%");
            }
            if (aspectRatio >= 1.75) {
                $(".icon-btn-container").css("width", "10%");
                $(".icon-btn-container").css("margin-left", "5%");
                $(".icon-btn-container").css("margin-right", "5%");
                $("#settings-spinner-area").css("height", "65%");
                $("#settings-button-bar").css("height", "35%");
            }
        },
        createSettingsMenue: function() {
            if (ig.ua.mobile) {
                $('#controlSwitchButton').on(ig.touchEvents, this.toggleControlSide);
            } else {
                $('#controlSwitchContainer').remove();
            }
            $('#turboSpinButton').on(ig.touchEvents, this.toggleTurboSpin);
        },
        hideOpenSelectors: function() {
            if ($('#coinWrapper').css('display') !== 'none') {
                this.facade.coinStepper.hide();
            }
            if ($('#autoSpinWrapper').css('display') !== 'none') {
                this.autoSpinSelector.hide();
            }
            if ($('#lineWrapper').css('display') !== 'none') {
                this.facade.lineStepper.hide();
            }
        },
        onAutospinsChanged: function(autoSpinAmount) {
            this.facade.sendNotification("AUTOSPIN_AMOUNT_CHANGED", autoSpinAmount);
        },
        keepAlive: function(evt) {
            InactivityTimer.reset();
        },
        closeGame: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.casino.soundPlayer.playEffect("SFX_SettingsButton");
            if (this.hasUnevaluatedBets()) {
                this.showCloseGameScreen();
                return;
            }
            this.delayedClose = this.delayedClose.bind(this);
            setTimeout(this.delayedClose, 300);
        },
        delayedClose: function() {
            if (ig.ua.terminal) {
                this.facade.terminalConnector.broadcastGameClose("adp_" + this.facade.getGameId());
            }
            this.casino.closeGame();
        },
        hasUnevaluatedBets: function() {
            if (this.facade.currentGameMode == "FREE_GAME" || this.facade.currentGameMode == "RETRIGGER_FREE_GAME" || this.facade.currentGameMode == "EXIT_FREE_GAME" || this.facade.currentGameMode == "ENTER_FREE_GAME" || this.facade.currentGameMode == "SHOW_PAYTABLE_DURING_CHOOSE_RISK")
                return true;
            return this.facade.currentGameRoundPhase != "PLACE_BETS" && this.facade.currentGameRoundPhase != "SHOW_PAYTABLE";
        },
        pauseGame: function() {
            this.isPaused = true;
            $("body").css("pointer-events", "none");
            this.removeSettingsMenueListener();
            this.facade.disableBetting();
            this.facade.pauseGame();
        },
        resumeGame: function() {
            this.isPaused = false;
            this.readdSettingsMenueListener();
            $("body").css("pointer-events", "all");
            this.facade.resumeGame();
        },
        disableSettings: function() {
            $("#settings-menue-btn").off(ig.touchEvents);
            $("#gameMenu").css('pointer-events', 'none');
            $("#close-game-btn").css('pointer-events', 'none');
            $("#paytableButton").css('pointer-events', 'none');
            $("#helpButton").css('pointer-events', 'none');
            $("#fullScreenWrapper").css('pointer-events', 'none');
            $("#soundWrapper").css('pointer-events', 'none');
            $("#volumeWrapper").css('pointer-events', 'none');
            $("#turboSpinButton").css('pointer-events', 'none');
            $("#controlSwitchButton").css('pointer-events', 'none');
        },
        disablePaytable: function() {
            $("#paytableButton").css('pointer-events', 'none');
        },
        disableHelp: function() {
            $("#helpButton").css('pointer-events', 'none');
        },
        enableSettings: function() {
            $("#gameMenu").css('pointer-events', '');
            $("#close-game-btn").css('pointer-events', '');
            $("#paytableButton").css('pointer-events', '');
            $("#helpButton").css('pointer-events', '');
            $("#fullScreenWrapper").css('pointer-events', '');
            $("#soundWrapper").css('pointer-events', '');
            $("#volumeWrapper").css('pointer-events', '');
            $("#turboSpinButton").css('pointer-events', '');
            $("#controlSwitchButton").css('pointer-events', '');
            if (this.facade !== null) {
                this.facade.inputHandler.bindSettingsButtons();
            }
        },
        enableCloseGameBtn: function() {
            $("#close-game-btn").css('pointer-events', '');
        },
        disableCloseGameBtn: function() {
            $("#close-game-btn").css('pointer-events', 'none');
        },
        removeSettingsMenueListener: function() {
            $("#close-game-btn").off(ig.touchEvents);
            this.disableSettings();
            $("#close-menue-btn").off(ig.touchEvents);
        },
        readdSettingsMenueListener: function() {
            $("#close-game-btn").on(ig.touchEvents, this.closeGame);
            $("#close-settings-btn").on(ig.touchEvents, this.moveOutSettingsMenue);
            this.enableSettings();
        },
        iOSUserWantsSound: function() {
            this.casino.soundPlayer.soundOn = true;
            $("body").off(ig.touchEvents, this.iOSUserWantsSound);
        },
        addListener: function() {
            ig.input.bind(ig.KEY.MOUSE1, 'skipReel');
            ig.input.bind(ig.KEY.F2, 'showGameInfo');
            $("#close-game-btn").on(ig.touchEvents, this.closeGame);
            if (ig.ua.mobile) {
                $("#mobileMenuExpander").on(ig.touchEvents, this.toggleMenu);
                if (ig.ua.iOS) {
                    $("body").on(ig.touchEvents, this.iOSUserWantsSound);
                }
                this.userWantsSound();
            } else {
                this.userWantsSound();
                $("#volumeWrapper").hide();
            }
            var lim = $("#limit-meter");
            var dep = $("#depot-meter");
            lim.on(ig.touchEvents, this.onLimitTouched);
            dep.on(ig.touchEvents, this.onDepotTouched);
        },
        onLimitTouched: function() {
            if (this.casino.shallShowDepotBalance()) {
                ig.system.depotVisible = true;
                $("#limit-meter").css("display", "none");
                $("#depot-meter").css("display", "");
            }
            ig.System.depotVisible = true;
        },
        onDepotTouched: function() {
            if (this.casino.shallShowDepotBalance()) {
                $("#limit-meter").css("display", "");
                $("#depot-meter").css("display", "none");
            }
            ig.System.depotVisible = false;
        },
        toggleControlSide: function(e) {
            this.facade.hoverTouchUnstick();
            if (this.casino.controlOrientation === 'left') {
                this.controlsRight(e);
            } else if (this.casino.controlOrientation === 'right') {
                this.controlsLeft(e);
            }
            this.hoverTouchUnstick();
        },
        hoverTouchUnstick: function() {
            if ('ontouchstart' in document.documentElement) {
                for (var sheetI = document.styleSheets.length - 1; sheetI >= 0; sheetI--) {
                    var sheet = document.styleSheets[sheetI];
                    if (sheet.cssRules) {
                        for (var ruleI = sheet.cssRules.length - 1; ruleI >= 0; ruleI--) {
                            var rule = sheet.cssRules[ruleI];
                            if (rule.selectorText) {
                                rule.selectorText = rule.selectorText.replace(":hover", ":active");
                            }
                        }
                    }
                }
            }
        },
        controlsLeft: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.setControlOrientation("left");
        },
        controlsRight: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.setControlOrientation("right");
        },
        toggleTurboSpin: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.facade.hoverTouchUnstick();
            if (this.facade.turboSpinHandler.isActive) {
                this.deactivateTurboSpin(evt);
            } else {
                this.activateTurboSpin(evt);
            }
            this.hoverTouchUnstick();
        },
        activateTurboSpin: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.facade.sendNotification("ACTIVATE_TURBOSPINS");
        },
        deactivateTurboSpin: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.facade.sendNotification("DEACTIVATE_TURBOSPINS");
        },
        setControlOrientation: function(orientation) {
            var oppositeOrientation = "right";
            if (orientation === "right") {
                oppositeOrientation = "left";
            }
            this.casino.soundPlayer.playEffect("SFX_SettingsButton");
            this.casino.controlOrientation = orientation;
            $("#game-controls").css("float", orientation);
            $("#support-game-controls").css("float", oppositeOrientation);
            $("#mobile-menu-container").removeClass('ui-panel-position-' + orientation).addClass("ui-panel-position-" + oppositeOrientation);
            $("#main").css("padding-top", "1px");
            this.setSideBarPosition();
        },
        setSideBarPosition: function() {
            if (this.casino.controlOrientation === 'right') {
                $("#mobile-menu-container").css('right', '');
                $("#mobileMenuExpander").removeClass('desktopGameMenu-mobilemenu-right').addClass('desktopGameMenu-mobilemenu-left');
                if ($("#mobile-menu-container").offset().left < 0) {
                    this.setSidebarClosedLeft();
                } else {
                    this.setSidebarOpenLeft();
                }
            } else {
                $("#mobile-menu-container").css('left', '');
                $("#mobileMenuExpander").removeClass('desktopGameMenu-mobilemenu-left').addClass('desktopGameMenu-mobilemenu-right');
                if (parseInt($("#mobile-menu-container").css('right')) < 0) {
                    this.setSidebarClosedRight();
                } else {
                    this.setSidebarOpenRight();
                }
            }
        },
        toggleMenu: function() {
            "use strict";
            if (this.casino.controlOrientation === 'right') {
                $("#mobile-menu-container").css('right', '');
                $("#mobileMenuExpander").removeClass('desktopGameMenu-mobilemenu-right').addClass('desktopGameMenu-mobilemenu-left');
                if ($("#mobile-menu-container").offset().left < 0) {
                    this.setSidebarOpenLeft();
                } else {
                    this.setSidebarClosedLeft();
                }
            } else {
                $("#mobile-menu-container").css('left', '');
                $("#mobileMenuExpander").removeClass('desktopGameMenu-mobilemenu-left').addClass('desktopGameMenu-mobilemenu-right');
                if (parseInt($("#mobile-menu-container").css('right')) < 0) {
                    this.setSidebarOpenRight();
                } else {
                    this.setSidebarClosedRight();
                }
            }
        },
        setSidebarOpenRight: function() {
            $("#mobile-menu-container").css({
                right: 0
            });
            $("#mobileMenuExpander").css("transform", "rotateZ(180deg)");
        },
        setSidebarOpenLeft: function() {
            $("#mobile-menu-container").offset({
                left: 0
            });
            $("#mobileMenuExpander").css("transform", "rotateZ(0deg)");
        },
        setSidebarClosedRight: function() {
            var offSetToHide = $("#mobile-menu-buttons").width();
            $("#mobile-menu-container").css({
                right: (-1 * offSetToHide)
            });
            $("#mobileMenuExpander").css("transform", "rotateZ(0deg)");
        },
        setSidebarClosedLeft: function() {
            var offSetToHide = $("#mobile-menu-buttons").width();
            $("#mobile-menu-container").offset({
                left: (-1 * offSetToHide)
            });
            $("#mobileMenuExpander").css("transform", "rotateZ(180deg)");
        },
        soundPopUpClickActivate: function(evt) {
            $("#activateSound").popup("close");
            ig.logger.log(Logger.LogLevel.INFO, "Sound Activated");
            this.userWantsSound();
        },
        userWantsSound: function() {
            this.facade.sendNotification(GameActionIDs.ENABLE_SOUND);
            this.facade.startGameFlow();
        },
        soundPopUpClickDeactivate: function(evt) {
            $("#activateSound").popup("close");
            ig.logger.log(Logger.LogLevel.INFO, "Sound Deactivated");
            this.userDoesNotWantSound();
        },
        userDoesNotWantSound: function() {
            this.facade.sendNotification(GameActionIDs.DISABLE_SOUND);
            this.facade.startGameFlow();
        },
        update: function() {
            this.parent();
            this.facade.update();
        },
        draw: function() {
            this.parent();
            this.facade.draw();
        },
        setFacade: function(facade) {
            this.facade = facade;
            this.facade.setResult(this.gameResult);
        },
        showInactivityScreen: function() {
            this.facade.isBlockedByPopUp = true;
            $("#inactivity_yes").on(ig.touchEvents, this.inactivityPopUpConfirmed);
            $("#inactivity_no").on(ig.touchEvents, this.inactivityPopUpDeclined);
            $("#inactivityDialog").click();
        },
        inactivityPopUpConfirmed: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            $("#inactivity_yes").off(ig.touchEvents, this.inactivityPopUpConfirmed);
            $("#inactivity_no").off(ig.touchEvents, this.inactivityPopUpDeclined);
            $("#inactivity").popup("close");
            InactivityTimer.isCountingDown = false;
            InactivityTimer.clear();
            this.facade.isBlockedByPopUp = false;
            if (!this.isPaytableOrHelpOpen()) {
                this.facade.resumeGame();
            } else {
                this.enableSettings();
            }
        },
        isPaytableOrHelpOpen: function() {
            var paytableVisible = false;
            if (this.facade.gameGui.paytable) {
                paytableVisible = this.facade.gameGui.paytable.visible;
            }
            return paytableVisible || $('#help-box').css('display') !== 'none';
        },
        inactivityPopUpDeclined: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            InactivityTimer.isCountingDown = false;
            InactivityTimer.clear();
            $("#inactivity_yes").off(ig.touchEvents, this.inactivityPopUpConfirmed);
            $("#inactivity_no").off(ig.touchEvents, this.inactivityPopUpDeclined);
            $("#inactivity").popup("close");
            this.facade.isBlockedByPopUp = false;
            this.closeGame();
        },
        inactivityPopUpTimedOut: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            $("#inactivity_yes").off(ig.touchEvents, this.inactivityPopUpConfirmed);
            $("#inactivity_no").off(ig.touchEvents, this.inactivityPopUpDeclined);
            $("#inactivity").popup("close");
            if (ig.ua.terminal) {
                this.facade.terminalConnector.broadcastGameClose("adp_" + this.facade.getGameId());
            }
            this.casino.logOutPortalUser("inactivity");
        },
        showCloseGameScreen: function() {
            this.facade.pauseGame();
            this.facade.isBlockedByPopUp = true;
            $("#close-game-pop-up-yes").on(ig.touchEvents, this.closeGamePopUpConfirmed);
            $("#close-game-pop-up-no").on(ig.touchEvents, this.closeGamePopUpDeclined);
            $("#closeGameDialog").click();
        },
        closeGamePopUpConfirmed: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            $("#close-game-pop-up-yes").off(ig.touchEvents, this.closeGamePopUpConfirmed);
            $("#close-game-pop-up-no").off(ig.touchEvents, this.closeGamePopUpDeclined);
            $("#close-game-pop-up").popup("close");
            if (ig.ua.terminal) {
                this.facade.terminalConnector.broadcastGameClose("adp_" + this.facade.getGameId());
            }
            this.casino.closeGame();
        },
        closeGamePopUpDeclined: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            $("#close-game-pop-up-yes").off(ig.touchEvents, this.closeGamePopUpConfirmed);
            $("#close-game-pop-up-no").off(ig.touchEvents, this.closeGamePopUpDeclined);
            $("#close-game-pop-up").popup("close");
            if (!this.isPaytableOrHelpOpen()) {
                this.facade.isBlockedByPopUp = false;
                this.facade.resumeGame();
            } else {
                this.enableSettings();
                $("#close-game-btn").on(ig.touchEvents, this.closeGame);
            }
        }
    });
});


// ../private/de/adp/web/sound/sound.js 
ig.baked = true;
ig.module('de.adp.web.sound.sound').requires('impact.impact').defines(function() {
    Sound = ig.Class.extend({
        id: "",
        start: 0,
        duration: 0,
        init: function(name, start, duration) {
            this.id = name;
            this.start = start;
            this.duration = duration;
        }
    });
});


// ../private/de/adp/web/sound/soundSprite.js 
ig.baked = true;
ig.module('de.adp.web.sound.soundSprite').requires('impact.impact', 'de.adp.web.sound.sound').defines(function() {
    SoundSprite = ig.Class.extend({
        soundSprite: {},
        sounds: [],
        init: function(name, pathToMp3, pathToOgg) {
            this.soundSprite.urls = [pathToMp3 || "", pathToOgg || ""];
            this.soundSprite.sprite = {};
            this.soundSprite.autoPlay = false;
            this.soundSprite.loop = false;
        },
        registerSound: function(sound) {
            if (typeof(sound) !== null && typeof sound !== "undefined") {
                this.sounds.push(sound);
                this.soundSprite.sprite[sound.id] = [sound.start, sound.duration];
            }
        },
        registerSoundsFromJSON: function(jsonObject) {
            if (typeof jsonObject === "object" && jsonObject !== undefined && jsonObject !== null) {
                this.soundSprite = jsonObject;
            }
        },
        getSoundSprite: function() {
            return this.soundSprite;
        }
    });
});


// ../private/de/adp/web/dtos/response.js 
ig.baked = true;
ig.module("de.adp.web.dtos.response").requires("impact.impact", "de.adp.web.dtos.gameResult").defines(function() {
    ActionResponse = ig.Class.extend({
        gameResult: null,
        addOnGameInitResult: null,
        addOnGameResult: null,
        nextGameFlowName: null,
        nextGameActions: [],
        uncommittedWinSum: 0,
        lastWagerSum: 0,
        responseType: "",
        debit: 0,
        credit: 0,
        _rawResponse: {},
        init: function(response) {
            this._rawResponse = response;
            if (response) {
                this.fill(response);
            }
        },
        fill: function(data) {
            if (typeof data !== "undefined") {
                if (typeof data.mainGameResult !== "undefined") {
                    this.gameResult = new GameResult();
                    this.gameResult.fill(data.mainGameResult);
                } else {
                    ig.logger.log(Logger.LogLevel.INFO, "ActionResponse has no mainGameResult");
                }
                if (typeof data.nextGameFlowName !== "undefined") {
                    this.nextGameFlowName = data.nextGameFlowName;
                } else {
                    throw "ActionResponse has no nextGameFlowName!";
                }
                if (typeof data.uncommittedWinSum !== "undefined") {
                    this.uncommittedWinSum = parseInt(data.uncommittedWinSum);
                } else {
                    throw "ActionResponse has no uncommittedWinSum";
                }
                if (typeof data.lastWagerSum !== "undefined") {
                    this.lastWagerSum = parseInt(data.lastWagerSum);
                }
                if (typeof data.responseType !== "undefined") {
                    this.responseType = data.responseType;
                } else {
                    this.responseType = "ACTION";
                }
                if (typeof data.nextGameActions !== "undefined") {
                    this.nextGameActions.length = 0;
                    this.nextGameActions = data.nextGameActions;
                }
                if (typeof data.addOnGameInitResult !== "undefined" && data.addOnGameInitResult !== null) {
                    this.addOnGameInitResult = new GameResult();
                    this.addOnGameInitResult.fill(data.addOnGameInitResult);
                }
                if (typeof data.addOnGameResult !== "undefined" && data.addOnGameResult !== null) {
                    this.addOnGameResult = new GameResult();
                    this.addOnGameResult.fill(data.addOnGameResult);
                }
            }
        },
        data: function() {
            return this._rawResponse;
        },
        getClientSettings: function() {
            var settings = this._rawResponse.mainGameResult.parameters.CLIENT_SETTINGS;
            if (settings) {
                if (typeof settings === "string") {
                    return JSON.parse(settings);
                } else {
                    return settings;
                }
            }
            return null;
        }
    });
});



// ../private/de/adp/web/portal/adpPortalAdapter.js 
ig.baked = true;
ig.module('de.adp.web.portal.adpPortalAdapter').requires('de.adp.web.portal.portalInterface', 'impact.impact').defines(function() {
    AdpPortalAdapter = PortalInterface.extend({
        adpAPI: null,
        init: function(adpPortalAPI, async) {
            this.async = async;
            this.openResponsibleGamingLink = this.openResponsibleGamingLink.bind(this);
            this.adpAPI = adpPortalAPI;
        },
        getCasinoConfiguration: function(key, scope) {
            if (key == "AMBER_DIAMOND_JACKPOT") {
                return true;
            }
            var val = this.adpAPI.portal.getCasinoConfiguration(key);
            if (val !== null && val !== undefined) {
                return val;
            }
            if (key === "SHALL_CHECK_DEPOT_IN_CLIENT") {
                return false;
            }
            ig.logger.log(Logger.LogLevel.INFO, "No CasinoConfiguration found for key '" + key + "'!");
            return false;
        },
        showSuppressedCasinoMessages: function(resumeFunction) {
            this.adpAPI.portal.showSuppressedCasinoMessages(resumeFunction);
        },
        openResponsibleGamingLink: function() {
            this.adpAPI.portal.openResponsibleGamingUrl();
        },
        getResponsibleGamingIconURL: function() {
            return this.adpAPI.portal.getResponsibleGamingIconPath();
        },
        isResponsibleGamingActive: function() {
            return this.adpAPI.portal.isResponsibleGamingActive();
        },
        retrieveSlotSessionData: function() {
            return this.adpAPI.portal.getSlotSessionInformation();
        },
        closeGame: function() {
            this.adpAPI.portal.closeGame();
        },
        onPrepared: function(callBack, status, resize) {
            this.adpAPI.portal.onPrepared(callBack, status, resize);
        },
        getDisplaySize: function() {
            return this.adpAPI.portal.getDisplaySize();
        },
        getHelpContent: function() {
            return "";
        },
        startBackend: function() {
            var data = this.adpAPI.portal.start();
            return data;
        },
        setLoadProgress: function(progress) {
            this.adpAPI.loadProgressDisplay.setProgress(progress);
        },
        showLoadProgressDisplay: function() {
            this.adpAPI.loadProgressDisplay.show();
        },
        hideLoadProgressDisplay: function() {
            this.adpAPI.loadProgressDisplay.hide();
        },
        getDepotBalance: function() {
            return this.adpAPI.portal.networkProvider.getDepot().data;
        },
        getLimitedDepotBalance: function() {
            return this.adpAPI.portal.networkProvider.getDepot().data;
        },
        abortGame: function() {
            this.adpAPI.portal.closeGame();
        },
        send: function(data, callBack) {
            this.adpAPI.portal.networkProvider.send(data, callBack, this.async);
        },
        getLocale: function() {
            return this.adpAPI.portal.resourceProvider.getLocaleId();
        },
        getTranslation: function(id) {
            return this.adpAPI.portal.resourceProvider.getString(id);
        },
        getCurrency: function() {
            var o = this.adpAPI.portal.resourceProvider.getCurrencyOptions();
            o.numberOfFractionDigits = o.digitsToCutOff;
            return o;
        },
        maximizeClient: function() {
            "use strict";
            this.adpAPI.portal.maximizeClient();
        },
        minimizeClient: function() {
            "use strict";
            this.adpAPI.portal.minimizeClient();
        },
        areThereWaitingMessages: function() {
            return false;
        },
        gameRoundStarted: function() {},
        gameRoundEnded: function() {},
        logOutPortalUser: function(reason) {},
        shallShowDepotBalance: function() {
            return true;
        },
        betChangeEnabled: function() {
            return true;
        },
        lineChangeEnabled: function() {
            return true;
        },
        maxBetEnabled: function() {
            return true;
        },
        onTotalStakeChanged: function(newStake) {},
        onWinChanged: function(newWin) {},
        onAudioEnabled: function() {},
        onAudioDisabled: function() {},
        isJackpotWaiting: function() {},
        getJackpotValue: function() {},
        getJackpotResult: function() {},
        getJackpotURL: function() {},
        mustShowRTP: function() {
            return true;
        },
        mustShowBanButton: function() {
            return true;
        },
        getMaxAllowedBetSize: function() {
            return -1;
        }
    });
});

// ../private/de/adp/web/casino/adpCasino.js 
ig.baked = true;
ig.module('de.adp.web.casino.adpCasino').requires('impact.impact', 'plugins.ajax', 'de.adp.web.provider.depotProvider', 'de.adp.web.provider.edictNetworkProviderAdapter', 'de.adp.web.provider.resourceProvider', 'de.adp.web.provider.displayProvider', 'de.adp.web.provider.buttonProvider', 'de.adp.web.sound.soundPlayer', 'de.adp.web.portal.adpPortalAdapter').defines(function() {
    AdpCasino = ig.Class.extend({
        controlOrientation: 'right',
        gameGui: null,
        networkProvider: null,
        depotProvider: null,
        displayProvider: null,
        resourceProvider: null,
        soundPlayer: null,
        buttonProvider: null,
        portal: null,
        init: function(adp, async) {
            this.async = async;
            this.openResponsibleGamingLink = this.openResponsibleGamingLink.bind(this);
            this.portal = new AdpPortalAdapter(adp, async);
            this.soundPlayer = new SoundPlayer();
            this.buttonProvider = new ButtonProvider();
        },
        addGameGui: function(gui) {
            if (typeof(gui) !== "undefined" && gui != null) {
                this.gameGui = gui;
            }
        },
        getCasinoConfiguration: function(key, scope) {
            var val = "";
            if (key === "SHALL_CHECK_DEPOT_IN_CLIENT") {
                return false;
            }
            return this.portal.getCasinoConfiguration(key);
        },
        showSuppressedCasinoMessages: function(resumeFunction) {
            resumeFunction();
        },
        openResponsibleGamingLink: function() {},
        getResponsibleGamingIconURL: function() {
            return "";
        },
        isResponsibleGamingActive: function() {
            return false;
        },
        retrieveSlotSessionData: function() {
            return {};
        },
        closeGame: function() {
            this.portal.closeGame();
        },
        onPrepared: function(callBack, status, resizeCallback) {
            this.portal.onPrepared(this.empty, status, resizeCallback);
            this.depotProvider = new DepotProvider(this.portal);
            this.resourceProvider = new ResourceProvider(this.portal);
            this.displayProvider = new DisplayProvider();
            this.displayProvider.casino = this;
            this.resourceProvider.registerTranslatableObject(this.displayProvider);
            this.networkProvider = new EdictNetworkProviderAdapter(this.portal, this, this.async);
            this.networkProvider.casino = this;
            callBack();
        },
        empty: function() {},
        getDisplaySize: function() {
            return this.portal.getDisplaySize();
        },
        getHelpContent: function() {
            return this.portal.getHelpContent();
        },
        start: function(callBack) {
            var data = this.portal.startBackend();
            var locale = this.portal.getLocale();
            this.resourceProvider.setLocaleId(locale);
            callBack(data);
        },
        showLoadProgress: function(progress) {
            this.portal.setLoadProgress(progress);
        },
        maximizeGame: function() {
            "use strict";
            this.portal.maximizeClient();
        },
        minimizeGame: function() {
            "use strict";
            this.portal.minimizeClient();
        },
        gameRoundStarted: function() {
            this.portal.gameRoundStarted();
        },
        gameRoundEnded: function() {
            this.portal.gameRoundEnded();
        },
        logOutPortalUser: function(reason) {
            this.portal.logOutPortalUser(reason);
        },
        shallShowDepotBalance: function() {
            return this.portal.shallShowDepotBalance();
        },
        betChangeEnabled: function() {
            return this.portal.betChangeEnabled();
        },
        lineChangeEnabled: function() {
            return this.portal.lineChangeEnabled();
        },
        maxBetEnabled: function() {
            return this.portal.maxBetEnabled();
        },
        onTotalStakeChanged: function(newStake) {
            this.portal.onTotalStakeChanged(newStake);
        },
        getJurisdictionID: function() {
            return "iom";
        },
        onWinChanged: function(newWin) {
            this.portal.onWinChanged(newWin);
        },
        onAudioEnabled: function() {
            this.portal.onAudioEnabled();
        },
        onAudioDisabled: function() {
            this.portal.onAudioEnabled();
        },
        mustShowRTP: function() {
            return true;
        },
        mustShowBanButton: function() {
            return true;
        },
        banPlayer: function() {
            console.log("24 HOURS ban activated!");
        },
        getMaxAllowedBetSize: function() {
            return 100;
        }
    });
});

// ../private/de/adp/web/dtos/wager/wagerPositionSet.js 
ig.baked = true;
ig.module("de.adp.web.dtos.wager.wagerPositionSet").requires("impact.impact").defines(function() {
    WagerPositionSet = ig.Class.extend({
        id: 0,
        possibleWagers: [],
        minWager: 0,
        maxWager: 0,
        wagerPositionIds: [],
        wagerStepType: "",
        init: function() {},
        fill: function(data) {
            if (typeof data.id !== "undefined" && data.id !== null) {
                this.id = data.id;
            }
            if (data.wagerPositionIds.isArray()) {
                this.wagerPositionIds = data.wagerPositionIds;
            }
            if (typeof data.wagerBounds !== "undefined" && data.wagerBounds !== null) {
                this.minWager = data.wagerBounds.minWager || null;
                this.maxWager = data.wagerBounds.maxWager || null;
                this.possibleWagers = data.wagerBounds.possibleWagers || null;
                if (this.minWager === null || this.maxWager === null || this.possibleWagers === null) {
                    throw "WagerBounds malformed";
                }
            }
        }
    });
});

// ../private/de/adp/web/dtos/initResponse.js 
ig.baked = true;
ig.module("de.adp.web.dtos.initResponse").requires("de.adp.web.dtos.response", "de.adp.web.dtos.wager.wagerPositionSet").defines(function() {
    InitResponse = ActionResponse.extend({
        _coins: [],
        _wagerPositionSets: [],
        _translations: {},
        _paytable: {},
        fill: function(raw) {
            this._coins = raw.coins;
            for (var i = 0; i < raw.wagerPositionSets.length; i++) {
                var newWagPos = new WagerPositionSet();
                newWagPos.fill(raw.wagerPositionSets[i]);
                this._wagerPositionSets.push(newWagPos);
            }
            if (raw.translations instanceof Object && raw.translations !== null) {
                this._translations = raw.translations;
            }
            if (raw.payTable instanceof Object && raw.payTable !== null) {
                this._paytable = raw.payTable;
            }
            this.parent(raw);
        },
        coins: function() {
            if (this._coins.length > 0) {
                return this._coins;
            } else {
                throw "This response does not contain any coins";
            }
        },
        wagerPositionSets: function() {
            if (this._wagerPositionSets.length > 0) {
                return this._wagerPositionSets;
            } else {
                throw "This response does not contain any Wagerposition Sets";
            }
        },
        translations: function() {
            if (this._translations instanceof Object && this._translations !== null) {
                return this._translations;
            } else {
                throw "There are no translations in this response";
            }
        },
        payTable: function() {
            return this._paytable;
        }
    });
});

// ../private/de/adp/web/gui/elements/overlayBox.js 
ig.baked = true;
ig.module("de.adp.web.gui.elements.overlayBox").requires("impact.impact").defines(function() {
    OverlayBox = ig.Class.extend({
        _id: "overlaybox",
        _view: undefined,
        _width: 0,
        _height: 0,
        _posX: 0,
        _posY: 0,
        _backgroundColor: 0,
        _content: undefined,
        init: function(id, width, height, posX, posY, backgroundcolor) {
            this._width = width;
            this._height = height;
            this._backgroundColor = backgroundcolor;
            this._id = id;
            this._posX = posX;
            this._posY = posY;
            this._create();
        },
        _create: function() {
            this._view = $('<div id="' + this._id + '" style="overflow:scroll;overflow-x:hidden;z-index:10;background-color:' + this._backgroundColor + ';width:' + this._width + 'px;height:' + this._height + 'px;top:' + this._posY + 'px;left:' + this._posX + 'px;position:absolute"></div>');
        },
        setContent: function(content) {
            $(this._view).append(content);
            this._content = content;
        },
        getView: function() {
            return this._view;
        }
    });
});

// ../private/de/adp/web/animation/sequenceGenerator.js 
ig.baked = true;
ig.module("de.adp.web.animation.sequenceGenerator").requires("impact.impact").defines(function() {
    SequenceGenerator = ig.Class.extend({
        init: function() {}
    });
    SequenceGenerator.generateFrameSequence = function(startframe, endframe, repeatframesfor, reverseatend) {
        var sequence = [],
            _startframe = startframe,
            _endframe = endframe,
            _repeatframesfor = repeatframesfor || 1,
            _reverseatend = reverseatend || false;
        var framesrepeated = 0;
        for (var frame = _startframe; frame < _endframe; frame++) {
            sequence.push(frame);
            if (_repeatframesfor !== 1 && framesrepeated !== _repeatframesfor) {
                framesrepeated++;
                if (framesrepeated === _repeatframesfor) {
                    framesrepeated = 0;
                    continue;
                }
                frame--;
            }
        }
        if (_reverseatend) {
            framesrepeated = 0;
            for (var revframe = _endframe; revframe >= _startframe; revframe--) {
                sequence.push(revframe);
                if (_repeatframesfor !== 1 && framesrepeated !== _repeatframesfor) {
                    framesrepeated++;
                    if (framesrepeated === _repeatframesfor) {
                        framesrepeated = 0;
                        continue;
                    }
                    revframe++;
                }
            }
        }
        return sequence;
    };
});

// ../private/de/adp/web/utils/ImageFilters.js 
ig.baked = true;
ig.module("de.adp.web.utils.ImageFilters").requires("impact.impact").defines(function() {
    ImageFilters = ig.Class.extend({});
    ImageFilters.getPixels = function(img) {
        var c = this.getCanvas(img.width, img.height);
        var ctx = c.getContext('2d');
        ctx.drawImage(img, 0, 0);
        return ctx.getImageData(0, 0, c.width, c.height);
    };
    ImageFilters.duplicateImage = function(img) {
        return ImageFilters.getImage(ImageFilters.getPixels(img));
    };
    ImageFilters.getCanvas = function(w, h) {
        var c = document.createElement('canvas');
        c.width = w;
        c.height = h;
        return c;
    };
    ImageFilters.filterImage = function(filter, image, var_args) {
        var args = [this.getPixels(image)];
        for (var i = 2; i < arguments.length; i++) {
            args.push(arguments[i]);
        }
        return filter.apply(null, args);
    };
    ImageFilters.brightness = function(pixels, adjustment) {
        var d = pixels.data;
        for (var i = 0; i < d.length; i += 4) {
            d[i] += adjustment;
            d[i + 1] += adjustment;
            d[i + 2] += adjustment;
        }
        return pixels;
    };
    ImageFilters.getImage = function(pixels) {
        var c = this.getCanvas(pixels.width, pixels.height);
        var ctx = c.getContext('2d');
        ctx.putImageData(pixels, 0, 0);
        return c;
    }
});

// ../private/impact/graphic.js 
ig.baked = true;
ig.module('impact.graphic').requires('impact.entity', 'de.adp.web.utils.ImageFilters', 'impact.impact').defines(function() {
    ig.Graphic = ig.Image.extend({
        data: null,
        width: 0,
        height: 0,
        pos: {
            x: 0,
            y: 0
        },
        displayParent: null,
        visible: true,
        states: {},
        init: function(defaultData) {
            this.data = ImageFilters.duplicateImage(defaultData);
            this.loaded = true;
            this.width = this.data.width;
            this.height = this.data.height;
            this.addState("default", this.data);
        },
        draw: function(targetX, targetY, sourceX, sourceY, width, height, ctx) {
            if (this.displayParent) {
                this.offset.x = this.displayParent.pos.x + this.displayParent.offset.x;
                this.offset.y = this.displayParent.pos.y + this.displayParent.offset.y;
            }
            var scale = ig.system.scale;
            sourceX = sourceX ? sourceX * scale : 0;
            sourceY = sourceY ? sourceY * scale : 0;
            width = (width ? width : this.width) * scale;
            height = (height ? height : this.height) * scale;
            if (!ctx) {
                ig.system.context.drawImage(this.data, sourceX, sourceY, width, height, ig.system.getDrawPos(targetX), ig.system.getDrawPos(targetY), width, Math.floor(height));
            } else {
                ctx.drawImage(this.data, sourceX, sourceY, width, height, ig.system.getDrawPos(targetX), ig.system.getDrawPos(targetY), width, Math.floor(height));
            }
            ig.Image.drawCount++;
        },
        drawTile: function(targetX, targetY, tile, tileWidth, tileHeight, flipX, flipY, ctx) {
            this.parent(targetX, targetY, tile, tileWidth, tileHeight, flipX, flipY, ctx);
        },
        addState: function(id, data) {
            this.states[id] = data;
        },
        setState: function(id) {
            var state = this.states[id];
            if (state != undefined) {
                this.data = state;
            }
        }
    });
});

// ../private/impact/node.js 
ig.baked = true;
ig.module('impact.node').requires('impact.entity', 'impact.impact', 'impact.graphic').defines(function() {
    ig.Node = ig.Entity.extend({
        children: [],
        isRoot: false,
        addChild: function(child) {
            if (child.displayParent !== null && !(child instanceof ig.Image)) {
                child.displayParent.removeChild(child);
            }
            child.displayParent = this;
            this.updateChildOffset(child);
            this.children.push(child);
            child.onAttached();
        },
        addChildAt: function(child, index) {
            if (child.displayParent !== null && !(child instanceof ig.Image)) {
                child.displayParent.removeChild(child);
            }
            child.displayParent = this;
            this.updateChildOffset(child);
            var afterChildArray = this.children.splice(index);
            if (index > this.children.length) {
                index = this.children.length;
            }
            this.children[index] = child;
            this.children = this.children.concat(afterChildArray);
            child.onAttached();
        },
        getChildAt: function(index) {
            return this.children[index];
        },
        removeChild: function(child) {
            var indexOfChild = this.children.indexOf(child);
            if (indexOfChild != -1) {
                child.displayParent = null;
                this.children.splice(indexOfChild, 1);
                child.onRemoved();
            }
        },
        removeChildAt: function(index) {
            if (index != -1 && index < this.children.length) {
                var child = this.getChildAt(index);
                this.removeChild(child);
            }
        },
        removeChildrenContainedIn: function(collection) {
            if (Array.isArray(collection)) {
                for (var i = 0; i < collection.length; i++) {
                    var child = collection[i];
                    this.removeChild(child);
                }
            } else if (typeof collection === "object") {
                try {
                    for (var child in collection) {
                        this.removeChild(collection[child]);
                    }
                } catch (e) {
                    throw "Invalid Argument";
                }
            }
        },
        removeAllChildren: function() {
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                child.displayParent = null;
                child.onRemoved();
            }
            this.children.splice(0);
        },
        contains: function(child) {
            var contains = false;
            for (var i = 0; i < this.children.length; i++) {
                if (this.children[i] === child) {
                    contains = true;
                }
            }
            return contains;
        },
        getIndexOfChild: function(child) {
            for (var i = 0; i < this.children.length; i++) {
                if (this.children[i] === child) {
                    return i;
                }
            }
            return -1;
        },
        swapChildren: function(child1, child2) {
            var indexChild1 = this.children.indexOf(child1);
            var indexChild2 = this.children.indexOf(child2);
            var tempChild1 = this.children[indexChild1];
            this.children[indexChild1] = child2;
            this.children[indexChild2] = child1;
        },
        numChildren: function() {
            return this.children.length;
        },
        setPosition: function(x, y) {
            this.pos.x = x;
            this.pos.y = y;
            this.updateChildrenOffset();
        },
        draw: function(ctx) {
            this.parent(ctx);
            this.drawChildren(ctx);
        },
        update: function() {
            this.parent();
            for (var i = 0; i < this.children.length; i++) {
                if (this.children[i].update instanceof Function) {
                    this.updateChildOffset(this.children[i]);
                    this.children[i].update();
                }
            }
        },
        setAlphaToAllChildren: function(value) {
            for (var i = 0; i < this.children.length; i++) {
                this.children[i].alpha = value;
            }
        },
        updateChildOffset: function(child) {
            child.offset.x = this.pos.x + this.offset.x;
            child.offset.y = this.pos.y + this.offset.y;
        },
        updateChildrenOffset: function() {
            for (var i = 0; i < this.children.length; i++) {
                this.updateChildOffset(this.children[i]);
            }
        },
        drawChildren: function(ctx) {
            for (var i = 0; i < this.children.length; i++) {
                if ((this.children[i] instanceof ig.Image || this.children[i] instanceof ig.Graphic) && this.children[i].visible) {
                    this.children[i].draw((this.pos.x + this.children[i].pos.x + this.offset.x), (this.pos.y + this.children[i].pos.y + this.offset.y), null, null, null, null, ctx);
                } else {
                    if (this.children[i].visible) {
                        this.children[i].draw(ctx);
                    }
                }
            }
        },
        isVisible: function() {
            if (this.displayParent == undefined) {
                return this.isRoot && this.visible;
            }
            var parent = this.displayParent;
            return parent.isVisible();
        },
        onRemoved: function() {
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                child.onRemoved();
            }
        },
        onAttached: function() {
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                child.onAttached();
            }
        }
    })
})

// ../private/de/adp/web/paytable/canvasPaytable.js 
ig.baked = true;
ig.module("de.adp.web.paytable.canvasPaytable").requires("impact.node").defines(function() {
    CanvasPaytable = ig.Node.extend({
        _activeLineStake: 0,
        _activeTotalStake: 0,
        _payGroupIds: [],
        _payGroups: [],
        _payGroupCount: 0,
        _lastWinnings: null,
        _payTableModel: null,
        _background: null,
        scaleDownRatio: 1,
        _freegameBackground: null,
        _canCutOff: false,
        _forceDecimals: false,
        init: function(background, freegameBackground) {
            if (background instanceof ig.Image || background instanceof SwitchableBackground) {
                this._background = background;
                this.addChild(this._background);
            }
            if (freegameBackground instanceof ig.Image) {
                this._freegameBackground = freegameBackground;
                this._freegameBackground.visible = false;
                this.addChild(this._freegameBackground);
            }
        },
        addPayGroup: function(paygroup, posX, posY) {
            if (paygroup instanceof CanvasPaygroup) {
                this._payGroups.push(paygroup);
                paygroup.setPosition(posX, posY);
                this.addChild(paygroup);
            }
        },
        setPaytableModel: function(paytableModel) {
            this._payTableModel = paytableModel;
        },
        setStake: function(stakePerLine, totalStake) {
            this.activeLineStake = stakePerLine;
            this.activeTotalStake = totalStake;
            this.updatePaytableView();
        },
        updatePaytableView: function() {
            if (!this._forceDecimals) {
                this._canCutOff = this.areAllDecimalDigitsZero();
            } else {
                this._canCutOff = false;
            }
            this._payGroupCount = this._payTableModel.groups.length;
            for (var j = 0; j < this._payGroups.length; j++) {
                var payGroup = this._payGroups[j];
                for (var i = 0; i < this._payTableModel.groups.length; i++) {
                    var group = this._payTableModel.groups[i];
                    if (this.isMemberInPaygroup(payGroup.getGroupMembers(), group.members)) {
                        for (var k = 0; k < payGroup.getPayItems().length; k++) {
                            var payItem = payGroup.getPayItems()[k];
                            if (payGroup.dependsOnTotalStake) {
                                payItem.setAmount(this.activeTotalStake * group.items[k].winFactor, this._canCutOff);
                            } else {
                                payItem.setAmount(this.activeLineStake * group.items[k].winFactor, this._canCutOff);
                            }
                        }
                    }
                }
            }
            this.layoutFonts();
        },
        areAllDecimalDigitsZero: function() {
            var digits = currencyFormatter.currencyOptions.numberOfFractionDigits;
            for (var j = 0; j < this._payGroups.length; j++) {
                var payGroup = this._payGroups[j];
                for (var i = 0; i < this._payTableModel.groups.length; i++) {
                    var group = this._payTableModel.groups[i];
                    if (this.isMemberInPaygroup(payGroup.getGroupMembers(), group.members)) {
                        for (var k = 0; k < payGroup.getPayItems().length; k++) {
                            var payItem = payGroup.getPayItems()[k];
                            var val = 0;
                            if (payGroup.dependsOnTotalStake) {
                                val = this.activeTotalStake * group.items[k].winFactor;
                            } else {
                                val = this.activeLineStake * group.items[k].winFactor;
                            }
                            var isZero = currencyFormatter.areXLastCharactersZero(val + "", digits);
                            if (!isZero) {
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        },
        translate: function(resProv) {},
        onDisplay: function() {
            for (var i = 0; i < this._payGroups.length; i++) {
                this._payGroups[i].onDisplay();
            }
        },
        layoutFonts: function() {
            var newRatio = this.getSmallestScaleDownRatio();
            this.scaleDownRatio = newRatio;
            for (var i = 0; i < this._payGroups.length; i++) {
                this._payGroups[i].scaleFontsDown(this.scaleDownRatio);
            }
            return;
        },
        getSmallestScaleDownRatio: function() {
            var minRatio = 1;
            var curRatio = 1;
            for (var i = 0; i < this._payGroups.length; i++) {
                curRatio = this._payGroups[i].getSmallestScaleDownRatio();
                if (curRatio < minRatio && curRatio > 0) {
                    minRatio = curRatio;
                }
            }
            return minRatio;
        },
        isMemberInPaygroup: function(paygroupMembers, modelmembers) {
            for (var i = 0; i < paygroupMembers.length; i++) {
                var pgMember = paygroupMembers[i];
                for (var j = 0; j < modelmembers.length; j++) {
                    var modMember = modelmembers[j];
                    if (pgMember === modMember) {
                        return true;
                    }
                }
            }
            return false;
        },
        initWithLowestStake: function() {
            var allFractionsZero = this.areAllDecimalDigitsZero();
            currencyFormatter.canCutOffDecimals = allFractionsZero;
        },
        initWithBiggestStake: function() {},
        clean: function() {},
        switchToFree: function() {
            if (this._freegameBackground !== null) {
                this._freegameBackground.visible = true;
                this._background.visible = false;
            }
        },
        switchToNormal: function() {
            if (this._freegameBackground !== null) {
                this._freegameBackground.visible = false;
                this._background.visible = true;
            }
        },
        hide: function() {
            this.visible = false;
            for (var j = 0; j < this._payGroups.length; j++) {
                var payGroup = this._payGroups[j];
                for (var k = 0; k < payGroup.getPayItems().length; k++) {
                    var payItem = payGroup.getPayItems()[k];
                    payItem.hide();
                }
            }
        }
    });
});

// ../private/de/adp/web/paytable/external/mockCasino.js 
ig.baked = true;
ig.module("de.adp.web.paytable.external.mockCasino").requires("de.adp.web.paytable.canvasPaytable", "de.adp.web.dtos.response").defines(function() {
    MockCasino = ig.Class.extend({
        resourceProvider: null,
        soundPlayer: {
            isSoundFileAvailable: function(id) {
                return false;
            },
            soundOn: false
        },
        networkProvider: {
            lastResult: {
                payTable: function() {
                    return {};
                }
            }
        },
        casinoConfiguration: null,
        init: function() {
            this.resourceProvider = new MockResourceProvider();
        },
        addGameGui: function(gui) {
            if (typeof(gui) !== "undefined" && gui != null) {
                this.gameGui = gui;
            }
        },
        setCasinoConfiguration: function(config) {
            this.casinoConfiguration = config;
        },
        getCasinoConfiguration: function(key, scope) {
            return this.casinoConfiguration[key];
        },
        showSuppressedCasinoMessages: function(resumeFunction) {},
        openResponsibleGamingLink: function() {},
        getResponsibleGamingIconURL: function() {},
        isResponsibleGamingActive: function() {},
        retrieveSlotSessionData: function() {},
        closeGame: function() {},
        onPrepared: function(callBack, status, resizeCallback) {},
        getDisplaySize: function() {},
        getHelpContent: function() {},
        start: function(callBack) {},
        showLoadProgress: function(progress) {},
        maximizeGame: function() {},
        minimizeGame: function() {}
    });
});

// ../private/de/adp/web/paytable/paytableIDs.js 
ig.baked = true;
ig.module('de.adp.web.paytable.paytableIDs').requires('impact.impact').defines(function() {
    PaytableIDs = ig.Class.extend({});
    PaytableIDs.DATA_TO_EXTERNAL_PAYTABLE = "DATA_TO_EXTERNAL_PAYTABLE";
    PaytableIDs.LOG_TO_EXTERNAL_PAYTABLE = "LOG_TO_EXTERNAL_PAYTABLE";
    PaytableIDs.SHOW_LOG = "SHOW_LOG";
    PaytableIDs.HIDE_LOG = "HIDE_LOG";
    PaytableIDs.SWITCH_EXTERNAL_PAYTABLE = "SWITCH_EXTERNAL_PAYTABLE";
    PaytableIDs.INITIAL_DATA_TO_EXTERNAL_PAYTABLE = "INITIAL_DATA_TO_EXTERNAL_PAYTABLE";
    PaytableIDs.DATA_FROM_EXTERNAL_PAYTABLE = "DATA_FROM_EXTERNAL_PAYTABLE";
    PaytableIDs.TRANSLATIONS_TO_EXTERNAL_PAYTABLE = "TRANSLATIONS_TO_EXTERNAL_PAYTABLE";
    PaytableIDs.NOTIFICATION_UPDATE_PAYTABLE = "NOTIFICATION_UPDATE_PAYTABLE";
    PaytableIDs.OVERWRITE_DATA_TO_EXTERNAL_PAYTABLE = "OVERWRITE_DATA_TO_EXTERNAL_PAYTABLE";
    PaytableIDs.NOTIFICATION_SWITCH_APPEARANCE = "NOTIFICATION_SWITCH_APPEARANCE";
    PaytableIDs.NOTIFICATION_INITIATE_PAYTABLE = "NOTIFICATION_INITIATE_PAYTABLE";
    PaytableIDs.HEARTBEAT = "HEARTBEAT";
});

// ../private/de/adp/terminal/terminalConstants.js 
ig.baked = true;
ig.module('de.adp.terminal.terminalConstants').requires('impact.impact').defines(function() {
    TerminalConstants = ig.Class.extend({});
    TerminalConstants.USER_AGENT = "adp";
    TerminalConstants.TERMINAL_BASE_URL = "http://mega.web.de/cgi-bin/";
    TerminalConstants.STATUS_URL = "sbg-status?";
    TerminalConstants.GAME_STARTED_URL = "sbg-status?game_started=";
    TerminalConstants.GAME_CLOSED_URL = "sbg-status?game_closed=";
    TerminalConstants.OPEN_IN_2ND_SCREEN_URL = "sbg-status?open_in_2nd_screen=";
    TerminalConstants.SHOW_IN_2ND_SCREEN_URL = "sbg-status?content_loaded=";
    TerminalConstants.PAYTABLE_LOADED_URL = "sbg-status?content_loaded=";
});

// ../private/de/adp/terminal/terminalConnector.js 
ig.baked = true;
ig.module('de.adp.terminal.terminalConnector').requires('impact.impact', 'de.adp.terminal.terminalConstants').defines(function() {
    TerminalConnector = ig.Class.extend({
        facade: null,
        isStillLoading: false,
        lastStateString: "",
        statusTimer: null,
        init: function(facade) {
            this.facade = facade;
            this.sendStateToTerminal = this.sendStateToTerminal.bind(this);
        },
        broadcastGameState: function(stateString) {
            if (stateString == "")
                return;
            this.isStillLoading = true;
            var url = TerminalConstants.TERMINAL_BASE_URL + TerminalConstants.STATUS_URL + stateString;
            this.send(url);
            this.statusTimer = setTimeout(this.sendStateToTerminal, 2000);
        },
        onSuccess: function(e) {
            if (this.closeSuccess != null) {
                this.closeSuccess(e);
            }
            this.isStillLoading = false;
        },
        broadCastOpen2ndScreen: function(url) {
            var url = TerminalConstants.TERMINAL_BASE_URL + TerminalConstants.OPEN_IN_2ND_SCREEN_URL + encodeURIComponent(url);
            this.send(url);
        },
        broadCastShow2ndScreen: function(gamekey) {
            var url = TerminalConstants.TERMINAL_BASE_URL + TerminalConstants.SHOW_IN_2ND_SCREEN_URL + gamekey;
            this.send(url);
        },
        broadcastGameStart: function(gameKey) {
            var url = TerminalConstants.TERMINAL_BASE_URL + TerminalConstants.GAME_STARTED_URL + gameKey;
            this.send(url);
        },
        broadcastGameClose: function(gameKey, onSuccess) {
            this.closeSuccess = onSuccess;
            var url = TerminalConstants.TERMINAL_BASE_URL + TerminalConstants.GAME_CLOSED_URL + gameKey;
            this.send(url, this.closeSuccess);
        },
        send: function(url, callback) {
            var req = {
                url: '',
                payload: {},
                retryPolicy: 2,
                method: 'GET',
                header: 'application/x-www-form-urlencoded'
            };
            req.url = url;
            var response = this.sendSync(req.method, req.url, req.payload, req.header);
        },
        sendSync: function(method, url, payload, header) {
            var response = {},
                rHeader = header;
            $.ajax({
                beforeSend: function(request) {
                    request.setRequestHeader('Content-Type', rHeader);
                },
                url: url,
                data: payload,
                type: method,
                async: false,
                success: function(data) {
                    response.status = 200;
                    response.data = data;
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    response.status = textStatus;
                }
            });
            return response;
        },
        collectButtonStates: function(url) {},
        sendStateToTerminal: function() {
            if (this.statusTimer !== null) {
                clearInterval(this.statusTimer);
            }
            var states = this.facade.inputHandler.getCurrentlyBoundKeys();
            var stateString = "";
            var sendStateString = "";
            var fullStateString = "";
            var l = states.length;
            var s;
            for (var i = 0; i < l; i++) {
                s = states[i];
                var hardKey = this.getHardKeyID(s.key);
                if (hardKey !== "INVALID") {
                    stateString = stateString.concat("ButtonKey:" + hardKey + " isEnabled:" + s.isEnabled + " ");
                    var isOn;
                    if (s.isEnabled) {
                        isOn = "1";
                    } else {
                        isOn = "0";
                    }
                    var statePart = this.getHardKeyID(s.key) + "=" + isOn;
                    fullStateString = fullStateString.concat(statePart + "&");
                    if (this.lastStateString.indexOf(statePart) == -1)
                        sendStateString = sendStateString.concat(statePart + "&");
                }
            }
            sendStateString = sendStateString.substr(0, sendStateString.length - 1);
            if (this.facade.gameGui.runningInFullscreen) {
                sendStateString = sendStateString.concat("&" + "fullscreen=1");
                fullStateString = fullStateString.concat("fullscreen=1");
            } else {
                sendStateString = sendStateString.concat("&" + "fullscreen=0");
                fullStateString = fullStateString.concat("fullscreen=0");
            }
            if (fullStateString == this.lastStateString)
                return;
            this.broadcastGameState(fullStateString);
        },
        getHardKeyID: function(key) {
            switch (key) {
                case HardKey.START:
                    return "sh_start";
                case HardKey.BLACK:
                    return "sh_black";
                case HardKey.RED:
                    return "sh_red";
                case HardKey.LINES_DIVIDE:
                    return "sh_divide";
                case HardKey.MENUE:
                    return "sh_menue";
            }
            return "INVALID"
        }
    });
});

// ../private/de/adp/web/paytable/external/mockResourceProvider.js 
ig.baked = true;
ig.module("de.adp.web.paytable.external.mockResourceProvider").defines(function() {
    MockResourceProvider = ig.Class.extend({
        translations: null,
        translatableClasses: [],
        localeID: "",
        translationsReceived: false,
        setLocaleId: function(localeid) {
            if (typeof(localeid) !== "undefined" && !Array.isArray(localeid)) {
                this.localeID = localeid;
            } else {
                throw "No localeID specified";
            }
        },
        addTranslations: function(translations) {
            if (typeof(translations) !== "undefined" && typeof(translations) !== "string") {
                if (this.translations === null) {
                    this.translations = translations;
                } else {
                    this.concatTranslations(translations);
                }
                this.translationsReceived = true;
                if (this.translatableClasses.length > 0) {
                    this.callTranslateMethod();
                }
            }
        },
        registerTranslatableObject: function(classObj) {
            if (classObj !== null && classObj !== undefined) {
                if (typeof classObj.translate === "function") {
                    this.translatableClasses.push(classObj);
                } else {
                    throw "Translatable class " + classObj.toString() + " does not implement function translate!";
                }
                if (this.translationsReceived) {
                    classObj.translate(this);
                }
            }
        },
        callTranslateMethod: function() {
            for (var i = 0; i < this.translatableClasses.length; i++) {
                this.translatableClasses[i].translate(this);
            }
        },
        getLocaleId: function() {
            return this.localeID;
        },
        getString: function(requestString) {
            var translation = "";
            if (requestString === "currency_sign") {
                var curr = this.portal.getCurrency();
                if (curr !== undefined) {
                    return curr.currencySymbol;
                }
            }
            if (this.translations !== null && this.translations.hasOwnProperty(requestString)) {
                translation = this.translations[requestString];
            }
            return translation;
        },
        concatTranslations: function(translations) {
            for (var key in translations) {
                this.translations[key] = translations[key];
            }
        },
        getCurrencyOptions: function() {
            var curr = this.currencyOptions;
            return curr;
        }
    });
});

// ../private/de/adp/web/paytable/external/externalPaytable.js 
ig.baked = true;
ig.module("de.adp.web.paytable.external.externalPaytable").requires("impact.game", "de.adp.web.utils.logger", "de.adp.web.paytable.canvasPaytable", "de.adp.web.dtos.response", 'de.adp.web.gui.currencyFormatter', 'de.adp.web.paytable.external.mockCasino', 'de.adp.web.paytable.paytableIDs', 'de.adp.terminal.terminalConstants', 'de.adp.terminal.terminalConnector', 'de.adp.web.paytable.external.mockResourceProvider', 'impact.entity', 'plugins.ajax').defines(function() {
    ExternalPaytable = ig.Game.extend({
        terminalCommunicator: null,
        interCom: null,
        connectionEstablished: false,
        url: "",
        outputTFs: [],
        content: null,
        casino: null,
        facade: {
            gameGui: {
                registerResizableObject: function(o) {}
            }
        },
        init: function() {
            this.content = new ig.Node(0, 0);
            this.content.isRoot = true;
            this.casino = new MockCasino();
            currencyFormatter.casino = this.casino;
            this.terminalCommunicator = new TerminalConnector(null);
            this.createPaytableView();
            this.addPaytableView();
            this.outputLayer = new ig.Node(0, 0);
            this.content.addChild(this.outputLayer);
            this.tryReconnect = this.tryReconnect.bind(this);
            this.receiveTranslations = this.receiveTranslations.bind(this);
            this.receiveData = this.receiveData.bind(this);
            this.receiveLogs = this.receiveLogs.bind(this);
            this.showLogs = this.showLogs.bind(this);
            this.hideLogs = this.hideLogs.bind(this);
            this.switchVisualAppearance = this.switchVisualAppearance.bind(this);
            this.sendHeartbeat = this.sendHeartbeat.bind(this);
            this.setUpConnection();
            this.hideLogs();
        },
        update: function() {
            this.parent();
            this.content.update();
        },
        moveAllLogsUp: function() {
            var tf = null;
            for (var i = 0; i < this.outputTFs.length; i++) {
                tf = this.outputTFs[i];
                tf.pos.y = tf.pos.y - 14;
                if (tf.pos.y < -14) {
                    this.content.removeChild(tf);
                    this.outputTFs.shift();
                }
            }
        },
        draw: function() {
            this.parent();
            this.content.draw();
        },
        setUpConnection: function() {
            this.log("setting up connection to game");
            this.interCom = Intercom.getInstance();
            this.interCom.on(PaytableIDs.INITIAL_DATA_TO_EXTERNAL_PAYTABLE, this.receiveTranslations);
            this.interCom.on(PaytableIDs.DATA_TO_EXTERNAL_PAYTABLE, this.receiveData);
            this.interCom.on(PaytableIDs.OVERWRITE_DATA_TO_EXTERNAL_PAYTABLE, this.receiveData);
            this.interCom.on(PaytableIDs.LOG_TO_EXTERNAL_PAYTABLE, this.receiveLogs);
            this.interCom.on(PaytableIDs.SHOW_LOG, this.showLogs);
            this.interCom.on(PaytableIDs.HIDE_LOG, this.hideLogs);
            this.interCom.on(PaytableIDs.SWITCH_EXTERNAL_PAYTABLE, this.switchVisualAppearance);
            this.requestData();
            if (!this.translationsReceived) {
                this.log("connection not established yet");
                this.reconnectTimer = setInterval(this.tryReconnect, 500);
            }
        },
        getBGColor: function() {
            return "#000000";
        },
        addPaytableView: function() {
            this.content.addChild(this.ptView);
        },
        createPaytableView: function() {
            this.ptView = null;
        },
        requestData: function() {
            this.interCom.emit(PaytableIDs.DATA_FROM_EXTERNAL_PAYTABLE, this.url);
        },
        resize: function() {},
        tryReconnect: function(event) {
            this.log("trying to reconnect...");
            this.requestData();
            if (this.translationsReceived) {
                clearInterval(this.reconnectTimer);
            }
        },
        log: function(message) {
            var outputTF = null;
            if (this.outputTFs.length == 0) {
                outputTF = new TextBox(0, 0, 1000, 14);
            } else {
                var lastTF = this.outputTFs[this.outputTFs.length - 1];
                outputTF = new TextBox(0, lastTF.pos.y + 14, 500, 14);
            }
            outputTF.setTextFormat(12, "Arial", "normal", "#FFFFFF", "left", "top");
            outputTF.useSharperCanvas = false;
            this.outputLayer.addChild(outputTF);
            this.outputTFs.push(outputTF);
            outputTF.setText(message);
            if (outputTF.pos.y > 500) {
                this.moveAllLogsUp();
            }
        },
        showLogs: function() {
            this.showLog = true;
            this.outputLayer.visible = true;
        },
        hideLogs: function() {
            this.showLog = false;
            this.outputLayer.visible = false;
        },
        switchToFreeMode: function(json) {
            if (this.isInFreeMode) {
                return;
            }
            this.isInFreeMode = true;
            this.ptView.switchToFree();
            $('#terminal-paytable-frame').removeClass('terminal-paytable-frame-bg');
            $('#terminal-paytable-frame').addClass('terminal-paytable-frame-bg-free');
        },
        switchToNormalMode: function(json) {
            if (!this.isInFreeMode)
                return;
            this.isInFreeMode = false;
            this.ptView.switchToNormal();
            $('#terminal-paytable-frame').removeClass('terminal-paytable-frame-bg-free');
            $('#terminal-paytable-frame').addClass('terminal-paytable-frame-bg');
        },
        receiveTranslations: function(json) {
            if (this.translationsReceived) {
                return;
            }
            this.log("translations received.");
            var data = JSON.parse(json);
            this.scanTranslations(data);
            this.casino.resourceProvider.currencyOptions = data.currencyConfig;
            if (!data.currencyConfig) {
                this.translationsReceived = false;
            }
            var dummy = {};
            dummy.lastResponse = data;
            this.parseForFreegamesState(dummy);
            if (this.translationsReceived && this.modelFilled && !this.broadcastedPaytableLoadedYet) {
                clearInterval(this.reconnectTimer);
                this.broadcastPaytableLoaded(this.gameKey);
            }
            if (this.waitingData) {
                this.receiveData(this.waitingData);
            } else {
                this.receiveData(JSON.stringify(data));
            }
            this.translate(this.casino.resourceProvider);
        },
        scanTranslations: function(data) {
            this.translationsReceived = true;
            var translations = data.translations;
            this.casino.resourceProvider.addTranslations(translations);
            var localeID = data.locale;
            this.casino.resourceProvider.localeID = localeID;
        },
        receiveData: function(data) {
            if (!this.translationsReceived) {
                this.waitingData = data;
                return;
            }
            this.log("data received...");
            var rawObject = JSON.parse(data);
            if (rawObject.customData) {
                this.extractGameSpecificData(rawObject.customData);
            }
            if (!this.modelFilled) {
                var dto = rawObject.payTable;
                this.createPaytableModel(dto);
                this.modelFilled = true;
                clearInterval(this.reconnectTimer);
                this.checkSampleRate();
            }
            this.setModelToView(this.ptModel, rawObject.stakePerSelection, rawObject.stake);
            if (this.translationsReceived && this.modelFilled && !this.broadcastedPaytableLoadedYet) {
                this.log("send content loaded...");
                this.broadcastPaytableLoaded(this.gameKey);
            }
        },
        receiveLogs: function(data) {
            this.log(data);
        },
        checkSampleRate: function() {
            try {
                if (typeof AudioContext !== 'undefined') {
                    var ctx = new AudioContext();
                } else if (typeof webkitAudioContext !== 'undefined') {
                    var ctx = new webkitAudioContext();
                }
                this.log("current samplerate is " + ctx.sampleRate);
            } catch (e) {
                this.log("could not create an audioContext");
            }
        },
        parseForFreegamesState: function(rawObject) {
            var respData = rawObject.lastResponse;
            if (respData != null) {
                var resp = new ActionResponse(respData);
                if (resp.gameResult.freeGameRound > 0 && !this.isInFreeMode) {
                    this.switchToFreeMode(JSON.stringify(respData));
                } else if (resp.gameResult.freeGamesTotal == 0 && this.isInFreeMode && resp.gameResult.totalWonFreegames == 0) {
                    this.switchToNormalMode(JSON.stringify(respData));
                }
            }
        },
        extractGameSpecificData: function(rawObject) {},
        setModelToView: function(ptModel, stakePerLine, totalStake) {
            this.ptView.setPaytableModel(ptModel);
            this.ptView.setStake(stakePerLine, totalStake);
        },
        createPaytableModel: function(paytableData) {
            this.ptModel = paytableData;
        },
        broadcastPaytableLoaded: function(gameKey) {
            this.terminalCommunicator.broadCastShow2ndScreen(gameKey);
            this.broadcastedPaytableLoadedYet = true;
            this.startHealthTimer();
        },
        startHealthTimer: function() {
            setInterval(this.sendHeartbeat, 30000);
        },
        sendHeartbeat: function() {
            this.interCom.emit(PaytableIDs.HEARTBEAT, this.url);
        },
        translate: function() {
            if (!this.translationsReceived) {
                return;
            }
            this.ptView.translate(this.casino.resourceProvider);
        },
        setGamekey: function(val) {
            if (val.length > 0) {
                this.gameKey = val;
            }
        },
        switchVisualAppearance: function(data) {
            var rawObject = JSON.parse(data);
            var gameMode = rawObject.gameMode;
            if (gameMode == "FREEGAME")
                this.switchToFreeMode(data);
            if (gameMode == "BASEGAME")
                this.switchToNormalMode(data);
        },
        registerResizableObject: function(o) {},
        getURL: function() {
            var url = window.location.href;
            return url.replace("paytable.html", "");
        },
    });
});

// ../private/de/adp/web/paytable/external/externalPaytableLauncher.js 
ig.baked = true;
ig.module("de.adp.web.paytable.external.externalPaytableLauncher").requires("de.adp.web.paytable.external.externalPaytable", "de.adp.web.dtos.response", "de.adp.web.utils.logger", 'de.adp.web.resources.resourceLoader').defines(function() {
    ExternalPaytableLauncher = ig.Class.extend({
        init: function() {
            ig.logger = new Logger();
            this.preload();
        },
        getAssetsToPreload: function() {
            return [];
        },
        preload: function() {
            var assets = this.getAssetsToPreload();
            for (var i = 0; i < assets.length; i++) {
                var cresImg = new ig.Image(assets[i]);
            }
        },
        launch: function() {
            var width = 920;
            var height = 530;
            var screenWidth = $(window).width();
            var screenHeight = $(window).height();
            var scaleRatio = screenHeight / height;
            var adjustedSize = this.calculateNewDimensionsIfBoundaryViolation(width * scaleRatio, height * scaleRatio, screenWidth, screenHeight);
            $('#display-layer').after('<canvas id="canvas" style="margin: 0px auto;top:0px; height:' + adjustedSize.height + 'px;width:' + adjustedSize.width + 'px;"></canvas>');
            $('#display-layer').after('<canvas id="canvasText" style="margin: 0px auto;top:0px; height:' + adjustedSize.height + 'px;width:' + adjustedSize.width + 'px;"></canvas>');
            $('#display-layer').after('<canvas id="resizableTextCanvas" style="margin: 0px auto;top:0px; height:' + adjustedSize.height + 'px;width:' + adjustedSize.width + 'px;"></canvas>');
            ig.main('#canvas', this.getPaytableClass(), this.casino, null, 30, 920, 530, 1, ig.Loader, "#000000", false);
            ig.system.stageX = 0;
            ig.system.stageY = 0;
            ig.system.stageWidth = screenWidth;
            ig.system.stageHeight = screenHeight;
            ig.system.isHDRequired = false;
            ig.system.gameWidth = width;
            ig.system.gameHeight = height;
            ig.system.isHDSupported = false;
            ig.system.stageScale = scaleRatio;
            ig.system.resizableTextCanvas.width = adjustedSize.width;
            ig.system.resizableTextCanvas.height = adjustedSize.height;
        },
        calculateNewDimensionsIfBoundaryViolation: function(calculatedWidth, calculatedHeight, availWidth, availHeight) {
            "use strict";
            var sc = 1;
            if (calculatedHeight >= parseInt(availHeight)) {
                sc = parseInt(availHeight) / calculatedHeight;
                calculatedHeight *= sc;
                calculatedWidth *= sc;
            }
            if (calculatedWidth >= parseInt(availWidth)) {
                sc = parseInt(availWidth) / calculatedWidth;
                calculatedHeight *= sc;
                calculatedWidth *= sc;
            }
            return {
                width: calculatedWidth,
                height: calculatedHeight,
                scaleFactor: sc
            };
        },
        getPaytableClass: function() {}
    });
});

// ../private/de/adp/web/launcher.js 
ig.baked = true;
ig.module('de.adp.web.launcher').requires('de.adp.web.casino.edictCasino', 'de.adp.web.resources.resourceLoader', 'de.adp.web.gui.currencyFormatter', 'de.adp.web.gameRoot', 'de.adp.web.sound.sound', 'de.adp.web.sound.soundSprite', 'de.adp.web.dtos.response', 'de.adp.web.casino.adpCasino', 'impact.font', 'de.adp.web.dtos.initResponse', "de.adp.web.gui.elements.overlayBox", "de.adp.web.animation.sequenceGenerator", "de.adp.web.utils.logger", "de.adp.web.paytable.external.externalPaytableLauncher").defines(function() {
    Launcher = ig.Class.extend({
        _coreVersion: "1.8-SNAPSHOT",
        casino: {},
        manifest: null,
        gameData: null,
        initResult: null,
        translations: [],
        gameVariant: "",
        localeID: "en",
        help: undefined,
        init: function() {
            ig.logger = new Logger();
            this.casinoInitialized = this.casinoInitialized.bind(this);
            this.initResultReady = this.initResultReady.bind(this);
            this.executeCommand = this.executeCommand.bind(this);
            this.loadSound = this.loadSound.bind(this);
        },
        isHDRequired: function(size) {
            if (size.width >= 1920 && size.height >= 1080) {
                return true;
            }
            return false;
        },
        launch: function() {
            if (typeof ADPC !== "undefined" && ADPC !== undefined && ADPC !== null && typeof(ADPC.portal) !== "undefined") {
                this.casino = new AdpCasino(ADPC, this.usesAsynchronousRequests());
            } else if (this.runsWithBluePrint()) {
                this.casino = new BluePrintCasino();
            } else if (this.runsWithEdict()) {
                this.casino = new EdictCasino(ECG.api, this.usesAsynchronousRequests());
            }
            this.casino.soundPlayer = this.createSoundPlayer();
            this.casino.buttonProvider = new ButtonProvider();
            this.casino.buttonProvider.casino = this.casino;
            this.casino.onPrepared(this.casinoInitialized, this.executeCommand, ig.System.rerenderHTMLLayout);
            if (window.screen.orientation.lock) {
                var p = window.screen.orientation.lock("landscape");
                p.then(this.onLockSuccesful);
                p.catch(this.onLockFailed);
            }
        },
        onLockSuccesful: function(succ) {
            console.log("successfully locked to landscape");
        },
        onLockFailed: function(error) {
            console.log("screen orientation lock failed");
        },
        runsWithEdict: function() {
            var edict = typeof(ECG) !== "undefined" && ECG !== undefined && ECG !== null && typeof(ECG.api) !== "undefined";
            if (edict) {
                return !this.isEmptyObject(ECG.api);
            }
            return edict;
        },
        isEmptyObject: function(o) {
            for (var prop in o) {
                if (o.hasOwnProperty(prop))
                    return false;
            }
            return JSON.stringify(o) === JSON.stringify({});
        },
        runsWithBluePrint: function() {
            return false;
        },
        usesAsynchronousRequests: function() {
            return true;
        },
        createSoundPlayer: function() {
            return new SoundPlayer();
        },
        casinoInitialized: function() {
            this.casino.displayProvider = new DisplayProvider();
            this.casino.displayProvider.casino = this.casino;
            this.casino.resourceProvider.registerTranslatableObject(this.casino.displayProvider);
            this.casino.showLoadProgress(0);
            this.casino.portal.showLoadProgressDisplay();
            var size = this.casino.getDisplaySize();
            var realHeight = size.height;
            var realWidth = size.width;
            $('body').css('width', realWidth + 'px');
            $('body').css('height', realHeight + 'px');
            this.casino.displayProvider.stageWidth = realWidth;
            this.casino.displayProvider.stageHeight = realHeight;
            var help = this.preprocessHelpContent(this.casino.getHelpContent());
            this.help = help;
            if (currencyFormatter !== undefined) {
                currencyFormatter.casino = this.casino;
            }
            this.casino.soundPlayer.registerSounds(this.createSounds());
            this.casino.soundPlayer.registerCoreSounds(this.createCoreSounds());
            this.casino.start(this.initResultReady);
            this.casino.soundPlayer.startLoadSound();
        },
        preprocessHelpContent: function(help) {
            if (help.find !== undefined) {
                help.find('.csc-textpic-single-image').each(function() {
                    $(this).css('width', '90%');
                    $(this).children('img').each(function() {
                        $(this).css('width', '100%');
                        $(this).css('height', 'auto');
                    });
                });
                help.find('img + br').remove();
            }
            return help;
        },
        getClearColor: function() {
            return "#FFF";
        },
        initResultReady: function(result) {
            if (typeof(result) === "string") {
                result = JSON.parse(result);
            }
            this.initResult = result;
            var initResp = new InitResponse(result);
            this.casino.networkProvider.lastResult = initResp;
            this.casino.resourceProvider.addTranslations(result.translations);
            this.translateEverything();
            this.launchGame();
        },
        needsPaytableButton: function() {
            return true;
        },
        turboSpinPossible: function() {
            return this.casino.getCasinoConfiguration("MINIMAL_GAMERUN_DURATION") < 200 && this.casino.getCasinoConfiguration('ENABLE_SKIP_REELSPIN') && this.casino.getCasinoConfiguration('ENABLE_QUICKSPIN')
        },
        launchGame: function() {
            $("#header").empty();
            var fullscreenPossible = this.casino.getCasinoConfiguration('SHOW_FULLSCREEN_BUTTON'),
                closePossible = this.casino.getCasinoConfiguration('SHOW_CLOSE_BUTTON'),
                helpPossible = this.casino.getCasinoConfiguration('SHOW_HELP_BUTTON'),
                paytablePossible = this.casino.getCasinoConfiguration('SHOW_PAYTABLE_BUTTON') && this.needsPaytableButton(),
                showButtonBar = this.casino.getCasinoConfiguration('SHOW_BUTTON_BAR'),
                showMoneyValueControl = this.casino.getCasinoConfiguration('SHOW_MONEY_VALUE_SELECTION_CONTROL'),
                showGameMenuBar = this.casino.getCasinoConfiguration('SHOW_GAME_MENUE_BAR'),
                switchSidesPossible = false,
                volumePossible = this.casino.getCasinoConfiguration('SHOW_VOLUME_CONTROL'),
                turboSpinPossible = this.turboSpinPossible(),
                volumeBarPossible = true;
            exitPaytableBtnPossible = this.casino.getCasinoConfiguration('SHOW_PAYTABLE_EXIT_BUTTON');
            exitHelpBtnPossible = this.casino.getCasinoConfiguration('SHOW_HELP_EXIT_BUTTON');
            $("<div>").load("private/sites/desktop.html", function() {
                $("#main").append($(this).find(".selector-dark-background"));
                $("#main").append($(this).find("#depotDisplay"));
                $("#header").append($(this).find(".clock-area"));
                $("#header").append($(this).find("#respGaming-area"))
                $("#header").append($(this).find("#message-area"));
                $("#header").append($(this).find("#gameMenu"));
                var settingsParent = "#gameMenu";
                if (ig.ua.mobile) {
                    settingsParent = "#mobile-menu-buttons";
                    switchSidesPossible = true;
                    fullscreenPossible = false;
                    volumeBarPossible = false;
                    $("#main").append($(this).find("#mobile-menu-container"));
                }
                if (turboSpinPossible) {
                    $(settingsParent).append($(this).find("#turboSpinButton"));
                }
                if (paytablePossible) {
                    $(settingsParent).append($(this).find("#paytableButton"));
                    if (exitPaytableBtnPossible) {
                        $("#main").prepend($(this).find("#add-close-paytable-btn"));
                    }
                } else {
                    $("#main").prepend($(this).find("#add-close-paytable-btn"));
                }
                if (helpPossible) {
                    $(settingsParent).append($(this).find("#helpButton"));
                    if (exitHelpBtnPossible) {
                        $("#help-box").prepend($(this).find("#add-close-help-btn"));
                    }
                } else {
                    $("#help-box").prepend($(this).find("#add-close-help-btn"));
                }
                if (fullscreenPossible) {
                    $(settingsParent).append($(this).find("#fullScreenWrapper"));
                }
                if (switchSidesPossible) {
                    $(settingsParent).append($(this).find("#controlSwitchButton"));
                }
                if (!showButtonBar) {
                    $(".button-bar").css('visibility', 'hidden');
                }
                if (!showMoneyValueControl) {
                    $(".betting-controls").css('visibility', 'hidden');
                }
                if (!showGameMenuBar) {}
                if (volumePossible) {
                    $(settingsParent).append($(this).find("#soundWrapper"));
                }
                if (closePossible) {
                    $(settingsParent).append($(this).find("#close-game-btn"));
                    $("#close-game-btn").addClass('desktopGameMenu-close-desktop');
                }
                $("#header").addClass('desktopGameMenu-background');
                if (ig.ua.mobile) {
                    $("#paytableButton").removeClass('desktopGameMenu-button-vertical-centered');
                    $("#helpButton").removeClass('desktopGameMenu-button-vertical-centered');
                    $("#controlSwitchButton").removeClass('desktopGameMenu-button-vertical-centered');
                    $("#soundWrapper").removeClass('desktopGameMenu-button-vertical-centered');
                    $("#close-game-btn").removeClass('desktopGameMenu-button-vertical-centered');
                    $("#paytableButton").addClass('desktopGameMenu-button-mobile');
                    $("#helpButton").addClass('desktopGameMenu-button-mobile');
                    $("#controlSwitchButton").addClass('desktopGameMenu-button-mobile');
                    $("#soundWrapper").addClass('desktopGameMenu-button-mobile');
                    $("#close-game-btn").addClass('desktopGameMenu-button-mobile');
                    var offSetToHide = $("#mobile-menu-buttons").width();
                    $("#mobile-menu-container").offset({
                        left: (-1 * offSetToHide)
                    });
                    var topOffset = ($("#mobile-menu-container").height() - $('#mobile-menu-buttons').height()) / 2;
                    $('#mobile-menu-buttons').css('top', topOffset);
                    $('#mobile-menu-container').css('position', 'absolute');
                }
                $("[data-role=page]").enhanceWithin();
                if (volumeBarPossible) {
                    $("#header").append($(this).find("#volumeWrapper"));
                    $('#volumeSlider').rangeslider({
                        polyfill: false
                    });
                } else {
                    $('#volumeWrapper').remove();
                }
                $("[data-role=footer]").toolbar("option", "hideDuringFocus", "button");
                $('body').css('font-size', "10px !important");
            });
            var size = this.casino.getDisplaySize();
            var realHeight;
            realHeight = size.height - $("#header").outerHeight();
            if (navigator.userAgent.match(/iPad;.*CPU.*OS 7_\d/i)) {
                realHeight = 672;
            }
            var realWidth = size.width;
            if (realHeight === undefined) {
                realHeight = this.getGameHeight();
            }
            if (realWidth === undefined) {
                realWidth = this.getGameWidth();
            }
            var coreResources = this.getCoreResources();
            for (var i = 0; i < coreResources.length; i++) {
                var cresImg = new ig.Image(coreResources[i]);
            }
            var resources = this.getResources(this.isHDRequired({
                width: realWidth,
                height: realHeight
            }));
            for (var j = 0; j < resources.length; j++) {
                var resImg = new ig.Image(resources[j]);
            }
            var footerWidth = 1920;
            var footerHeight = 143;
            var footerHeightScaled = footerHeight * (parseInt(realWidth) / footerWidth);
            var canvasRatio = 0;
            var headerHeight = ig.ua.mobile ? 75 : 55;
            var headerHeightScaled = headerHeight * (parseInt(realWidth) / footerWidth);
            canvasRatio = ((parseInt(realHeight) - footerHeightScaled - headerHeightScaled)) / this.getGameHeight();
            var height = this.getGameHeight() * canvasRatio;
            var width = this.getGameWidth() * canvasRatio;
            var topOffset = 0;
            var leftOffset = 0;
            var sc = 1;
            if (height >= parseInt(realHeight)) {
                sc = parseInt(realHeight) / height;
                height *= sc;
                width *= sc;
            }
            topOffset = headerHeight * (parseInt(realWidth) / footerWidth);
            leftOffset = parseInt(realWidth) - width;
            leftOffset = Math.floor(leftOffset / 2);
            if (this.help !== undefined) {
                var helpBox = new OverlayBox('help-box', Math.ceil(width), Math.ceil(height), leftOffset, topOffset, "rgba(50,50,50,0.9)");
                helpBox.setContent(this.help);
                $('#main').prepend(helpBox.getView());
                $(helpBox.getView()).css('font-size', '3em');
                $(helpBox.getView()).hide();
            }
            $('#display-layer').after('<canvas id="canvas" tabindex=0 style="margin: 0px auto;top:' + topOffset + 'px; height:' + height + 'px;width:' + width + 'px;"></canvas>');
            $('#display-layer').after('<canvas id="canvasText" style="margin: 0px auto;top:' + topOffset + 'px; height:' + height + 'px;width:' + width + 'px;"></canvas>');
            $('#display-layer').after('<canvas id="resizableTextCanvas" style="margin: 0px auto;top:' + topOffset + 'px; height:' + height + 'px;width:' + width + 'px;"></canvas>');
            $('#riskladder-page').css('height', height + 'px');
            if (ig.System.isWebGlSupported() && this.isWebGLPossible()) {
                var cvs2 = document.getElementById("canvas");
                WebGL2D.enable(cvs2);
            }
            $("#cover").remove();
            ig.main('#canvas', GameRoot, this.getGameClass(), this.casino, this.getGameFrameRate(), this.getGameWidth(), this.getGameHeight(), this.getGameScale(), ResourceLoader, this.getClearColor(), this.isWebGLPossible());
            ig.system.stageX = $("#canvas").offset().left;
            ig.system.stageY = topOffset;
            ig.system.stageWidth = realWidth;
            ig.system.stageHeight = realHeight;
            ig.system.isHDRequired = this.isHDRequired({
                width: realWidth,
                height: realHeight
            });
            ig.system.gameWidth = width;
            ig.system.gameHeight = height;
            ig.system.isHDSupported = this.supportsHDResolution();
            ig.system.stageScale = sc * canvasRatio;
            ig.system.originalGameWidth = this.getGameWidth();
            ig.system.originalGameHeight = this.getGameHeight();
            if (ig.system.isHDSupported && ig.system.isHDRequired) {
                ig.system.hdDisplayScaleFactor = ig.system.HD_SCALE_FACTOR;
            }
        },
        getGameFrameRate: function() {
            return 30;
        },
        getGameWidth: function() {
            if (this.supportsHDResolution() && ig.system.isHDRequired) {
                return 1920;
            }
            return 920;
        },
        getGameHeight: function() {
            if (this.supportsHDResolution() && ig.system.isHDRequired) {
                return 870;
            }
            return 529;
        },
        getGameScale: function() {
            return 1;
        },
        getGameClass: function() {
            throw "getGameClass: No game Class specified!";
        },
        getGameName: function() {
            throw "getGameName: No game name returned!";
        },
        supportsHDResolution: function() {
            return false;
        },
        isWebGLPossible: function() {
            "use strict";
            return true;
        },
        executeCommand: function(command) {
            if (typeof ig.game !== null) {
                if ((ig.game.isPaused || ig.game.facade.isBlockedByPopUp) && !(command == "resume" || command == "updateDepot")) {
                    return;
                }
                switch (command) {
                    case "pause":
                        if (ig.game.facade) {
                            this.soundMustBeReenabledAfterPause = ig.game.facade.casino.soundPlayer.soundOn;
                            if (this.soundMustBeReenabledAfterPause) {
                                ig.game.facade.sendNotification(GameActionIDs.DISABLE_SOUND);
                            }
                        }
                        ig.game.pauseGame();
                        break;
                    case "resume":
                        if (ig.game.isPaused) {
                            if (ig.game.facade) {
                                if (this.soundMustBeReenabledAfterPause) {
                                    ig.game.facade.sendNotification(GameActionIDs.ENABLE_SOUND);
                                }
                            }
                            ig.game.resumeGame();
                        }
                        break;
                    case "updateDepot":
                        this.casino.displayProvider.updateDepotDisplay(this.casino.depotProvider.getDepotBalanceForDisplay(), this.casino.depotProvider.getLimitedDepotBalance());
                        break;
                    case "disableAudio":
                        if (ig.game.facade) {
                            ig.game.facade.sendNotification(GameActionIDs.DISABLE_SOUND);
                        }
                        break;
                    case "enableAudio":
                        if (ig.game.facade) {
                            ig.game.facade.sendNotification(GameActionIDs.ENABLE_SOUND);
                        }
                        break;
                    case "toggleHelp":
                        if (ig.game.facade && ig.game.facade.isHelpAllowed()) {
                            ig.game.facade.gameGui.toggleHelp();
                        }
                        break;
                    case "showHelp":
                        if (ig.game.facade && ig.game.facade.isHelpAllowed()) {
                            ig.game.facade.gameGui.showHelp();
                        }
                        break;
                    case "closeHelp":
                        if (ig.game.facade) {
                            ig.game.facade.gameGui.hideHelp();
                        }
                        break;
                    case "showPaytable":
                        if (ig.game.facade && this.needsPaytableButton() && ig.game.facade.isPaytableAllowed()) {
                            ig.game.facade.gameGui.showPaytable();
                        }
                        break;
                    case "closePaytable":
                        if (ig.game.facade && this.needsPaytableButton()) {
                            ig.game.facade.gameGui.hidePaytable();
                        }
                        break;
                    case "togglePaytable":
                        if (ig.game.facade && this.needsPaytableButton() && ig.game.facade.isPaytableAllowed()) {
                            ig.game.facade.gameGui.togglePaytable();
                        }
                        break;
                    case "startGame":
                        if (ig.game.facade) {
                            if (!ig.game.facade.autoPlay._autoSpinActive && ig.game.facade.currentGameRoundPhase === GameRoundPhase.PLACE_BET) {
                                ig.game.facade.sendNotification(GameActionIDs.PLAY);
                            }
                            if (!ig.game.facade.autoPlay._autoSpinActive && ig.game.facade.currentGameRoundPhase === GameRoundPhase.RISK_CHOICE) {
                                ig.game.facade.sendNotification(GameActionIDs.COLLECT_AND_SPIN);
                            }
                        }
                        break;
                    case "pauseAutoPlay":
                        if (ig.game.facade) {
                            if (ig.game.facade.autoPlay._autoSpinActive) {
                                ig.game.facade.sendNotification(GameActionIDs.PAUSE_AUTOPLAY);
                            }
                        }
                        break;
                    case "resumeAutoPlay":
                        if (ig.game.facade) {
                            if (!ig.game.facade.autoPlay._autoSpinActive && ig.game.facade.currentGameRoundPhase === "PLACE_BETS") {
                                ig.game.facade.sendNotification(GameActionIDs.START_AUTOPLAY);
                            }
                        }
                        break;
                }
            }
        },
        getCoreResources: function() {
            var font = new ig.Font('private/de/adp/web/assets/fonts/winNumberFont2.png');
            var res = [];
            if (ig.ua.mobile) {
                res = ['private/de/adp/web/assets/misc/back_bottom.png', 'private/de/adp/web/assets/misc/reel_glow_140x128.png', 'private/de/adp/web/assets/misc/back_top.png', 'private/de/adp/web/assets/buttons/button_blue.png', 'private/de/adp/web/assets/buttons/button_green.png', 'private/de/adp/web/assets/buttons/button_grey.png', 'private/de/adp/web/assets/buttons/button_red.png', 'private/de/adp/web/assets/buttons/buttons_einstell.png', 'private/de/adp/web/assets/buttons/buttons_end.png', 'private/de/adp/web/assets/buttons/buttons_info.png', 'private/de/adp/web/assets/buttons/buttons_scale.png', 'private/de/adp/web/assets/buttons/button_cards_mobile.png', 'private/de/adp/web/assets/buttons/button_cards_black_mobile.png', 'private/de/adp/web/assets/buttons/button_cards_red_mobile.png', 'private/de/adp/web/assets/buttons/button_collect_mobile.png', 'private/de/adp/web/assets/buttons/button_divide_mobile.png', 'private/de/adp/web/assets/buttons/button_leiter_mobile.png', 'private/de/adp/web/assets/buttons/button_risiko_mobile.png', 'private/de/adp/web/assets/buttons/button_start_mobile.png', 'private/de/adp/web/assets/buttons/button_stop_mobile.png', 'private/de/adp/web/assets/riskCards/ris_herz.png', 'private/de/adp/web/assets/riskCards/ris_karo.png', 'private/de/adp/web/assets/riskCards/ris_kreuz.png', 'private/de/adp/web/assets/riskCards/ris_pik.png', 'private/de/adp/web/assets/riskCards/card_backface.png', 'private/de/adp/web/assets/riskCards/ris_back.jpg', 'private/de/adp/web/assets/misc/rotation2.png', 'private/de/adp/web/assets/riskCards/ris_winframe.png'];
            } else {
                res = ['private/de/adp/web/assets/misc/back_bottom.png', 'private/de/adp/web/assets/misc/reel_glow_140x128.png', 'private/de/adp/web/assets/misc/back_top.png', 'private/de/adp/web/assets/buttons/button_blue.png', 'private/de/adp/web/assets/buttons/button_green.png', 'private/de/adp/web/assets/buttons/button_grey.png', 'private/de/adp/web/assets/buttons/button_red.png', 'private/de/adp/web/assets/buttons/buttons_einstell.png', 'private/de/adp/web/assets/buttons/buttons_end.png', 'private/de/adp/web/assets/buttons/buttons_info.png', 'private/de/adp/web/assets/buttons/buttons_scale.png', 'private/de/adp/web/assets/buttons/button_cards.png', 'private/de/adp/web/assets/buttons/button_cards_black.png', 'private/de/adp/web/assets/buttons/button_cards_red.png', 'private/de/adp/web/assets/buttons/button_collect.png', 'private/de/adp/web/assets/buttons/button_divide.png', 'private/de/adp/web/assets/buttons/button_ladder.png', 'private/de/adp/web/assets/buttons/button_risiko.png', 'private/de/adp/web/assets/buttons/button_start.png', 'private/de/adp/web/assets/buttons/button_stop.png', 'private/de/adp/web/assets/riskCards/ris_herz.png', 'private/de/adp/web/assets/riskCards/ris_karo.png', 'private/de/adp/web/assets/riskCards/ris_kreuz.png', 'private/de/adp/web/assets/riskCards/ris_pik.png', 'private/de/adp/web/assets/riskCards/card_backface.png', 'private/de/adp/web/assets/riskCards/ris_back.jpg', 'private/de/adp/web/assets/misc/rotation2.png', 'private/de/adp/web/assets/riskCards/ris_winframe.png'];
            }
            return res;
        },
        getResources: function(isHDRequired) {
            throw "getResources: No resources defined! Has this game no Graphics?";
        },
        createSounds: function() {
            throw "createSounds: No sounds defined! Has this game no Sound?";
        },
        createCoreSounds: function() {
            var soundSprite = new SoundSprite();
            soundSprite.registerSoundsFromJSON({
                "urls": ["private/de/adp/web/assets/sounds/coreSoundSprite.mp3", "private/de/adp/web/assets/sounds/coreSoundSprite.m4a", "private/de/adp/web/assets/sounds/coreSoundSprite.webm", "private/de/adp/web/assets/sounds/coreSoundSprite.opus"],
                "sprite": {
                    "Hold_On": [0, 141, false],
                    "Maxbet_Button": [391, 1610, false],
                    "SFX_Autoplay_Off": [2251, 853, false],
                    "SFX_Autoplay_On": [3354, 841, false],
                    "SFX_BlinkDown1": [4445, 803, false],
                    "SFX_BlinkDown2": [5498, 800, false],
                    "SFX_BlinkUp1": [6548, 802, false],
                    "SFX_BlinkUp2": [7600, 801, false],
                    "SFX_Card_Divide": [8651, 1450, false],
                    "SFX_Card_LoopEnd": [10351, 863, false],
                    "SFX_Card_Lost": [11464, 668, false],
                    "SFX_Cards_BgLoop": [12382, 4800, true],
                    "SFX_Cards_Collect": [17432, 1817, false],
                    "SFX_Cards_Won": [19499, 1788, false],
                    "SFX_ChooseGambleBgLoop": [21537, 3696, true],
                    "SFX_Collect": [25483, 713, false],
                    "SFX_GambleBgLoop": [26446, 14096, true],
                    "SFX_GambleCollect": [40792, 2409, false],
                    "SFX_GambleDivide": [43451, 705, false],
                    "SFX_GambleLoose": [44406, 945, false],
                    "SFX_GamblePlayoff": [45601, 2061, false],
                    "SFX_GambleTop": [47912, 14350, false],
                    "SFX_LadderDown": [62512, 1130, false],
                    "SFX_LadderUp": [63892, 1220, false],
                    "SFX_RaiseBet": [65362, 228, false],
                    "SFX_ReelStop": [65840, 454, false],
                    "SFX_SettingsButton": [66544, 200, false],
                    "SFX_WheelLock": [66994, 342, false]
                }
            });
            return soundSprite;
        },
        loadSound: function() {
            this.casino.soundPlayer.startLoadSound();
        },
        translateEverything: function() {
            var translatableElements = $("*[translatable]");
            for (var i = 0; i < translatableElements.length; i++) {
                var key = translatableElements[i].getAttribute("translatable");
                var dataRole = translatableElements[i].getAttribute("data-role");
                var needsUpperCase = translatableElements[i].getAttribute('data-uppercase');
                if (dataRole === "button") {
                    translatableElements[i].innerHTML = '<span class="ui-btn-inner"><span class="ui-btn-text">' + this.casino.resourceProvider.getString(key) + '</span></span>';
                } else if (needsUpperCase) {
                    translatableElements[i].innerHTML = this.casino.resourceProvider.getString(key).toUpperCase();
                } else {
                    translatableElements[i].innerHTML = this.casino.resourceProvider.getString(key);
                }
            }
            currencyFormatter.translate(this.casino.resourceProvider);
        },
        now: function() {
            var performance = window.performance || {};
            performance.now = (function() {
                return performance.now || performance.webkitNow || performance.msNow || performance.oNow || performance.mozNow || function() {
                    return Date.now();
                };
            })();
            return performance.now();
        },
        isLaunchedOnDesktop: function() {
            return !ig.ua.mobile;
        },
        onResize: function(newWidth, newHeight) {
            ig.System.rerenderHTMLLayout(newWidth, newHeight);
        },
        onCommunicationReady: function() {
            this.casinoInitialized();
        },
        onCommand: function(command) {
            if (command == "updateBalance") {
                command = "updateDepot";
            }
            this.setGameStatus(command);
        }
    });
});




// ../private/de/adp/web/payline/lineGraphic.js 
ig.baked = true;
ig.module("de.adp.web.payline.lineGraphic").requires("impact.node", 'impact.image').defines(function() {
    LineGraphic = ig.Node.extend({
        _lineGfx: null,
        init: function(lineGfxPath) {
            this._lineGfx = new ig.Image(lineGfxPath);
            this.addChild(this._lineGfx);
        }
    });
});

// ../private/de/adp/web/payline/lineContent.js 
ig.baked = true;
ig.module('de.adp.web.payline.lineContent').requires('impact.node', 'impact.image', "de.adp.web.payline.lineGraphic").defines(function() {
    LineContent = ig.Node.extend({
        lineId: 0,
        pathToGfx: "",
        lineGfx: null,
        lineNumbers: [],
        lineVisible: true,
        borderTemplate: null,
        numberVisible: true,
        visible: true,
        borderLayer: null,
        borders: [],
        animationLayer: null,
        symbolAnimations: [],
        winSum: 0,
        init: function(lineid, lineGraphic, borderTemplate, x, y) {
            this.pathToGfx = lineGraphic;
            this.lineId = lineid;
            if (lineGraphic !== "") {
                this.lineGfx = new LineGraphic(this.pathToGfx);
                this.lineGfx.setPosition(x, y);
                this.addChild(this.lineGfx);
            }
            if (borderTemplate instanceof Border || borderTemplate instanceof BufferedBorder) {
                this.borderTemplate = borderTemplate;
            }
            this.borderLayer = new ig.Node();
            this.borderLayer.setPosition(0, 0);
            this.animationLayer = new ig.Node();
            this.animationLayer.setPosition(0, 0);
            this.addChild(this.animationLayer);
            this.addChild(this.borderLayer);
        },
        reattachLine: function() {
            if (this.lineGfx !== null) {
                this.addChild(this.lineGfx);
            }
            this.addChild(this.animationLayer);
            this.addChild(this.borderLayer);
            for (var i = 0; i < this.lineNumbers.length; i++) {
                var lineNumber = this.lineNumbers[i];
                this.addChild(lineNumber);
            }
        },
        addLineNumber: function(lineNumber) {
            if (lineNumber !== null && lineNumber !== undefined && lineNumber instanceof LineNumber) {
                this.lineNumbers.push(lineNumber);
                this.addChild(lineNumber);
            } else {
                throw "The LineNumber you are trying to add is not valid";
            }
        },
        addBorder: function(border) {
            this.borders.push(border);
            this.borderLayer.addChild(border);
        },
        addSymbolAnimation: function(symbolAnimation) {
            this.symbolAnimations.push(symbolAnimation);
            this.animationLayer.addChild(symbolAnimation);
        },
        getBorder: function() {
            if (this.borderTemplate !== null) {
                return this.borderTemplate.getClone();
            } else {
                throw "No Borderclass found";
            }
        },
        setVisible: function(visible) {
            if (this.lineGfx) {
                this.lineGfx.visible = visible;
            }
            this.borderLayer.visible = visible;
            this.animationLayer.visible = visible;
            if (this.winNumber !== undefined) {
                this.winNumber.visible = visible;
            }
        },
        setNumberVisible: function(visible) {
            for (var i = 0; i < this.lineNumbers.length; i++) {
                var lineNumber = this.lineNumbers[i];
                lineNumber.visible = visible;
            }
        },
        clean: function() {
            if (this.animationLayer.numChildren() > 0) {
                for (var i = 0; i < this.symbolAnimations.length; i++) {
                    var sym = this.symbolAnimations[i];
                    sym.dispose();
                }
                this.symbolAnimations.splice(0, this.symbolAnimations.length);
            }
            if (this.borderLayer.numChildren() > 0) {
                for (var j = 0; j < this.borders.length; j++) {
                    var border = this.borders[j];
                    border.dispose();
                }
                this.borders.splice(0, this.borders.length);
            }
            this.setVisible(false);
        },
        createWinNumber: function() {
            this.winNumber = new AdpWinNumber(currencyFormatter.getMoneyStringForCanvas(this.winSum), this);
            this.winNumber.visible = false;
        },
        showWonAmount: function(visible) {
            this.winNumber.visible = true;
        },
        isVisible: function() {
            return !this.invisible;
        }
    });
});

// ../private/de/adp/web/payline/lineContainer.js 
ig.baked = true;
ig.module('de.adp.web.payline.lineContainer').requires('impact.node', 'de.adp.web.payline.lineContent').defines(function() {
    LineContainer = ig.Node.extend({
        lines: [],
        scatterLines: [],
        visible: true,
        numberOfActiveLines: 0,
        init: function() {},
        addWinLine: function(winline) {
            if (winline !== null && winline !== undefined && winline instanceof LineContent) {
                this.lines.push(winline);
                this.addChild(winline);
                if (winline.lineId === 0) {
                    this.scatterLines.push(winline);
                }
            }
        },
        addWinLines: function() {
            for (var i = 0; i < arguments.length; i++) {
                var winline = arguments[i];
                if (winline !== null && winline !== undefined && winline instanceof LineContent) {
                    this.lines.push(winline);
                    this.addChild(winline);
                    if (winline.lineId === 0) {
                        this.scatterLines.push(winline);
                    }
                }
            }
        },
        removeWinLine: function(winline) {
            var idx = this.lines.indexOf(winline);
            if (idx !== -1) {
                this.lines.splice(idx, 1);
                this.removeChild(winLine);
            } else {
                throw "The line you are trying to remove is either removed or does not exist";
            }
        },
        getWinLineById: function(lineId) {
            var line = null;
            for (var i = 0; i < this.lines.length; i++) {
                if (this.lines[i].lineId === lineId) {
                    line = this.lines[i];
                }
            }
            for (var j = 0; j < this.scatterLines.length; j++) {
                if (this.scatterLines[j].lineId === lineId) {
                    line = this.scatterLines[j];
                }
            }
            return line;
        },
        showWinLine: function(lineID, result) {
            this.lines[lineID].setVisible(true, true);
        },
        showAllLines: function(linesVisible, numberVisible) {
            var length;
            if (this.numberOfActiveLines !== 0) {
                length = this.numberOfActiveLines + this.scatterLines.length;
            } else {
                length = this.lines.length;
            }
            for (var i = 0; i < length; i++) {
                this.lines[i].setVisible(linesVisible);
                this.lines[i].setNumberVisible(numberVisible);
            }
        },
        showCurrentLineSet: function(visible) {
            for (var i = 0; i <= this.numberOfActiveLines; i++) {
                this.lines[i].setVisible(visible);
                this.lines[i].setNumberVisible(visible);
            }
        },
        showLineForStep: function(amount) {
            this.numberOfActiveLines = amount;
            for (var j = 0; j < this.lines.length; j++) {
                this.lines[j].setVisible(true);
                this.lines[j].setNumberVisible(true);
            }
            for (var i = amount + this.scatterLines.length; i < this.lines.length; i++) {
                this.lines[i].setVisible(false);
                this.lines[i].setNumberVisible(false);
            }
        }
    });
});




// ../private/de/adp/web/symbol/symbol.js 
ig.baked = true;
ig.module('de.adp.web.symbol.symbol').requires('impact.node', 'impact.animation').defines(function() {
    Symbol = ig.Node.extend({
        won: false,
        visible: true,
        reelID: 0,
        rowID: 0,
        animationPools: [],
        myPool: [],
        init: function(id, width, height, x, y, pool, settings) {
            this.parent(x, y, settings);
            this.id = id;
            this.width = width;
            this.height = height;
            this.visible = true;
            if (pool !== null && pool !== undefined) {
                this.animationPools = pool;
            }
        },
        setReelAndRowId: function(reelId, rowId) {
            this.reelID = reelId;
            this.rowID = rowId;
        },
        registerAnimation: function(name, pathToAnimSheet, width, height, frameDuration, sequence, trigger, stop) {
            if (typeof(name) !== "undefined" && name !== "") {
                if (typeof(frameDuration) !== "undefined" && frameDuration > 0) {
                    if (typeof(sequence) !== "undefined" && sequence.length > 0) {
                        this.animSheets[name] = new ig.AnimationSheet(pathToAnimSheet, width, height);
                        this.addAnim(name, frameDuration, sequence, trigger, stop);
                        if (this.animationPools[name + "Pool"] === undefined || this.animationPools[name + "Pool"] === null) {
                            this.animationPools[name + "Pool"] = [];
                        }
                    } else {
                        throw "No Animationsequence specified";
                    }
                } else {
                    throw "No duration for Animation specified";
                }
            } else {
                throw "No name for Animation specified";
            }
        },
        registerLoopSequenceForAnimation: function(name, sequence) {
            if (this.anims.hasOwnProperty(name)) {
                this.anims[name].registerLoopSequence(sequence);
            } else {
                throw new Error("There is no animation with ID:" + name + " maybe there is a typo?");
            }
        },
        registerBufferedAnimation: function(name, animation) {
            this.addBufferedAnim(name, animation);
            this.animationPools[name + "Pool"] = [];
        },
        addBufferedAnim: function(name, animation) {
            this.anims[name] = animation;
            this.anims[name].setName(name);
            if (!this.currentAnim) {
                this.currentAnim = animation;
            }
        },
        size: {
            x: this.width,
            y: this.height
        },
        getId: function() {
            return this.id;
        },
        toString: function() {
            return this.getId() + "";
        },
        update: function() {
            this.parent();
        },
        draw: function(ctx) {
            this.parent(ctx);
        },
        setAnimation: function(animation) {
            this.currentAnim = animation.rewind() || this.anims.idle.rewind();
        },
        getTeaserAnimation: function(result) {
            var sym = null;
            if (this.anims["teaserAnimation"] !== undefined) {
                if (this.animationPools["teaserAnimationPool"].length > 0) {
                    sym = this.animationPools["teaserAnimationPool"].pop();
                } else {
                    sym = new Symbol(this.id, this.width, this.height, this.pos.x, this.pos.y, this.animationPools);
                    sym.animSheets.teaserAnimation = new ig.AnimationSheet(this.animSheets.teaserAnimation.image.path, this.animSheets.teaserAnimation.width, this.animSheets.teaserAnimation.height);
                    sym.addAnim("teaserAnimation", this.anims.teaserAnimation.frameTime, this.anims.teaserAnimation.sequence, this.anims.teaserAnimation.trigger, this.anims.teaserAnimation.stop);
                    sym.anims['teaserAnimation'].isOverSized = this.anims.teaserAnimation.isOverSized;
                    sym.anims['teaserAnimation'].isHorizontalOverSized = this.anims.teaserAnimation.isHorizontalOverSized;
                    sym.anims['teaserAnimation'].isAlwaysOnTop = this.anims.teaserAnimation.isAlwaysOnTop;
                    sym.anims['teaserAnimation'].overSizedOffset = this.anims.teaserAnimation.overSizedOffset;
                }
            }
            return sym;
        },
        startTeaserAnimation: function() {
            if (this.anims["teaserAnimation"] !== undefined) {
                this.currentAnim.rewind();
            }
        },
        getWinAnimation: function(lineResult, result, position) {
            var sym = null;
            for (var anim in this.anims) {
                if (this.anims[anim].triggeredBy(lineResult, result, position)) {
                    if (this.animationPools[anim + "Pool"].length > 0) {
                        sym = this.animationPools[anim + "Pool"].pop();
                    } else {
                        sym = new Symbol(this.id, this.width, this.height, this.pos.x, this.pos.y, this.animationPools);
                        sym.anims[anim] = this.anims[anim];
                    }
                    sym.setCurrentAnimation(anim);
                    break;
                }
            }
            if (sym === null) {
                throw new Error("there is no win animation for symbol " + this.id + "and occur " + lineResult.highlight.occurrence);
            }
            return sym;
        },
        getReelGfx: function(result, position) {
            var sym = null;
            for (var anim in this.anims) {
                if (this.anims[anim].triggeredBy(null, result, position)) {
                    if (this.animationPools[anim + "Pool"].length > 0) {
                        sym = this.animationPools[anim + "Pool"].pop();
                    } else {
                        sym = new Symbol(this.id, this.width, this.height, this.pos.x, this.pos.y, this.animationPools);
                        sym.anims[anim] = this.anims[anim];
                        if (this.anims["smooth"]) {
                            sym.anims["smooth"] = this.anims["smooth"];
                        }
                    }
                    sym.setCurrentAnimation(anim);
                    break;
                }
            }
            return sym;
        },
        setCurrentAnimation: function(animationID) {
            if (this.anims[animationID] === undefined) {
                return;
            }
            this.currentAnim = this.anims[animationID];
            this.currentAnim.rewind();
        },
        dispose: function() {
            this.animationPools[this.currentAnim.name + "Pool"].push(this);
            if (this.displayParent !== null && this.displayParent !== undefined) {
                this.displayParent.removeChild(this);
            }
            this.pos.x = 0;
            this.pos.y = 0;
            this.offset.x = 0;
            this.offset.y = 0;
        },
        kill: function() {
            this.dispose();
            this.parent();
        }
    });
});

// ../private/de/adp/web/reel/reel.js 
ig.baked = true;
ig.module('de.adp.web.reel.reel').requires('impact.node', 'impact.animation', 'de.adp.web.symbol.symbol').defines(function() {
    Reel = ig.Node.extend({
        STATE_SPIN: 'spinning',
        STATE_DOWN: 'down',
        STATE_FINISH: 'finish',
        STATE_SWINGOFF: 'swingoff',
        STATE_SKIPPED: 'skipped',
        availableSymbols: [],
        symbolHeight: 0,
        symbolWidth: 0,
        visibleSymbols: 0,
        swingOffCount: 0,
        swingOnCount: 0,
        id: 0,
        symbols: [],
        currFillInYPos: 0,
        framesPerSymbol: 3,
        speedInPixelsPerTick: 56,
        speedInPixelPerFrame: 56,
        verticalPixelShiftPerFrameBackup: 56,
        speedInPixelPerMillisecond: (this.speedInPixelsPerTick * 30) / 1000,
        desiredTicksPerMillisecond: 30 / 1000,
        swingDuration: 220,
        swingAmp: 0,
        swingMaxAmp: 30,
        swingTime: 0,
        totalReelHeightInSymbols: 0,
        nextSwingOff: 0,
        startPos: 0,
        distance: 0,
        duration: 0,
        running: false,
        currentTick: 0,
        lastTick: 0,
        timeSinceLastTick: 0,
        reelStopSound: "SFX_ReelStop",
        isTeaser: false,
        suspenseSpinSound: "",
        ambientSoundDuringSuspenseSpinPossible: true,
        myGlow: null,
        downCounter: 0,
        stopSoundIsOver: true,
        stopSoundTimer: null,
        result: null,
        state: '',
        casino: null,
        reelStopDelayInFrames: 10,
        reelStopDelayInMilliseconds: 10,
        init: function(id, x, y, symbolWidth, symbolHeight, visibleSymbols, swingOffCount, swingOnCount, settings) {
            this.parent(x, y, settings);
            this.visible = true;
            this.id = id;
            this.symbolWidth = symbolWidth;
            this.symbolHeight = symbolHeight;
            this.visibleSymbols = visibleSymbols;
            this.swingOffCount = swingOffCount;
            this.swingOnCount = swingOnCount;
            this.swingMaxAmp = Math.floor(symbolHeight / 2);
            this.myGlow = new ig.Node(x, y);
            this.myGlow.animSheets["glow"] = new ig.AnimationSheet("private/de/adp/web/assets/misc/reel_glow_140x128.png", 140, 384);
            this.myGlow.addAnim("glow", 0.0375, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], null, true);
            this.myGlow.visible = true;
            this.onReelStopDone = this.onReelStopDone.bind(this);
            this.speedInPixelPerFrame = this.verticalPixelShiftPerFrameBackup;
            var speedInPixelPerSecond = this.speedInPixelPerFrame * ig.system.fps;
            this.speedInPixelPerMillisecond = speedInPixelPerSecond / 1000;
            this.teaserStartTime = 0;
        },
        setSpeedInPixelPerFrame: function(newSpeed) {
            this.verticalPixelShiftPerFrameBackup = newSpeed;
            this.speedInPixelPerFrame = this.verticalPixelShiftPerFrameBackup;
            var speedInPixelPerSecond = this.speedInPixelPerFrame * ig.system.fps;
            this.speedInPixelPerMillisecond = speedInPixelPerSecond / 1000;
        },
        setSpeedInPixelPerMillisecond: function(newSpeed) {
            this.speedInPixelPerMillisecond = newSpeed;
            var speedInPixelPerSecond = this.speedInPixelPerMillisecond * 1000;
            this.speedInPixelPerFrame = speedInPixelPerSecond / ig.system.fps;
            this.verticalPixelShiftPerFrameBackup = this.speedInPixelPerFrame;
        },
        addCasino: function(casino) {
            this.casino = casino;
        },
        setAvailableSymbols: function(symbols) {
            this.availableSymbols = symbols;
        },
        addSymbols: function(reelStripe) {
            this.swingOffCount = reelStripe.swingOffSize;
            this.visibleSymbols = reelStripe.visibleSymbolCount;
            this.totalReelHeightInSymbols = reelStripe.symbols.length + this.symbols.length;
            this.currFillInYPos = this.totalReelHeightInSymbols * this.symbolHeight;
            this.putExistingSymbolsAtStripeBottom();
            this.addNewSymbolsAtTop(reelStripe);
            this.setReelToStartPosition();
        },
        putExistingSymbolsAtStripeBottom: function() {
            var oldSymbolCount = this.symbols.length;
            for (var i = 0; i < oldSymbolCount; i++) {
                var oldSymbol = this.symbols[i];
                this.currFillInYPos -= this.symbolHeight;
                oldSymbol.pos.y = this.currFillInYPos;
            }
        },
        addNewSymbolsAtTop: function(reelStripe) {
            this.swingOffCount = reelStripe.swingOffSize;
            var addedSymbols = [];
            var newSymbolsCount = reelStripe.symbols.length - 1;
            var symbolId = -1;
            for (var i = newSymbolsCount; i >= 0; i--) {
                symbolId = reelStripe.symbols[i];
                var sym = this.availableSymbols[symbolId].getReelGfx(this.result, {
                    x: this.id,
                    y: i - 1
                });
                sym.setReelAndRowId(this.id, i - 1);
                sym.update();
                addedSymbols.push(sym);
                this.attachNewSymbolAtTop(sym);
            }
            return addedSymbols;
        },
        setReelToStartPosition: function() {
            this.pos.y = (-((this.totalReelHeightInSymbols - this.swingOnCount) - this.visibleSymbols) * this.symbolHeight);
        },
        attachNewSymbolAtTop: function(symbol) {
            if (this.symbols.length > 0) {
                symbol.pos.x = 0;
                symbol.pos.y = this.currFillInYPos;
                var lastSymbol = this.symbols[this.symbols.length - 1];
                this.symbols.push(symbol);
                this.currFillInYPos = lastSymbol.pos.y - this.symbolHeight;
                this.addChild(symbol);
                if ((lastSymbol.currentAnim.isOverSized || lastSymbol.currentAnim.isAlwaysOnTop) && !symbol.currentAnim.isAlwaysOnTop) {
                    this.swapChildren(lastSymbol, symbol);
                }
            } else {
                symbol.pos.x = 0;
                symbol.pos.y = this.currFillInYPos;
                this.symbols.push(symbol);
                this.addChild(symbol);
                this.currFillInYPos -= this.symbolHeight;
            }
            symbol.pos.y = this.currFillInYPos;
        },
        idxToRow: function(idx, reelStripeLength, swingOffCount, visibleSymbolCount) {
            var revIDx = (reelStripeLength - swingOffCount) - idx;
            var row = -1;
            if (revIDx <= visibleSymbolCount) {
                row = revIDx - 1;
            }
            return row;
        },
        clean: function() {
            this.crispStripe();
            var swingOnEndIdx = this.symbols.length - (this.swingOffCount + this.visibleSymbols);
            var swingOnStartIdx = swingOnEndIdx - this.swingOnCount;
            this.swingTime = 0;
            this.isTeaser = false;
            var symbolsToDispose = this.symbols.splice(0, swingOnStartIdx);
            for (var i = 0; i < swingOnStartIdx; i++) {
                var symbToDispose = symbolsToDispose[i];
                this.removeChild(symbToDispose);
                symbToDispose.dispose();
            }
        },
        setResult: function(result) {
            this.result = result;
            var reelData = result.reels[this.id];
            this.addSymbols(reelData);
        },
        setInitMatrix: function(result) {
            this.result = result;
            var reelData = result.reels[this.id];
            var swingOnSymbols = [];
            for (var i = 0; i < this.swingOnCount; i++) {
                var symID = Math.floor(Math.random() * this.availableSymbols.length);
                reelData.symbols.push(symID);
            }
            this.addSymbols(reelData);
            this.skipReelRun(false);
        },
        spin: function() {
            this.reelStopDelayInFrames = 0;
            this.reelStopDelayInMilliseconds = 0;
            this.lastTick = ig.system.now();
            this.startPos = this.pos.y;
            this.distance = this.stopPositionY() - this.startPos;
            this.duration = this.amountOfSymbolsTomoveThrough() * this.framesPerSymbol;
            this.speedInPixelPerFrame = this.verticalPixelShiftPerFrameBackup;
            var speedInPixelPerSecond = this.speedInPixelPerFrame * ig.system.fps;
            this.speedInPixelPerMillisecond = speedInPixelPerSecond / 1000;
            this.swingDuration = this.calculateSwingOffDuration(100, this.swingMaxAmp);
            this.state = this.STATE_SPIN;
            this.running = true;
            this.smoothStripe();
        },
        smoothStripe: function() {
            for (var i = 0; i < this.symbols.length; i++) {
                this.symbols[i].setCurrentAnimation("smooth");
            }
        },
        crispStripe: function() {
            for (var i = 0; i < this.symbols.length; i++) {
                this.symbols[i].setCurrentAnimation("idle");
            }
        },
        stopPositionY: function() {
            return (-this.swingOffCount * this.symbolHeight);
        },
        amountOfSymbolsTomoveThrough: function() {
            return this.symbols.length - (this.visibleSymbols + this.swingOffCount + this.swingOnCount);
        },
        update: function() {
            this.parent();
            switch (this.state) {
                case this.STATE_FINISH:
                    break;
                case this.STATE_DOWN:
                    this.downCounter++;
                    var teaseTimePassed = ig.system.now() - this.teaserStartTime;
                    if (teaseTimePassed > Math.max(this.reelStopDelayInMilliseconds, 300) && this.stopSoundIsOver) {
                        this.suspenseSpinSound = "";
                        this.teaserStartTime = 0;
                        this.state = this.STATE_FINISH;
                    }
                    break;
                case this.STATE_SWINGOFF:
                    this.swingTime += this.timeSinceLastTick;
                    if (this.swingTime > this.swingDuration) {
                        this.goDown();
                        break;
                    }
                    var newSwingOff = this.calculateSwingOff();
                    if (newSwingOff < this.nextSwingOff && this.stopSoundIsOver) {
                        this.playReelStopSoundIfPossible();
                    }
                    this.nextSwingOff = newSwingOff;
                    this.pos.y = this.nextSwingOff;
                    this.pos.y = this.nextSwingOff;
                    break;
                case this.STATE_SKIPPED:
                    if (this.pos.y < this.stopPositionY()) {
                        this.pos.y += (this.timeSinceLastTick * (this.speedInPixelPerMillisecond));
                    } else {
                        this.playReelStopSoundIfPossible();
                        this.proceedToSwingOff();
                    }
                    break;
                case this.STATE_SPIN:
                    if (this.pos.y < this.stopPositionY()) {
                        this.pos.y += (this.timeSinceLastTick * (this.speedInPixelPerMillisecond));
                        if (this.pos.y >= this.stopPositionY()) {
                            this.playReelStopSoundIfPossible();
                            this.proceedToSwingOff();
                        }
                    } else {
                        this.playReelStopSoundIfPossible();
                        this.proceedToSwingOff();
                    }
                    break;
                default:
                    break;
            }
            this.currentTick = ig.system.now();
            this.timeSinceLastTick = this.currentTick - this.lastTick;
            this.lastTick = this.currentTick;
        },
        proceedToSwingOff: function() {
            this.swingTime += this.timeSinceLastTick;
            if (this.swingTime >= this.swingDuration) {
                this.goDown();
                return;
            }
            this.nextSwingOff = this.calculateSwingOff();
            this.pos.y = this.nextSwingOff;
            this.goSwingOff();
        },
        goDown: function() {
            this.stopSoundIsOver = true;
            this.state = this.STATE_DOWN;
            this.downCounter = 0;
            this.pos.y = this.stopPositionY();
            this.clean();
        },
        goSwingOff: function() {
            this.teaserStartTime = ig.system.now();
            if (this.isTeaser) {
                this.startTeaserAnimations();
            }
            this.state = this.STATE_SWINGOFF;
        },
        startTeaserAnimations: function() {
            var reelSym = null;
            for (var row = 0; row < this.visibleSymbols; row++) {
                reelSym = this.getSymbolAtRow(row);
                var sym = this.availableSymbols[reelSym.id].getTeaserAnimation(this.result);
                if (sym !== null) {
                    this.reelStopDelayInFrames = sym.currentAnim.sequence.length;
                    this.reelStopDelayInMilliseconds = sym.currentAnim.sequence.length * sym.currentAnim.frameTime * 1000;
                    this.directlyReplace(reelSym, sym);
                    sym.startTeaserAnimation();
                }
            }
        },
        handleReelStop: function() {},
        playReelStopSoundIfPossible: function() {
            if (this.casino.soundPlayer.isSoundFileAvailable(this.reelStopSound)) {
                var soundLength = this.casino.soundPlayer.getSoundLengthInMilliSeconds(this.reelStopSound);
                this.stopSoundTimer = setTimeout(this.onReelStopDone, soundLength);
                this.casino.soundPlayer.playEffect(this.reelStopSound);
                this.stopSoundIsOver = false;
                if (this.suspenseSpinSound !== "" && this.suspenseSpinSound !== undefined) {
                    if (!this.ambientSoundDuringSuspenseSpinPossible) {
                        this.casino.soundPlayer.pauseAllAmbient();
                    }
                    this.casino.soundPlayer.playReelRunSound(this.suspenseSpinSound);
                }
            } else {
                this.stopSoundTimer = null;
            }
        },
        onReelStopDone: function() {
            this.stopSoundTimer = null;
        },
        draw: function() {
            this.parent();
        },
        isDown: function() {
            return this.state === this.STATE_FINISH && this.pos.y === this.stopPositionY();
        },
        getSymbolAtRow: function(rowId) {
            var upperVisibleIdx = this.symbols.length - (1 + this.swingOffCount);
            return this.symbols[upperVisibleIdx - rowId];
        },
        skipReelRun: function(withAnimation) {
            if (withAnimation === undefined) {
                withAnimation = true;
            }
            this.state = this.STATE_SKIPPED;
            if (withAnimation) {
                this.myGlow.currentAnim.rewind();
            } else {
                this.goDown();
                return;
            }
            if (this.pos.y < this.stopPositionY() - this.symbolHeight && withAnimation) {
                this.pos.y = this.stopPositionY() - this.symbolHeight;
            }
        },
        calculateSwingOff: function() {
            if (this.swingDuration <= 0) {
                this.swingDuration = 0;
                return 0;
            }
            this.swingAmp = this.swingMaxAmp * Math.exp(-this.timeSinceLastTick / this.swingDuration);
            return Math.sin(this.swingTime / this.swingDuration * Math.PI) * this.swingMaxAmp + this.stopPositionY();
        },
        calculateSwingOffDuration: function(desiredDuration, maxAmplitude) {
            if (maxAmplitude === 0) {
                return 0;
            }
            var damp = Math.PI * 0.5;
            return ((2 * maxAmplitude) / this.speedInPixelPerMillisecond) * damp;
        },
        setStopSound: function(soundID) {
            this.reelStopSound = soundID;
        },
        setSuspenseSound: function(soundId, ambientSoundDurinSuspenseSpin) {
            this.suspenseSpinSound = soundId;
            this.ambientSoundDuringSuspenseSpinPossible = ambientSoundDurinSuspenseSpin;
        },
        directlyReplace: function(oldSymbol, newSymbol) {
            var stripeIdx = this.symbols.indexOf(oldSymbol);
            this.symbols[stripeIdx] = newSymbol;
            var targetIdx = this.getIndexOfChild(oldSymbol);
            newSymbol.setPosition(oldSymbol.pos.x, oldSymbol.pos.y);
            newSymbol.setReelAndRowId(oldSymbol.reelID, oldSymbol.rowID);
            oldSymbol.dispose();
            this.addChildAt(newSymbol, targetIdx);
            var prevSymbol = this.symbols[stripeIdx - 1];
            var nextSymbol = this.symbols[stripeIdx + 1];
            if (prevSymbol) {
                if ((prevSymbol.currentAnim.isOverSized || prevSymbol.currentAnim.isAlwaysOnTop) && !newSymbol.currentAnim.isAlwaysOnTop) {
                    if (targetIdx > this.getIndexOfChild(prevSymbol)) {
                        this.swapChildren(prevSymbol, newSymbol);
                    }
                }
            }
            if (newSymbol.currentAnim.isAlwaysOnTop || newSymbol.currentAnim.isOverSized) {
                if (this.getIndexOfChild(newSymbol) < this.getIndexOfChild(prevSymbol)) {
                    this.swapChildren(prevSymbol, newSymbol);
                }
                if (this.getIndexOfChild(newSymbol) < this.getIndexOfChild(nextSymbol)) {
                    this.swapChildren(nextSymbol, newSymbol);
                }
            }
            if (nextSymbol) {
                if ((nextSymbol.currentAnim.isOverSized || nextSymbol.currentAnim.isAlwaysOnTop) && !newSymbol.currentAnim.isAlwaysOnTop) {
                    if (this.getIndexOfChild(newSymbol) > this.getIndexOfChild(nextSymbol)) {
                        this.swapChildren(nextSymbol, newSymbol);
                    }
                }
            }
        },
        getSwingOffSymbols: function() {
            if (this.swingOffCount <= 0) {
                return [];
            }
            return this.symbols.slice(-this.swingOffCount);
        },
        removeSwingOffSymbols: function() {
            var swingOffSyms = this.getSwingOffSymbols();
            for (var i = 0; i < swingOffSyms.length; i++) {
                var sym = swingOffSyms[i];
                this.removeChild(sym);
                var idx = this.symbols.indexOf(sym);
                this.symbols.splice(idx, 1);
                sym.dispose();
            }
            this.swingOffCount = 0;
            return swingOffSyms;
        },
        attachSwingOffSymbols: function(swingOffSymbols) {
            if (this.swingOffCount > 0) {
                throw new Error("You must not attach additional SwingOffSymbols. There are already " + this.swingOffCount + " symbols attached to reel " + this.id + ".");
            }
            var ids = [];
            for (var i = 0; i < swingOffSymbols.length; i++) {
                var sym = swingOffSymbols[i];
                ids.push(sym.id);
            }
            var re = {
                id: this.id
            };
            this.swingOffCount = swingOffSymbols.length;
            re.swingOffSize = this.swingOffCount;
            re.visibleSymbolCount = 0;
            re.symbols = ids;
            this.addNewSymbolsAtTop(re);
        },
        position: function() {
            return {
                x: this.pos.x + this.offset.x,
                y: this.pos.y + this.offset.y
            };
        },
        calculateMinimalSymbolCount: function(casino, facade) {
            var minSpinDuration = SpinDelayTimer.getMinimalSpinDuration(casino, facade) - this.calculateSwingOffDuration(100, this.swingMaxAmp);
            var symbolHeight = this.symbolHeight;
            var minimalSymbolCount = (minSpinDuration * this.speedInPixelPerMillisecond) / symbolHeight;
            return Math.ceil(minimalSymbolCount);
        },
        pause: function() {
            this.pauseStartedAt = ig.system.now();
            this.pausedTime = 0;
            this.isPaused = true;
        },
        resume: function() {
            if (!this.isPaused) {
                this.pauseStartedAt = ig.system.now();
            }
            this.isPaused = false;
            this.pausedTime = ig.system.now() - this.pauseStartedAt;
            this.lastTick = this.lastTick + this.pausedTime;
            this.pausedTime = 1;
        },
        getCurrentlyVisibleSymbols: function() {
            var syms = [];
            var curSym;
            var visibleUpperBorder = 0;
            var visibleLowerBorder = this.visibleSymbols * this.symbolHeight;
            for (var i = 0; i < this.symbols.length; i++) {
                curSym = this.symbols[i];
                if (curSym.pos.y + curSym.height > visibleUpperBorder && curSym.pos.y < visibleLowerBorder) {
                    syms.push(curSym);
                }
            }
            return syms;
        },
        containsVisibleHorizontalOverSizedSymbol: function() {
            var visibleSyms = this.getCurrentlyVisibleSymbols();
            for (var i = 0; i < visibleSyms.length; i++) {
                if (visibleSyms[i].currentAnim.isHorizontalOverSized) {
                    return true;
                }
            }
            return false;
        }
    });
});

// ../private/de/adp/web/reel/reelContainer.js 
ig.baked = true;
ig.module('de.adp.web.reel.reelContainer').requires('impact.node', 'de.adp.web.reel.reel', 'impact.image').defines(function() {
    ReelContainer = ig.Node.extend({
        casino: null,
        startedAnimating: false,
        gameResult: undefined,
        reelmotionFinishedCallback: null,
        lastReelStopped: false,
        reelRunSounds: ["SFX_ReelRun"],
        shallLoopReelRunSound: false,
        selectedReelRunSound: "",
        visible: true,
        reelContainerBackground: null,
        reels: [],
        teaserSounds: [],
        suspendSounds: [],
        fadeOutStarted: false,
        allReelsFinished: false,
        isReelSkipAnimatable: false,
        isSkippingAllowed: false,
        reelRunSoundPossible: true,
        ambientSoundDuringReelRunPossible: true,
        ambientSoundDuringSuspenseSpinPossible: true,
        stopRunSoundAtSwingoff: true,
        fadeOutDelay: 0,
        init: function(casino, x, y, settings) {
            this.parent(x, y, settings);
            this.casino = casino;
            this.onSoundFadedOut = this.onSoundFadedOut.bind(this);
            if (!casino.soundPlayer.isSoundFileAvailable(this.reelRunSounds[0])) {
                this.reelRunSounds = [];
            }
        },
        addBackground: function(imagePath) {
            var img = new ig.Image(imagePath);
            this.addChildAt(img, 0);
        },
        addReel: function(reel) {
            this.reels.push(reel);
            reel.offset.x = this.pos.x + this.offset.x;
            reel.offset.y = this.pos.y + this.offset.y;
            reel.addCasino(this.casino);
            this.addChild(reel);
            this.isReelSkipAnimatable = reel.symbolHeight === 128 && reel.symbolWidth === 140;
            if (this.isReelSkipAnimatable) {
                this.addChild(reel.myGlow);
            }
        },
        setInitMatrix: function(result) {
            this.gameResult = result;
            for (var i = 0; i < this.reels.length; i++) {
                var reel = this.reels[i];
                reel.setInitMatrix(result);
            }
        },
        registerCallback: function(callback) {
            if (typeof(callback) !== "undefined") {
                this.reelmotionFinishedCallback = callback;
            }
        },
        logSpinTime: function() {
            let spinTime = ig.system.now() - this.reelStartTime;
            console.log("[x|x|x|x|x] Reels spinned for " + spinTime + "ms");
        },
        update: function() {
            this.parent();
            this.resortForOversize();
            if (this.startedAnimating) {
                if (this.hasLastReelStopped() && !this.lastReelStopped) {
                    this.casino.soundPlayer.stopReelRunSound();
                    if (!this.ambientSoundDuringSuspenseSpinPossible || !this.ambientSoundDuringReelRunPossible) {
                        this.casino.soundPlayer.resumeAmbientSound();
                    }
                    this.isSkippingAllowed = false;
                    this.lastReelStopped = true;
                    this.startedAnimating = false;
                    this.reelmotionFinishedCallback();
                    this.logSpinTime();
                }
                if (this.lastReelStopped) {
                    return;
                }
                if (ig.input.pressed('skipReel') && this.isSkippingAllowed) {
                    for (var i = 0; i < this.reels.length; i++) {
                        if (this.checkHorizontalBoundary(ig.input.mouse.x, this.reels[i]) && this.checkVerticalBoundary(ig.input.mouse.y, this.reels[i])) {
                            if (this.reels[i].state !== "spinning" || this.reels[i].isSkipped == true) {
                                this.skipAllReels();
                            } else {
                                this.reels[i].skipReelRun();
                            }
                        }
                    }
                }
                if (this.isTimeToFadeOut()) {
                    this.casino.soundPlayer.fade(this.selectedReelRunSound, this.casino.soundPlayer.volume, 0, 220, this.onSoundFadedOut);
                }
            }
        },
        resortForOversize: function() {
            for (var i = 0; i < this.reels.length; i++) {
                if (this.reels[i].containsVisibleHorizontalOverSizedSymbol()) {
                    this.addChild(this.reels[i]);
                }
            }
        },
        checkHorizontalBoundary: function(mouseX, reel) {
            return mouseX >= reel.pos.x && mouseX <= reel.pos.x + (reel.symbolWidth);
        },
        checkVerticalBoundary: function(mouseY, reel) {
            return mouseY >= this.pos.y && mouseY <= this.pos.y + (reel.visibleSymbols * reel.symbolHeight);
        },
        skipAllReels: function() {
            if (this.isSkippingAllowed && this.casino.getCasinoConfiguration("ENABLE_SKIP_REELSPIN")) {
                for (var i = 0; i < this.reels.length; i++) {
                    if (this.reels[i].state === "spinning") {
                        this.reels[i].skipReelRun();
                    }
                }
            }
        },
        hasLastReelStopped: function() {
            for (var j = 0; j < this.reels.length; j++) {
                if (!this.reels[j].isDown()) {
                    return false;
                }
            }
            return true;
        },
        isTimeToFadeOut: function() {
            if (!this.fadeOutStarted) {
                var swingDuration = this.reels[0].calculateSwingOffDuration();
                if (this.stopRunSoundAtSwingoff) {
                    for (var i = 0; i < this.reels.length; i++) {
                        if (this.reels[i].state === "spinning") {
                            return false;
                        }
                    }
                } else {
                    for (var i = 0; i < this.reels.length; i++) {
                        if (this.reels[i].state === "spinning" || this.reels[i].state === "swingoff") {
                            return false;
                        }
                    }
                }
                this.fadeOutStarted = true;
                return true;
            }
            return false;
        },
        onSoundFadedOut: function() {
            this.casino.soundPlayer.stopReelRunSound();
        },
        addReelRunSounds: function() {
            this.reelRunSounds = [];
            for (var i = 0; i < arguments.length; i++) {
                this.reelRunSounds.push(arguments[i]);
            }
        },
        isAnimationFinished: function() {
            return this.reels[this.reels.length - 1].isDown();
        },
        setResult: function(result) {
            this.lastReelStopped = false;
            this.fadeOutStarted = false;
            if (result !== null && result !== undefined) {
                this.gameResult = result;
            }
            for (var i = 0; i < this.reels.length; i++) {
                this.reels[i].setResult(this.gameResult);
                this.reels[i].setStopSound(this.determineReelStopSound(i, this.gameResult));
            }
        },
        getReelRunSound: function() {
            return this.reelRunSounds[Math.floor(Math.random() * (this.reelRunSounds.length))];
        },
        directlyFinishReelRun: function(result) {
            if (result !== null && result !== undefined) {
                this.setResult(result);
                this.startReels(true);
            }
        },
        setAvailableSymbols: function(symbolList) {
            for (var i = 0; i < this.reels.length; i++) {
                this.reels[i].setAvailableSymbols(symbolList);
            }
        },
        startReels: function(skipReelRun) {
            this.allReelsFinished = false;
            if (!skipReelRun) {
                this.startedAnimating = true;
                if (this.reelRunSounds.length > 0 && this.reelRunSoundPossible) {
                    this.selectedReelRunSound = this.getReelRunSound();
                    if (!this.ambientSoundDuringReelRunPossible) {
                        this.casino.soundPlayer.pauseAllAmbient();
                    }
                    this.casino.soundPlayer.playReelRunSound(this.selectedReelRunSound, this.shallLoopReelRunSound);
                }
            }
            for (var i = 0; i < this.reels.length; i++) {
                if (!skipReelRun) {
                    this.reels[i].spin();
                } else {
                    this.reels[i].skipReelRun(false, 0);
                }
            }
            this.reelStartTime = ig.system.now();
        },
        getReelById: function(id) {
            return this.reels[id];
        },
        determineReelStopSound: function(reelID, gameResult) {
            var l = this.teaserSounds.length;
            for (var i = 0; i < l; i++) {
                if (this.teaserSounds[i].fulfilled(gameResult, reelID)) {
                    var susSnd = this.determineSuspendSound(reelID, gameResult);
                    if (susSnd !== undefined) {
                        this.selectedReelRunSound = susSnd;
                        this.reels[reelID].setSuspenseSound(susSnd);
                    }
                    this.reels[reelID].isTeaser = true;
                    return this.teaserSounds[i].getSndId();
                }
            }
            return "SFX_ReelStop";
        },
        determineSuspendSound: function(reelId, gameResult) {
            for (var i = 0; i < this.suspendSounds.length; i++) {
                var snd = this.suspendSounds[i];
                if (snd.fulfilled(gameResult, reelId)) {
                    return snd.getSndId();
                }
            }
        },
        addTeaserSound: function(teaserSound) {
            this.teaserSounds.push(teaserSound);
        },
        addSuspenseSound: function(suspendSound) {
            this.suspendSounds.push(suspendSound);
        },
        pause: function() {
            for (var i = 0; i < this.reels.length; i++) {
                this.reels[i].pause();
            }
            this.casino.soundPlayer.stopReelRunSound();
        },
        resume: function() {
            var isStillMoving = false;
            for (var i = 0; i < this.reels.length; i++) {
                this.reels[i].resume();
                if (this.reels[i].state === "spinning") {
                    isStillMoving = true;
                }
            }
            if (isStillMoving && this.reelRunSoundPossible) {
                this.casino.soundPlayer.playReelRunSound(this.selectedReelRunSound, this.shallLoopReelRunSound);
            }
        }
    });
});


// ../private/de/adp/web/data/winnings.js 
ig.baked = true;
ig.module('de.adp.web.data.winnings').requires('impact.impact').defines(function() {
    Winnings = ig.Class.extend({
        index: -1,
        winnings: [],
        length: 0,
        init: function() {},
        fill: function(winnings) {
            this.winnings = winnings;
        },
        getWinSumForId: function(id) {
            var winSum = 0;
            for (var i = 0; i < this.winnings.length; i++) {
                if (this.winnings[i].wagerPositionId === id) {
                    winSum = this.winnings[i].winSum;
                }
            }
            return winSum;
        }
    });
});


// ../private/de/adp/web/gui/freegame/basicFreegameDisplay.js 
ig.baked = true;
ig.module('de.adp.web.gui.freegame.basicFreegameDisplay').requires('impact.impact').defines(function() {
    BasicFreegameDisplay = ig.Class.extend({
        parentDiv: null,
        triggerResponse: null,
        init: function(parentdiv) {
            this.parentDiv = parentdiv;
            this.onFinished = this.onFinished.bind(this);
        },
        translate: function(resProv) {},
        show: function(triggerResponse) {
            var wonFreeGames = triggerResponse.gameResult.totalWonFreegames();
            ig.logger.log(Logger.LogLevel.INFO, "You won " + wonFreeGames + " Freegames.");
        },
        blendIn: function() {
            $(this.parentDiv).fadeIn(300);
        },
        blendOut: function() {
            $(this.parentDiv).fadeOut(300);
        },
        onFinished: function() {}
    });
});


// ../private/de/adp/web/gui/freegame/basicFreegameCounter.js 
ig.baked = true;
ig.module('de.adp.web.gui.freegame.basicFreegameCounter').requires('impact.impact').defines(function() {
    BasicFreegameCounter = ig.Class.extend({
        parentDiv: null,
        availableGames: null,
        playedGames: null,
        init: function(parentdiv) {
            this.parentDiv = parentdiv;
        },
        showAvailableGames: function(availableGames) {
            this.availableGames = availableGames;
            this.updateView();
        },
        showPlayedGames: function(playedGames) {
            this.playedGames = playedGames;
            this.updateView();
        },
        translate: function(resProv) {},
        updateView: function() {
            ig.logger.log(Logger.LogLevel.INFO, "Freegame " + this.playedGames + " of " + this.availableGames);
        },
        blendIn: function(duration) {
            if (duration === undefined) {
                duration = 300;
            }
            if (duration === 0) {
                $(this.parentDiv).show();
            } else {
                $(this.parentDiv).fadeIn(duration);
            }
        },
        blendOut: function(duration) {
            if (duration === undefined) {
                duration = 300;
            }
            if (duration === 0) {
                $(this.parentDiv).hide();
            } else {
                $(this.parentDiv).fadeOut(300);
            }
        }
    });
});


// ../private/de/adp/web/gui/freegame/basicSummaryDisplay.js 
ig.baked = true;
ig.module('de.adp.web.gui.freegame.basicSummaryDisplay', 'de.adp.web.gui.currencyFormatter').requires('impact.impact').defines(function() {
    BasicSummaryDisplay = ig.Class.extend({
        parentDiv: null,
        triggerResponse: null,
        currencyFormatter: null,
        init: function(parentdiv) {
            this.parentDiv = parentdiv;
            this.onFinished = this.onFinished.bind(this);
            this.currencyFormatter = currencyFormatter;
        },
        translate: function(resProv) {},
        show: function(triggerResponse) {
            var playedGames = triggerResponse.gameResult.freeGameRound;
            var wonAmount = this.currencyFormatter.getMoneyStringForCanvas(triggerResponse.uncommittedWinSum);
            ig.logger.log(Logger.LogLevel.INFO, "You played " + playedGames + " Freegames and won " + wonAmount);
        },
        blendIn: function() {
            $(this.parentDiv).show();
        },
        blendOut: function() {
            $(this.parentDiv).hide();
        }
    });
});


// ../private/de/adp/web/payline/winLine.js 
ig.baked = true;
ig.module('de.adp.web.payline.winLine').requires('impact.node').defines(function() {
    WinLine = ig.Node.extend({
        lineResult: null,
        symbols: [],
        lineGfx: undefined,
        borders: [],
        winNumber: null,
        casino: null,
        winSum: 0,
        init: function(casino) {
            this.casino = casino;
        },
        draw: function() {
            for (var i = 0; i < this.symbols.length; i++) {
                if (this.symbols[i].visible) {
                    this.symbols[i].draw();
                }
                if (this.borders[i].visible) {
                    this.borders[i].draw();
                }
            }
            if (this.winNumber) {
                this.winNumber.draw();
            }
        },
        update: function() {
            this.lineGfx.update();
            this.winNumber.update();
            for (var i = 0; i < this.symbols.length; i++) {
                this.symbols[i].update();
                this.borders[i].update();
            }
        },
        addSymbol: function(symbol) {
            if (symbol !== null && symbol !== undefined && symbol instanceof Symbol) {
                this.symbols.push(symbol);
                symbol.visible = false;
            }
        },
        showWinAmount: function(show) {
            if (show) {
                this.winNumber.fadeIn();
            } else {
                this.winNumber.fadeOut();
            }
        },
        addBorder: function(border) {
            if (border !== null && border !== undefined && (border instanceof Border || border instanceof BufferedBorder)) {
                this.borders.push(border);
            }
        },
        addLineGfx: function(lineGfx) {
            if (lineGfx !== null && lineGfx !== undefined && lineGfx instanceof LineContent) {
                this.lineGfx = lineGfx;
            }
        },
        getLine: function() {
            return this.lineGfx;
        },
        getSymbolAnimation: function() {
            return this.symbols;
        },
        checkForDuplicateSymbolAtPosition: function(winLine) {
            for (var i = 0; i < this.symbols.length; i++) {
                var symOwn = this.symbols[i],
                    symOther = winLine.symbols[i];
                if (symOther === undefined) {
                    break;
                }
                if (symOwn.pos.x === symOther.pos.x && symOwn.pos.y === symOther.pos.y) {
                    symOwn.visible = false;
                }
            }
        },
        addLineResult: function(lineResult) {
            if (lineResult !== null && typeof lineResult !== "undefined") {
                this.lineResult = lineResult;
                this.winNumber = new AdpWinNumber(currencyFormatter.getMoneyStringForCanvas(lineResult.winSum), this.lineGfx, this.casino.controlOrientation, this.casino);
                this.winNumber.visible = false;
            }
        },
        showLine: function(visible) {
            this.visible = visible;
            this.showSymbols();
            this.showBorders();
            this.lineGfx.setVisible(visible, true);
        },
        showNumber: function(visible) {
            this.lineGfx.setNumberVisible(visible);
        },
        showSymbols: function() {
            for (var i = 0; i < this.symbols.length; i++) {
                this.symbols[i].visible = true;
            }
        },
        hideSymbols: function() {
            for (var i = 0; i < this.symbols.length; i++) {
                this.symbols[i].visible = false;
            }
        },
        showBorders: function() {
            for (var i = 0; i < this.borders.length; i++) {
                this.borders[i].visible = true;
            }
        },
        hideBorders: function() {
            for (var i = 0; i < this.borders.length; i++) {
                this.borders[i].visible = false;
            }
        },
        kill: function() {
            for (var i = 0; i < this.borders.length; i++) {
                this.borders[i].dispose();
            }
            for (var j = 0; j < this.symbols.length; j++) {
                this.symbols[j].dispose();
            }
        },
        containsOversizedSymbol: function() {
            var sym;
            for (var i = 0; i < this.symbols.length; i++) {
                sym = this.symbols[i];
                if (sym.currentAnim.isAlwaysOnTop) {
                    return true;
                }
            }
            return false;
        },
        getOversizedSymbols: function() {
            var syms = [];
            var sym;
            for (var i = 0; i < this.symbols.length; i++) {
                sym = this.symbols[i];
                if (sym.currentAnim.isAlwaysOnTop) {
                    syms.push(sym);
                }
            }
            return syms;
        },
        drawBorders: function() {
            for (var i = 0; i < this.borders.length; i++) {
                this.borders[i].draw();
            }
        },
        drawLine: function() {
            if (this.lineGfx !== undefined) {
                this.lineGfx.draw();
            }
        }
    });
});


// ../private/de/adp/web/data/paddingSpecification.js 
ig.baked = true;
ig.module('de.adp.web.data.paddingSpecification').requires('impact.impact').defines(function() {
    PaddingSpecification = ig.Class.extend({
        minimalSpinDurationInMilliseconds: 0,
        minimalSymbolCount: 0,
        linearCoefficient: null,
        absoluteCoefficient: null,
        distributionCoefficient: null,
        reelRunSounds: [],
        shallLoopReelRunSound: false,
        init: function() {}
    });
});

// ../private/de/adp/web/controller/gameActionIDs.js 
ig.baked = true;
ig.module('de.adp.web.controller.gameActionIDs').requires('impact.impact').defines(function() {
    GameActionIDs = ig.Class.extend({});
    GameActionIDs.RAISE_BET = "RAISE_BET";
    GameActionIDs.RAISE_BET_TO_MAX = "RAISE_BET_TO_MAX";
    GameActionIDs.RAISE_LINES = "RAISE_LINES";
    GameActionIDs.FINISH_GAME = "FINISH_GAME";
    GameActionIDs.COLLECT = "COLLECT";
    GameActionIDs.COLLECT_AND_SPIN = "COLLECT_AND_SPIN";
    GameActionIDs.PLAY = "PLAY";
    GameActionIDs.SKIP = "SKIP";
    GameActionIDs.TOGGLE_SOUND = "TOGGLE_SOUND";
    GameActionIDs.ENABLE_SOUND = "ENMABLE_SOUND";
    GameActionIDs.DISABLE_SOUND = "DISABLE_SOUND";
    GameActionIDs.TOGGLE_FULLSCREEN = "TOGGLE_FULLSCREEN";
    GameActionIDs.TOGGLE_AUTOPLAY_MENU = "TOGGLE_AUTOPLAY_MENU";
    GameActionIDs.INCREASE_AUTOSPINS = "INCREASE_AUTOSPINS";
    GameActionIDs.CLOSE_GAME = "CLOSE_GAME";
    GameActionIDs.START_AUTOPLAY = "START_AUTOPLAY";
    GameActionIDs.STOP_AUTOPLAY = "STOP_AUTOPLAY";
    GameActionIDs.PAUSE_AUTOPLAY = "PAUSE_AUTOPLAY";
});

// ../private/impact/scene.js 
ig.baked = true;
ig.module('impact.scene').requires('impact.node', 'impact.impact').defines(function() {
    ig.Scene = ig.Node.extend({
        name: "",
        init: function(name) {
            this.isRoot = true;
            this.pos.x = 0;
            this.pos.y = 0;
            if (name.length > 0) {
                this.name = name;
                ig.logger.log(Logger.LogLevel.INFO, "creating new Scene with name: " + name);
            } else {
                throw "The Name for the Scene is not valid";
            }
            this.parent(0, 0);
        },
        draw: function() {
            this.parent();
        }
    })
});

// ../private/impact/sceneManager.js 
ig.baked = true;
ig.module('impact.sceneManager').requires('impact.node', 'impact.scene', 'impact.impact').defines(function() {
    ig.SceneManager = ig.Node.extend({
        STATE_FADEOUT: 'fade out',
        STATE_FADEIN: 'fade in',
        STATE_SWITCHING: 'switching',
        STATE_FINISH: 'finish',
        STATE_NORMAL: 'normal',
        state: this.STATE_FINISH,
        name: "",
        scenes: new Array(),
        activeScene: null,
        nextScene: null,
        fadeRatio: 0.023,
        sceneAlpha: 1,
        fadeOut: false,
        fadeIn: false,
        init: function(name) {
            if (name.length > 0) {
                this.name = name;
                ig.logger.log(Logger.LogLevel.INFO, "creating new scene manager with name: " + name);
            } else {
                throw "The name for the SceneManager is not valid";
            }
            this.pos.x = 0;
            this.pos.y = 0;
            this.parent();
        },
        addScene: function(scene) {
            if (scene != null && scene != undefined && scene instanceof ig.Scene && this.getSceneByName(scene.name) == null) {
                scene.parent = this;
                this.scenes.push(scene);
            } else {
                throw "The Scene you are trying to add is not valid";
            }
        },
        removeScene: function(scene) {
            if (scene != null) {
                var indexOfScene = this.scenes.indexOf(scene);
                if (indexOfScene != -1) {
                    this.scenes.slice(indexOfScene, 1);
                } else {
                    throw "The scene you are trying to remove is not added to this scenemanager: " + this.name;
                }
            }
        },
        getSceneByName: function(sceneName) {
            var scene = null;
            if (sceneName.length > 0) {
                for (var i = 0; i < this.scenes.length; i++) {
                    if (this.scenes[i].name === sceneName) {
                        scene = this.scenes[i];
                    }
                }
            }
            return scene;
        },
        getSceneByIndex: function(sceneIndex) {
            var scene = null;
            if (index != -1) {
                if (this.scenes[index] != undefined && this.scenes[index] != null && this.scenes[index] instanceof ig.Scene) {
                    scene = this.scenes[index];
                }
            }
            return scene;
        },
        getActiveScene: function() {
            return this.activeScene;
        },
        setActiveScene: function(sceneName) {
            if (this.getSceneByName(sceneName) != null) {
                this.activeScene = this.getSceneByName(sceneName);
                ig.logger.log(Logger.LogLevel.INFO, "Setting " + sceneName + " as active Scene");
            } else {
                throw "SceneName not registered to this SceneManager: " + this.name;
            }
        },
        draw: function() {
            ig.system.context.save();
            ig.system.context.globalAlpha = this.sceneAlpha;
            this.activeScene.draw();
            ig.system.context.restore();
        },
        update: function() {
            switch (this.state) {
                case this.STATE_FADEOUT:
                    ig.logger.log(Logger.LogLevel.INFO, 'Fading out');
                    if (this.sceneAlpha > 0) {
                        this.sceneAlpha -= this.fadeRatio;
                    } else {
                        console.log('Switching State');
                        this.state = this.STATE_SWITCHING;
                    }
                    break;
                case this.STATE_FADEIN:
                    ig.logger.log(Logger.LogLevel.INFO, 'Fading in');
                    if (this.sceneAlpha < 1.01) {
                        this.sceneAlpha += this.fadeRatio;
                    } else {
                        this.sceneAlpha = 1;
                        this.state = this.STATE_FINISH;
                    }
                    break;
                case this.STATE_FINISH:
                    break;
                case this.STATE_SWITCHING:
                    ig.logger.log(Logger.LogLevel.INFO, 'Switching Scenes');
                    this.activeScene = this.getSceneByName(this.nextScene);
                    this.state = this.STATE_FADEIN;
                    break;
            }
            this.activeScene.update();
        },
        setStateToSwitch: function() {
            this.state = this.STATE_SWITCHING;
        },
        fadeSceneTo: function(sceneName) {
            this.state = this.STATE_FADEOUT;
            this.nextScene = sceneName;
        },
        isSwitched: function() {
            return this.state === this.STATE_FINISH;
        }
    });
});

// ../private/de/adp/web/gui/elements/textBox.js 
ig.baked = true;
ig.module("de.adp.web.gui.elements.textBox").requires("impact.node", 'impact.font').defines(function() {
    TextBox = ig.Node.extend({
        _font: null,
        _x: 0,
        _y: 0,
        _width: 0,
        _height: 0,
        _textFormat: {
            fontSize: 12,
            fontName: "Arial",
            fontStyle: "normal",
            fontColor: "#000",
            align: "left",
            verticalAlign: "bottom"
        },
        _context: null,
        _text: "",
        _textWidth: 0,
        _filters: [],
        _rotationAngleInRadian: 0,
        fillGradient: null,
        alpha: 1,
        debugStrokeStyle: "",
        downScaleFactor: 1,
        initialFontSize: 12,
        useSharperCanvas: false,
        isDirty: true,
        registeredAsResizable: false,
        init: function(x, y, width, height) {
            this.parent(x, y);
            this._width = width;
            this._height = height;
            this._context = ig.system.contextText;
            this.debugStrokeStyle = '#' + Math.floor(Math.random() * 16777215).toString(16);
            this.visible = true;
        },
        setTextFormat: function(fontSize, fontName, fontStyle, fontColor, alignment, verticalAlignment) {
            this._textFormat.fontName = fontName || "Arial";
            this._textFormat.fontSize = fontSize || 12;
            this.initialFontSize = this._textFormat.fontSize;
            this._textFormat.fontStyle = fontStyle || "normal";
            this._textFormat.align = alignment || "left";
            this._textFormat.verticalAlign = verticalAlignment || "bottom";
            this._textFormat.fontColor = fontColor || "#F0F";
            this.isDirty = true;
        },
        addTextFilter: function(textFilter) {
            if (textFilter instanceof TextFilter) {
                this._filters.push(textFilter);
                this.isDirty = true;
            }
        },
        removeTextFilter: function(textFilter) {
            if (textFilter instanceof TextFilter) {
                var idx = this._filters.indexOf(textFilter);
                this._filters.splice(idx, 1);
                this.isDirty = true;
            }
        },
        setText: function(text) {
            this.downScaleFactor = 1;
            this._textFormat.fontSize = this.initialFontSize;
            if (this._text !== text) {
                this.isDirty = true;
            }
            this._text = text;
            this._context.save();
            this._context.font = this._textFormat.fontStyle + " " + this._textFormat.fontSize + "px " + this._textFormat.fontName;
            this._context.textAlign = this._textFormat.align;
            var measuredWidth = this._context.measureText(text).width;
            var scaleFactor = this._width / measuredWidth;
            if (scaleFactor < 1) {
                this._context.restore();
                this.adjustTextSize(scaleFactor);
                return;
            } else {
                this._textWidth = measuredWidth;
            }
            this._context.restore();
        },
        draw: function() {
            this.parent();
            if (this.useSharperCanvas && ig.system.stageScale > 1) {
                if (!this.registeredAsResizable) {
                    ig.game.facade.gameGui.registerResizableObject(this);
                    this.registeredAsResizable = true;
                }
                if (this.isDirty) {
                    ig.system.resizableTextContext.clearRect((this.pos.x + this.offset.x) * ig.system.stageScale, (this.pos.y + this.offset.y) * ig.system.stageScale, this._width * ig.system.stageScale, this._height * ig.system.stageScale);
                    this.drawOnDoubleCanvas();
                    this.isDirty = false;
                }
            } else {
                this._context.save();
                this._context.globalAlpha = this.alpha;
                this._context.font = this._textFormat.fontStyle + " " + this._textFormat.fontSize + "px " + this._textFormat.fontName;
                this._context.textAlign = this._textFormat.align;
                this._context.textBaseline = this._textFormat.verticalAlign;
                var posX = this.getDrawPointX();
                var posY = this.getDrawPointY();
                if (this._rotationAngleInRadian !== 0) {
                    switch (this._textFormat.align) {
                        case "left":
                            this._context.translate(Math.floor(posX + (this._width * 0.5)), posY);
                            break;
                        case "center":
                            this._context.translate(posX, posY);
                            break;
                        case "right":
                            this._context.translate(posX - (this._width * 0.5), posY);
                            break;
                    }
                    posX = this.getRelationalDrawPointX() - (this._width * 0.5);
                    posY = this.getRelationalDrawPointY() - (this._height * 0.5);
                    this._context.rotate(this._rotationAngleInRadian);
                }
                for (var i = 0; i < this._filters.length; i++) {
                    var filter = this._filters[i];
                    filter.apply(this._context, this._text, posX, posY, false);
                }
                if (TextBox.DrawDebugRect) {
                    this._context.strokeStyle = this.debugStrokeStyle;
                    this._context.rect(this.pos.x + this.offset.x, this.pos.y + this.offset.y, this._width, this._height);
                    this._context.stroke();
                }
                this._context.imageSmoothingEnabled = true;
                if (this.fillGradient !== null) {
                    var transY = posY - this.getRelationalDrawPointY();
                    var grad = ig.system.context.createLinearGradient(0, transY, 0, transY + this._textFormat.fontSize);
                    for (var i = 0; i < this.fillGradient.colors.length; i++) {
                        var c = this.fillGradient.colors[i];
                        grad.addColorStop(c.value, c.color);
                    }
                    this._context.fillStyle = grad;
                } else {
                    this._context.fillStyle = this._textFormat.fontColor;
                }
                this._context.fillText(this._text, posX, posY);
                this._context.restore();
            }
        },
        drawOnDoubleCanvas: function() {
            var ratio = ig.system.stageScale;
            var can = ig.system.resizableOffscreenCanvas;
            var con = ig.system.resizableOffscreenContext;
            con.clearRect(0, 0, ig.system.resizableTextCanvas.width, ig.system.resizableTextCanvas.height);
            con.save();
            con.globalAlpha = this.alpha;
            con.font = this._textFormat.fontStyle + " " + this._textFormat.fontSize * ratio + "px " + this._textFormat.fontName;
            con.textAlign = this._textFormat.align;
            con.textBaseline = this._textFormat.verticalAlign;
            var posX = this.getDrawPointX() * ratio;
            var posY = this.getDrawPointY() * ratio;
            if (this._rotationAngleInRadian !== 0) {
                switch (this._textFormat.align) {
                    case "left":
                        con.translate(Math.floor(posX + (this._width * 0.5)), posY);
                        break;
                    case "center":
                        con.translate(posX, posY);
                        break;
                    case "right":
                        con.translate(posX - (this._width * 0.5 * ratio), posY);
                        break;
                }
                posX = (this.getRelationalDrawPointX() - (this._width * 0.5)) * ratio;
                posY = (this.getRelationalDrawPointY() - (this._height * 0.5)) * ratio;
                con.rotate(this._rotationAngleInRadian);
            }
            for (var i = 0; i < this._filters.length; i++) {
                var filter = this._filters[i];
                filter.apply(con, this._text, posX, posY, true);
            }
            if (TextBox.DrawDebugRect) {
                con.strokeStyle = this.debugStrokeStyle;
                con.rect((this.pos.x + this.offset.x) * ig.system.stageScale, (this.pos.y + this.offset.y) * ig.system.stageScale, this._width * ig.system.stageScale, this._height * ig.system.stageScale);
                con.stroke();
            }
            con.imageSmoothingEnabled = true;
            if (this.fillGradient !== null) {
                var transY = posY - this.getRelationalDrawPointY() * ratio;
                var grad = con.createLinearGradient(0, transY, 0, transY + this._textFormat.fontSize * ratio);
                for (var i = 0; i < this.fillGradient.colors.length; i++) {
                    var c = this.fillGradient.colors[i];
                    grad.addColorStop(c.value, c.color);
                }
                con.fillStyle = grad;
            } else {
                con.fillStyle = this._textFormat.fontColor;
            }
            con.shadowBlur = 0.1;
            con.shadowColor = this._textFormat.fontColor;
            con.fillText(this._text, posX, posY);
            con.restore();
            ig.system.resizableTextContext.drawImage(can, 0, 0);
        },
        adjustTextSize: function(scaleFactor) {
            this._textFormat.fontSize = Math.floor(this.initialFontSize * scaleFactor);
            this._context.save();
            this._context.font = this._textFormat.fontStyle + " " + this._textFormat.fontSize + "px " + this._textFormat.fontName;
            this._context.textAlign = this._textFormat.align;
            this._textWidth = this._context.measureText(this._text).width;
            this._context.restore();
            this.downScaleFactor = scaleFactor;
            this.isDirty = true;
        },
        getScaleDownRatio: function() {
            return this.downScaleFactor;
        },
        getTextWidth: function() {
            return this._textWidth;
        },
        getTextHeight: function() {
            return this._textFormat.fontSize;
        },
        getDrawPointX: function() {
            var px = this.pos.x + this.offset.x + this.getRelationalDrawPointX();
            return px;
        },
        getDrawPointY: function() {
            var py = this.pos.y + this.offset.y + this.getRelationalDrawPointY();
            return py
        },
        getRelationalDrawPointX: function() {
            var px = 0;
            switch (this._textFormat.align) {
                case "left":
                    px = 0;
                    break;
                case "right":
                    px = this._width;
                    break;
                case "center":
                    px = Math.floor(this._width / 2);
                    break;
                default:
                    px = 0;
            }
            return px;
        },
        getRelationalDrawPointY: function() {
            var py = 0;
            switch (this._textFormat.verticalAlign) {
                case "bottom":
                case "alphabetic":
                case "ideographic":
                    py = this._height;
                    break;
                case "middle":
                    py = this._height * 0.5;
                    break;
                case "top":
                case "hanging":
                    py = 0;
                    break;
                default:
                    py = 0;
            }
            return py
        },
        rotateAroundCenter: function(angle) {
            this._rotationAngleInRadian = angle * (Math.PI / 180);
            this.isDirty = true;
        },
        setFillGradient: function(gradient) {
            this.fillGradient = gradient;
            this.isDirty = true;
        },
        resize: function() {
            this.isDirty = true;
        },
        hide: function() {
            if (this.useSharperCanvas) {
                ig.system.resizableTextContext.clearRect((this.pos.x + this.offset.x) * ig.system.stageScale, (this.pos.y + this.offset.y) * ig.system.stageScale, this._width * ig.system.stageScale, this._height * ig.system.stageScale);
                this.isDirty = true;
            }
        },
        setAlpha: function(value) {
            this.alpha = value;
            this.isDirty = true;
        }
    });
    TextBox.DrawDebugRect = false;
});

// ../private/de/adp/web/gui/filters/textFilter.js 
ig.baked = true;
ig.module("de.adp.web.gui.filters.textFilter").requires("impact.impact").defines(function() {
    TextFilter = ig.Class.extend({
        init: function() {},
        apply: function(context, text, x, y) {
            throw "This method has to be overwritten by subclass";
        },
        getAddedWidth: function() {
            return 0;
        },
        getAddedHeight: function() {
            return 0;
        },
    });
});

// ../private/de/adp/web/gui/filters/textBackgroundFilter.js 
ig.baked = true;
ig.module("de.adp.web.gui.filters.textBackgroundFilter").requires("de.adp.web.gui.filters.textFilter").defines(function() {
    TextBackgroundFilter = TextFilter.extend({
        height: 0,
        color: "#000",
        init: function(height, color) {
            this.height = height;
            this.color = color;
        },
        apply: function(context, text, x, y) {
            context.save();
            context.fillStyle = this.color;
            context.fillRect(x, y - this.height, context.measureText(text).width, this.height);
            context.restore();
        }
    });
});

// ../private/de/adp/web/gui/elements/slideButton.js 
ig.baked = true;
ig.module("de.adp.web.gui.elements.slideButton").requires("impact.impact", 'de.adp.web.tracking.uitracker').defines(function() {
    SlideButton = ig.Class.extend({
        _view: null,
        callBackFunction: null,
        progress: 0,
        init: function(callback) {
            this.callBackFunction = callback;
            this.onSliderTouch = this.onSliderTouch.bind(this);
            this.onSliderTouchEnd = this.onSliderTouchEnd.bind(this);
            this.increaseSlideProgress = this.increaseSlideProgress.bind(this);
            this.decreaseSlideProgress = this.decreaseSlideProgress.bind(this);
            this.createSelf();
        },
        createSelf: function() {
            this._view = $('<div class="slider-btn-background slider-btn"></div>');
            this.label = $('<div class="slider-btn-label"></div>');
            this.activatedLabel = $('<div class="slider-btn-activated-label"></div>');
            this.sleigh = $('<div id="slider-btn-sleigh" class="slider-btn-slider"></div>');
            this.icon = $('<div class="slider-btn-icon"><img class="slider-btn-icon-gfx" src="private/de/adp/web/assets/buttons/ban_icon.png"></img></div>');
            $(this.sleigh).append(this.icon);
            $(this._view).append(this.label);
            $(this._view).append(this.sleigh);
            $(this._view).append(this.activatedLabel);
            $(this._view).on(ig.touchStartEvents, this.onSliderTouch);
        },
        onSliderTouch: function() {
            $(this._view).off(ig.touchStartEvents, this.onSliderTouch);
            $(this._view).on("mouseleave", this.onSliderTouchEnd);
            $(document).on(ig.touchEndEvents, this.onSliderTouchEnd);
            this.startPressAnimation();
        },
        onSliderTouchEnd: function() {
            $(document).off(ig.touchEndEvents, this.onSliderTouchEnd);
            $(this._view).off("mouseleave", this.onSliderTouchEnd);
            $(this._view).on(ig.touchStartEvents, this.onSliderTouch);
            if (this.progress >= 1) {
                this.onLockTriggered();
            } else {
                this.startReleaseAnimation();
            }
        },
        startPressAnimation: function() {
            if (this.interval) {
                clearInterval(this.interval);
            }
            this.interval = setInterval(this.increaseSlideProgress, 1000 / 33);
        },
        startReleaseAnimation: function() {
            if (this.interval) {
                clearInterval(this.interval);
            }
            $(this.activatedLabel).css("display", "none");
            this.interval = setInterval(this.decreaseSlideProgress, 500 / 33);
        },
        increaseSlideProgress: function() {
            this.progress = this.progress + 1 / 33;
            if (this.progress >= 1) {
                $(this.activatedLabel).css("display", "block");
                this.progress = 1;
                if (this.interval) {
                    clearInterval(this.interval);
                }
                $(this.icon).css("background-color", "#ff0000");
                return;
            }
            this.setPressProgress(this.progress);
        },
        decreaseSlideProgress: function() {
            this.progress = this.progress - 2 / 33;
            if (this.progress <= 0) {
                this.progress = 0;
                if (this.interval) {
                    clearInterval(this.interval);
                }
            }
            this.setPressProgress(this.progress);
        },
        setPressProgress: function(progress) {
            let newWidth = 20 + progress * 80;
            $(this.sleigh).css("width", newWidth + "%");
            let newColorValue = this.interpolateColorValueReversed(progress);
            let newColor = "#" + newColorValue + newColorValue + "0000";
            $(this.icon).css("background-color", newColor);
        },
        onLockTriggered: function() {
            this.callBackFunction();
        },
        interpolateColorValueReversed: function(progress) {
            let reversedValue = 1 - progress;
            let colorValue = 16 * reversedValue;
            if (colorValue > 15) {
                return "f";
            }
            if (colorValue > 14) {
                return "e";
            }
            if (colorValue > 13) {
                return "d";
            }
            if (colorValue > 12) {
                return "c";
            }
            if (colorValue > 11) {
                return "b";
            }
            if (colorValue >= 10) {
                return "a";
            }
            return "" + Math.floor(colorValue);
        },
        getView: function() {
            return this._view;
        },
        translate: function(resProv) {
            $(this.label).html(resProv.getString("ban24hours"));
            $(this.activatedLabel).html(resProv.getString("ban_active"));
        }
    });
});

// ../private/de/adp/web/gui/gameGui.js 
ig.baked = true;
ig.module('de.adp.web.gui.gameGui').requires('impact.impact', 'de.adp.web.payline.lineContainer', 'de.adp.web.reel.reelContainer', 'de.adp.web.symbol.symbol', 'de.adp.web.data.winnings', 'de.adp.web.gui.freegame.basicFreegameDisplay', 'de.adp.web.gui.freegame.basicFreegameCounter', 'de.adp.web.gui.freegame.basicSummaryDisplay', 'de.adp.web.payline.winLine', 'de.adp.web.data.paddingSpecification', 'de.adp.web.controller.gameActionIDs', 'impact.sceneManager', "de.adp.web.gui.elements.textBox", "de.adp.web.gui.filters.textBackgroundFilter", "de.adp.web.gui.elements.slideButton").defines(function() {
    GameGui = ig.Class.extend({
        idleTimeOut: null,
        facade: null,
        casino: null,
        background: null,
        reelContainer: null,
        lineContainer: null,
        paytable: null,
        gameResult: null,
        sceneManager: null,
        darkeningLayer: null,
        winAnimation: null,
        gameRoundPhaseAfterResultAnimation: "MAIN_GAME",
        symbols: [],
        winnings: new Winnings(),
        scenes: [],
        paddingSpecifications: {},
        activePaddingSpecification: null,
        defaultPaddingSpecification: null,
        frameWorkInfoTextbox: {},
        gameClientInfoTextBox: {},
        eocInfoTextBox: {},
        showDebugInfo: false,
        debugClicks: 5,
        lastTouchX: 0,
        lastTouchY: 0,
        debugClickTimeOut: undefined,
        resizesableObjects: [],
        pausableObjects: [],
        runningInFullscreen: false,
        rotationHintLayer: null,
        init: function(casino) {
            this.defaultPaddingSpecification = new PaddingSpecification();
            this.paddingSpecifications = this.createPaddingSpecifications();
            this.sceneManager = new ig.SceneManager("sceneManager");
            this.casino = casino;
            if (this.casino.networkProvider.pause) {
                this.registerPausableObject(this.casino.networkProvider);
            }
            this.bindFunctionsToClass();
            if (ig.system.isHDSupported) {
                this.background = this.createHDBackground();
                this.reelContainer = this.createHDReelContainer();
                this.lineContainer = this.createHDLineContainer();
                this.darkeningLayer = this.createHDDarkeningLayer();
                this.symbols = this.createHDSymbols();
            } else {
                this.background = this.createBackground();
                this.reelContainer = this.createReelContainer();
                this.lineContainer = this.createLineContainer();
                this.darkeningLayer = this.createDarkeningLayer();
                this.symbols = this.createSymbols();
            }
            this.rotationHintLayer = this.createRotationHintLayer();
            var rotationScene = new ig.Scene("rotationHint");
            rotationScene.addChild(this.rotationHintLayer);
            this.winAnimation = this.createWinAnimation();
            this.reelContainer.registerCallback(this.onReelMotionFinished);
            this.winAnimation.addLineAndReelContainer(this.lineContainer, this.reelContainer);
            this.winAnimation.addCasino(casino);
            this.reelContainer.setAvailableSymbols(this.symbols);
            this.winAnimation.setAvailableSymbols(this.symbols);
            window.onresize = this.onResize;
            var scene = new ig.Scene("main");
            scene.addChild(this.reelContainer);
            if (this.darkeningLayer !== null) {
                scene.addChild(this.darkeningLayer);
            }
            scene.addChild(this.background);
            scene.addChild(this.lineContainer);
            scene.addChild(this.winAnimation);
            if (typeof gameinformation !== "undefined") {
                var backgroundFilter = new TextBackgroundFilter(30, "#000");
                this.frameWorkInfoTextbox = new TextBox(920 - 250, 0, 200, 30);
                this.frameWorkInfoTextbox.addTextFilter(backgroundFilter);
                this.frameWorkInfoTextbox.setTextFormat(16, "Arial", "normal", "#FFF", "left");
                this.frameWorkInfoTextbox.setText("Frameworkversion: " + gameinformation.frameworkversion);
                this.gameClientInfoTextBox = new TextBox(920 - 250, 30, 200, 30);
                this.gameClientInfoTextBox.addTextFilter(backgroundFilter);
                this.gameClientInfoTextBox.setTextFormat(16, "Arial", "normal", "#FFF", "left");
                this.gameClientInfoTextBox.setText("Gameclientversion: " + gameinformation.gameclientversion);
                this.eocInfoTextBox = new TextBox(920 - 250, 60, 200, 30);
                this.eocInfoTextBox.addTextFilter(backgroundFilter);
                this.eocInfoTextBox.setTextFormat(16, "Arial", "normal", "#FFF", "left");
                this.eocInfoTextBox.setText("Core-JS Version: " + gameinformation.eoccoreversion);
            }
            $('#paytableButton').on(ig.touchEvents, this.showPaytable);
            $('#helpButton').on(ig.touchEvents, this.showHelp);
            $("#add-close-help-btn").on(ig.touchEvents, this.hideHelp);
            $("#add-close-paytable-btn").on(ig.touchEvents, this.hidePaytable);
            $('#fullScreenWrapper').on(ig.touchEvents, this.toggleFullscreen);
            if (ig.system.isHDSupported) {
                this.paytable = this.createHDCanvasPaytable();
            } else {
                this.paytable = this.createCanvasPaytable();
            }
            this.paytable.visible = false;
            $("#add-close-paytable-btn").on(ig.touchEvents, this.hidePaytable);
            $("#add-close-paytable-btn").css("display", "none");
            this.paytable.setPaytableModel(this.casino.networkProvider.lastResult.payTable());
            this.sceneManager.addScene(rotationScene);
            this.sceneManager.addScene(scene);
            this.sceneManager.setActiveScene("main");
            this.activePaddingSpecification = this.getPaddingSpecification();
            if (this.casino.mustShowBanButton()) {
                this.createBanButton();
            }
        },
        createBanButton: function() {
            let slideBtn = new SlideButton(this.onBanActivated);
            $("#header").append(slideBtn.getView());
            this.casino.resourceProvider.registerTranslatableObject(slideBtn);
        },
        onBanActivated: function() {
            this.casino.banPlayer();
            this.facade.root.pauseGame();
        },
        getJackpotDisplayWidth: function() {
            return 100;
        },
        getJackpotDisplayHeight: function() {
            return 50;
        },
        getJackpotDisplayX: function() {
            return 0;
        },
        getJackpotDisplayY: function() {
            return 0;
        },
        createRotationHintLayer: function() {
            var layer = new ig.Node(0, 0);
            var rotationHint = new ig.Image("private/de/adp/web/assets/misc/rotation2.png");
            rotationHint.pos.x = 0.5 * (920 - 600);
            rotationHint.pos.y = 0.5 * (530 - 600);
            rotationHint.visible = true;
            layer.visible = false;
            layer.addChild(rotationHint);
            return layer;
        },
        showRotationHint: function() {
            if (this.sceneManager.getActiveScene().name !== "rotationHint") {
                this.facade.pauseGame();
                this.lastActiveScene = this.sceneManager.getActiveScene().name;
                this.rotationHintLayer.visible = true;
                this.sceneManager.setActiveScene("rotationHint");
                $("#game-controls").css("visibility", "hidden");
                $("#support-game-controls").css("visibility", "hidden");
                $("#depotDisplay").css("visibility", "hidden");
                $("#mobile-menu-container").css("visibility", "hidden");
                $("#display-layer").css("display", "none");
                this.winVisibility = $(".win-panel").css("visibility");
                $(".win-panel").css("visibility", "hidden");
                if (this.facade.getActiveAddonGame()) {
                    this.facade.getActiveAddonGame().hide();
                }
                this.facade.inputHandler.unbindAllListeners();
            }
        },
        hideRotationHint: function() {
            if (this.lastActiveScene) {
                this.rotationHintLayer.visible = false;
                this.sceneManager.setActiveScene(this.lastActiveScene);
                $("#game-controls").css("visibility", "visible");
                $("#support-game-controls").css("visibility", "visible");
                $("#depotDisplay").css("visibility", "visible");
                $("#mobile-menu-container").css("visibility", "visible");
                $("#display-layer").css("display", "block");
                $(".win-panel").css("visibility", this.winVisibility);
                this.facade.sendNotification("UPDATE_BUTTONS");
                if (this.facade.getActiveAddonGame()) {
                    this.facade.getActiveAddonGame().show();
                }
                this.facade.resumeGame();
            }
        },
        registerResizableObject: function(o) {
            if (o.resize == undefined) {
                throw new Error("ResizableObject must provide the method 'resize'");
                return;
            }
            this.resizesableObjects.push(o);
        },
        registerPausableObject: function(o) {
            if (o.pause == undefined) {
                throw new Error("PausableObject must provide the method 'pause'");
                return;
            }
            if (o.resume == undefined) {
                throw new Error("PausableObject must provide the method 'resume'");
                return;
            }
            this.pausableObjects.push(o);
        },
        unRegisterPausableObject: function(o) {
            if (o.pause == undefined) {
                throw new Error("PausableObject must provide the method 'pause'");
                return;
            }
            if (o.resume == undefined) {
                throw new Error("PausableObject must provide the method 'resume'");
                return;
            }
            var idx = this.pausableObjects.indexOf(o);
            if (idx !== -1) {
                this.pausableObjects.splice(idx, 1);
            }
        },
        createPaddingSpecifications: function() {
            var paddingSpecificationWithLoops = new PaddingSpecification();
            paddingSpecificationWithLoops.shallLoopReelRunSound = true;
            paddingSpecificationWithLoops.minimalSpinDurationInMilliseconds = 3000;
            var paddingSpecificationWithLoops5000 = new PaddingSpecification();
            paddingSpecificationWithLoops5000.shallLoopReelRunSound = true;
            paddingSpecificationWithLoops5000.minimalSpinDurationInMilliseconds = 5000;
            return {
                0: this.defaultPaddingSpecification,
                3000: paddingSpecificationWithLoops,
                5000: paddingSpecificationWithLoops5000
            };
        },
        bindFunctionsToClass: function() {
            this.onGameFinish = this.onGameFinish.bind(this);
            this.onReelMotionFinished = this.onReelMotionFinished.bind(this);
            this.onResultAnimationFinished = this.onResultAnimationFinished.bind(this);
            this.proceedAutoPlay = this.proceedAutoPlay.bind(this);
            this.proceedAutoCollect = this.proceedAutoCollect.bind(this);
            this.updateWinSum = this.updateWinSum.bind(this);
            this.showControls = this.showControls.bind(this);
            this.hideControls = this.hideControls.bind(this);
            this.isValidScrollArea = this.isValidScrollArea.bind(this);
            this.onResize = this.onResize.bind(this);
            this.touchMove = this.touchMove.bind(this);
            this.touchStart = this.touchStart.bind(this);
            this.showPaytable = this.showPaytable.bind(this);
            this.hidePaytable = this.hidePaytable.bind(this);
            this.showHelp = this.showHelp.bind(this);
            this.hideHelp = this.hideHelp.bind(this);
            this.toggleFullscreen = this.toggleFullscreen.bind(this);
            this.onScreenSizeChange = this.onScreenSizeChange.bind(this);
            this.screenChangeNotification = this.screenChangeNotification.bind(this);
            this.onVolumeChange = this.onVolumeChange.bind(this);
            this.onResultReceived = this.onResultReceived.bind(this);
            this.onInitResultReceived = this.onInitResultReceived.bind(this);
            this.unlockDebugInfo = this.unlockDebugInfo.bind(this);
            this.resetDebugClicks = this.resetDebugClicks.bind(this);
            this.onEnterFullscreenIE = this.onEnterFullscreenIE.bind(this);
            this.onLeaveFullscreenIE = this.onLeaveFullscreenIE.bind(this);
            this.showVolumeSlider = this.showVolumeSlider.bind(this);
            this.toggleSound = this.toggleSound.bind(this);
            this.hideVolumeSlider = this.hideVolumeSlider.bind(this);
            this.onBanActivated = this.onBanActivated.bind(this);
        },
        toggleFullscreen: function(evt) {
            this.facade.sendNotification(GameActionIDs.TOGGLE_FULLSCREEN);
            evt.stopPropagation();
        },
        onResize: function() {
            $(document.body).width(window.innerWidth).height(window.innerHeight);
        },
        onEnterFullscreenIE: function() {
            this.onScreenSizeChangeIE(false);
        },
        onLeaveFullscreenIE: function() {
            this.onScreenSizeChangeIE(true);
        },
        onScreenSizeChangeIE: function(exitFullscreen) {
            var iframe = window.parent.document.documentElement.getElementsByTagName('iFrame');
            if (exitFullscreen) {
                $(iframe).css('width', $(iframe).attr('data-oldwidth'));
                $(iframe).css('height', $(iframe).attr('data-oldheight'));
            } else {
                var height = window.parent.document.documentElement.clientHeight,
                    width = window.parent.document.documentElement.clientWidth;
                $(iframe).attr('data-oldwidth', $(iframe).css('width'));
                $(iframe).attr('data-oldheight', $(iframe).css('height'));
                $(iframe).css('width', width + 'px');
                $(iframe).css('height', height + 'px');
            }
            this.screenChangeNotification();
        },
        onScreenSizeChange: function(evt) {
            setTimeout(this.screenChangeNotification, 250);
        },
        screenChangeNotification: function(pWidth, pHeight) {
            this.resetSettings();
            this.facade.sendNotification("GAME_SIZE_CHANGED", {
                width: pWidth,
                height: pHeight
            });
        },
        onVolumeChange: function(evt, value) {
            this.casino.soundPlayer.setVolumeTo((evt.currentTarget.valueAsNumber / 100));
            this.casino.soundPlayer.playEffect("SFX_BlinkUp1");
        },
        resetSettings: function() {
            this.facade.sendNotification("CLOSE_ALL_OPEN_MENUS");
        },
        touchStart: function(e) {
            $("body").on("touchmove", this.touchMove);
            this.lastTouchX = e.originalEvent.touches ? e.originalEvent.touches[0].pageX : e.pageX;
            this.lastTouchY = e.originalEvent.touches ? e.originalEvent.touches[0].pageY : e.pageY;
        },
        touchMove: function(e) {
            ig.logger.log(Logger.LogLevel.INFO, "Current Scrolltarget is Valid: " + this.isValidScrollArea(e.target));
            if (!this.isValidScrollArea(e.target)) {
                e.preventDefault();
                e.stopPropagation();
                return;
            }
            var currTouchX = e.originalEvent.touches ? e.originalEvent.touches[0].pageX : e.pageX;
            var currTouchY = e.originalEvent.touches ? e.originalEvent.touches[0].pageY : e.pageY;
            if (Math.abs(currTouchX - this.lastTouchX) > 0 && Math.abs(currTouchY - this.lastTouchY) <= 10) {
                ig.logger.log(Logger.LogLevel.INFO, "Detected only horizontal scroll preventing scrolling");
                e.preventDefault();
                e.stopPropagation();
                this.lastTouchX = currTouchX;
                this.lastTouchY = currTouchY;
                return;
            }
        },
        showControls: function(e) {
            if (!this.facade.animationsInProgress) {
                $("#game-controls").show();
                $("#support-game-controls").show();
            }
        },
        hideControls: function(e) {
            if (!this.facade.animationsInProgress && !this.facade.autoPlay.autoSpinActive) {
                $("#game-controls").hide();
                $("#support-game-controls").hide();
            }
        },
        unlockDebugInfo: function() {
            if (this.debugClickTimeOut !== undefined) {
                clearTimeout(this.debugClickTimeOut);
            }
            this.debugClickTimeOut = setTimeout(this.resetDebugClicks, 750);
            if (this.debugClicks > 0 && !this.showDebugInfo) {
                this.debugClicks--;
                if (this.debugClicks === 0) {
                    this.showDebugInfo = true;
                }
            } else if (this.debugClicks <= 5 && this.showDebugInfo) {
                this.debugClicks++;
                if (this.debugClicks === 5) {
                    this.showDebugInfo = false;
                }
            }
        },
        resetDebugClicks: function() {
            this.debugClicks = this.showDebugInfo ? 0 : 5;
        },
        createBackground: function() {
            throw "createBackground: Needs to be overwritten by Subclass";
        },
        createHDBackground: function() {
            throw "createHDBackground: Needs to be overwritten by Subclass";
        },
        createReelContainer: function() {
            throw "createReelContainer: Needs to be overwritten by Subclass";
        },
        createHDReelContainer: function() {
            throw "createHDReelContainer: Needs to be overwritten by Subclass";
        },
        createLineContainer: function() {
            throw "createLineContainer: Needs to be overwritten by Subclass";
        },
        createHDLineContainer: function() {
            throw "createHDLineContainer: Needs to be overwritten by Subclass";
        },
        createPaytable: function() {
            throw "createPaytable: Needs to be overwritten by Subclass";
        },
        createCanvasPaytable: function() {},
        createHDCanvasPaytable: function() {},
        createDarkeningLayer: function() {
            return null;
        },
        createHDDarkeningLayer: function() {},
        createWinAnimation: function() {
            throw "createWinAnimation: Needs to be overwritten by Subclass";
        },
        createSymbols: function() {
            throw "createSymbols: Needs to be overwritten by Subclass";
        },
        createHDSymbols: function() {
            throw "createHDSymbols: Needs to be overwritten by Subclass";
        },
        updateLineContainer: function(amount) {
            this.getActiveLineContainer().showLineForStep(amount);
        },
        addAddonGame: function(addonGui) {
            if (addonGui !== undefined && addonGui !== null) {
                this.scenes.push(addonGui);
                if (this.sceneManager !== undefined && this.sceneManager !== null) {
                    this.sceneManager.addScene(addonGui);
                } else {
                    throw "No SceneManager created";
                }
                addonGui.visible = false;
            }
        },
        startGameFlow: function() {
            if (this.casino.getCasinoConfiguration("ENABLE_SKIP_REELSPIN")) {
                this.reelContainer.isSkippingAllowed = true;
            }
            if (ig.ua.iOS) {
                $("#mobileMenuExpander").removeClass('desktopGameMenu-mobilemenu-left');
                setTimeout(function() {
                    $("#mobileMenuExpander").addClass('desktopGameMenu-mobilemenu-left');
                }, 10);
            }
            this.facade.sendNotification("GAME_ROUND_FINISHED", true);
        },
        onResultAnimationFinished: function() {
            if (this.casino.getCasinoConfiguration("ENABLE_SKIP_REELSPIN")) {
                this.reelContainer.isSkippingAllowed = true;
            }
            this.facade.sendNotification("RESULT_ANIMATION_FINISHED", this.facade.lastResponse);
        },
        startNextRound: function() {
            if (this.facade.autoPlay !== null && this.facade.autoPlay.autoSpinActive) {
                if (this.facade.lastResponse.uncommittedWinSum > 0 && this.facade.lastResponse.gameResult.freeGameRound === 0) {
                    this.idleTimeOut = setTimeout(this.proceedAutoCollect, 300);
                } else {
                    this.facade.animationsInProgress = false;
                    if (this.casino.depotProvider.canAfford(this.facade.getTotalStake())) {
                        this.idleTimeOut = setTimeout(this.proceedAutoPlay, 400);
                    } else {
                        this.facade.autoPlay.stop();
                    }
                }
            } else {
                this.facade.animationsInProgress = false;
                if (this.facade.lastResponse.uncommittedWinSum > 0 && this.facade.lastResponse.gameResult.freeGameRound === 0) {
                    this.facade.sendNotification("COLLECT", true);
                } else {
                    if (this.casino.depotProvider.canAfford(this.facade.getTotalStake())) {
                        this.facade.root.enableSettings();
                        this.facade.sendNotification("UPDATE_BUTTONS");
                    }
                }
            }
        },
        proceedAutoPlay: function() {
            clearTimeout(this.idleTimeOut);
            this.facade.sendNotification("PROCEED_AUTOPLAY");
            return true;
        },
        proceedAutoCollect: function() {
            clearTimeout(this.idleTimeOut);
            this.facade.autoPlay.collect();
        },
        updateWinSum: function(winSum) {
            this.casino.displayProvider.addToWinSumDisplay(winSum);
        },
        draw: function() {
            this.sceneManager.draw();
        },
        update: function() {
            this.sceneManager.update();
            if (ig.input.pressed('showGameInfo')) {
                this.showDebugInfo = !this.showDebugInfo;
            }
            if (typeof gameinformation !== "undefined") {
                if (this.frameWorkInfoTextbox.visible && !this.showDebugInfo) {
                    this.frameWorkInfoTextbox.visible = false;
                    this.gameClientInfoTextBox.visible = false;
                    this.eocInfoTextBox.visible = false;
                    this.sceneManager.getActiveScene().removeChild(this.frameWorkInfoTextbox);
                    this.sceneManager.getActiveScene().removeChild(this.gameClientInfoTextBox);
                    this.sceneManager.getActiveScene().removeChild(this.eocInfoTextBox);
                } else if (!this.frameWorkInfoTextbox.visible && this.showDebugInfo) {
                    this.sceneManager.getActiveScene().addChild(this.eocInfoTextBox);
                    this.sceneManager.getActiveScene().addChild(this.gameClientInfoTextBox);
                    this.sceneManager.getActiveScene().addChild(this.frameWorkInfoTextbox);
                    this.frameWorkInfoTextbox.visible = true;
                    this.gameClientInfoTextBox.visible = true;
                    this.eocInfoTextBox.visible = true;
                }
            }
        },
        setClearColor: function(color) {
            if (color.match(/#[0-9,A-F]+/)) {
                ig.game.clearColor = color;
            } else {
                throw "Please specify a color in the Format #FFFFFF or #A3A3A3";
            }
        },
        setInitialResult: function(response) {
            if (response.responseType === "INIT") {
                this.onInitResultReceived(response.gameResult);
            } else {
                this.getActiveLineContainer().showAllLines(false, true);
                this.gameResult = response.gameResult;
                this.reelContainer.setResult(this.gameResult);
            }
        },
        setResult: function(result, nextGameRoundPhase) {
            this.gameRoundPhaseAfterResultAnimation = nextGameRoundPhase;
            this.getActiveLineContainer().showAllLines(false, true);
            this.onResultReceived(result.gameResult);
        },
        setFacade: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            }
        },
        onGameFinish: function(result) {},
        onReelMotionFinished: function() {
            this.scanGameResult(this.gameResult);
        },
        onAddonGameFinsih: function(addongameid) {
            "use strict";
        },
        onInitResultReceived: function(data) {
            this.gameResult = data;
            this.reelContainer.setInitMatrix(this.gameResult);
        },
        onResultReceived: function(data, isReconstruction) {
            this.gameResult = data;
            var minGameRoundDuration = SpinDelayTimer.getMinimalSpinDuration(this.casino, this.facade);
            this.reelContainer.isSkippingAllowed = false;
            if (isReconstruction) {
                this.reelContainer.isSkippingAllowed = false;
            } else {
                if (minGameRoundDuration < 200 && this.casino.getCasinoConfiguration("ENABLE_SKIP_REELSPIN")) {
                    this.reelContainer.isSkippingAllowed = true;
                }
                this.reelContainer.setResult(this.gameResult);
            }
            if (this.activePaddingSpecification.reelRunSounds.length > 0) {
                this.reelContainer.addReelRunSounds(this.activePaddingSpecification.reelRunSounds);
            }
            this.reelContainer.shallLoopReelRunSound = this.activePaddingSpecification.shallLoopReelRunSound;
            this.reelContainer.startReels(false);
        },
        directlyFinishResult: function(result) {
            this.reelContainer.directlyFinishReelRun(result);
        },
        scanGameResult: function(gameResult) {
            this.winAnimation.buildWinningLines(this.facade.lastResponse);
            var wins = [];
            for (var i = 0; i < gameResult.winnings.length; i++) {
                var win = gameResult.winnings[i];
                wins.push(win);
            }
            this.winnings.fill(wins);
            this.winAnimation.beginAnimation(this.darkeningLayer);
        },
        setPaytableHightlight: function(symbolId, occurence) {
            this.paytable.setHighlight(symbolId, occurence);
        },
        toggleGameControls: function() {
            if (this.facade === null) {
                return;
            }
            if (!this.facade.autoPlay._autoSpinActive) {
                $("#game-controls").toggle();
            }
        },
        cleanWinAnimation: function() {
            this.paytable.clean();
            this.winAnimation.clean();
        },
        showWinAnimation: function(show) {
            this.winAnimation.showAnimation(show);
        },
        isValidScrollArea: function(target) {
            ig.logger.log(Logger.LogLevel.INFO, target.id || target.className);
            if (target.id === "settings-spinner-bar" || target.id === "settings-button-bar" || target.id === "paytable" || target.id === "help-container" || target.id === "canvas" || target.id === "activateSound-screen" || target.id === "depotDisplay") {
                return false;
            }
            if (target.className.indexOf('scroll-gradiant-bottom') > -1 || target.className.indexOf('scroll-gradiant-top') > -1) {
                return false;
            }
            return true;
        },
        getPaddingSpecification: function() {
            var minSpinDuration = SpinDelayTimer.getMinimalSpinDuration(this.casino, this.facade);
            var padSpec = this.paddingSpecifications[minSpinDuration];
            if (padSpec === undefined) {
                padSpec = this.defaultPaddingSpecification;
            }
            padSpec.minimalSpinDurationInMilliseconds = minSpinDuration;
            var l = this.reelContainer.reels.length;
            padSpec.minimalSymbolCount = this.reelContainer.reels[l - 1].calculateMinimalSymbolCount(this.casino, this.facade);
            this.activePaddingSpecification = padSpec;
            return padSpec;
        },
        toggleSound: function() {
            this.facade.sendNotification(GameActionIDs.TOGGLE_SOUND);
        },
        showVolumeSlider: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            if (this.facade.casino.soundPlayer.soundOn) {
                $("#soundWrapper").off(ig.touchEvents, this.showVolumeSlider);
                $("#soundWrapper").off(ig.touchEvents, this.hideVolumeSlider);
                $("#soundWrapper").on(ig.touchEvents, this.hideVolumeSlider);
                $("#soundWrapper").addClass("desktopGameMenu-settings-active");
                if (evt !== undefined) {
                    this.casino.soundPlayer.playEffect("SFX_SettingsButton");
                }
                $("#volumeWrapper").show();
            }
        },
        hideVolumeSlider: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            if (this.facade.casino.soundPlayer.soundOn) {
                $("#soundWrapper").off(ig.touchEvents, this.hideVolumeSlider);
                $("#soundWrapper").off(ig.touchEvents, this.showVolumeSlider);
                $("#soundWrapper").on(ig.touchEvents, this.showVolumeSlider);
                $("#soundWrapper").removeClass("desktopGameMenu-settings-active");
                if (evt !== undefined) {
                    this.casino.soundPlayer.playEffect("SFX_SettingsButton");
                }
                $("#volumeWrapper").hide();
            }
        },
        showPaytable: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            if (!this.facade.autoPlay.autoSpinActive) {
                this.sceneManager.getActiveScene().addChild(this.paytable);
                this.sceneManager.getActiveScene().removeChild(this.winAnimation);
                this.facade.sendNotification('CLOSE_ALL_OPEN_MENUS');
                this.paytable.visible = true;
                this.paytable.onDisplay();
                if ($('#help-box').css('display') === 'block') {
                    this.hideHelp();
                }
                if (ig.ua.mobile) {
                    this.facade.hoverTouchUnstick();
                }
                if (evt !== undefined) {
                    this.casino.soundPlayer.playEffect("SFX_SettingsButton");
                }
                $('.button-bar').css('visibility', 'hidden');
                $("#game-controls").css('visibility', 'hidden');
                $("#support-game-controls").css('visibility', 'hidden');
                $("#paytableButton").addClass('desktopGameMenu-paytable-active');
                $('#paytableButton').off(ig.touchEvents, this.showPaytable);
                $('#paytableButton').on(ig.touchEvents, this.hidePaytable);
                $("#add-close-paytable-btn").css("display", "block");
                $("#display-layer").css("display", "none");
                this.hideVolumeSlider();
                var soundWasPaused = this.casino.soundPlayer.ambientIsPaused;
                this.facade.pauseGame();
                if (!soundWasPaused) {
                    this.casino.soundPlayer.resumeAmbientSound();
                }
                if (this.facade.currentGameRoundPhase == "PLACE_BETS") {
                    this.facade.inputHandler.unbindAllListeners();
                    this.facade.inputHandler.bindBetButtons();
                    this.facade.inputHandler.bindSettingsButtons();
                }
            }
        },
        togglePaytable: function() {
            if (this.paytable.visible) {
                this.hidePaytable();
            } else {
                this.showPaytable();
            }
        },
        hidePaytable: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            var soundWasPaused = this.casino.soundPlayer.ambientIsPaused;
            this.facade.resumeGame();
            this.sceneManager.getActiveScene().removeChild(this.paytable);
            this.sceneManager.getActiveScene().addChild(this.winAnimation);
            if (ig.ua.mobile) {
                this.facade.hoverTouchUnstick();
            }
            if (evt !== undefined) {
                this.casino.soundPlayer.playEffect("SFX_SettingsButton");
            }
            this.paytable.hide();
            $('.button-bar').css('visibility', '');
            $("#game-controls").css('visibility', '');
            $("#support-game-controls").css('visibility', '');
            $("#paytableButton").removeClass('desktopGameMenu-paytable-active');
            $('#paytableButton').off(ig.touchEvents, this.hidePaytable);
            $('#paytableButton').on(ig.touchEvents, this.showPaytable);
            $("#display-layer").css("display", "block");
            $("#add-close-paytable-btn").css("display", "none");
            this.facade.sendNotification("UPDATE_BUTTONS");
            this.hideVolumeSlider();
        },
        showHelp: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            if (!this.facade.autoPlay.autoSpinActive) {
                this.facade.sendNotification('CLOSE_ALL_OPEN_MENUS');
                this.casino.buttonProvider.disableButtons();
                if (this.paytable.visible) {
                    this.hidePaytable();
                }
                if (ig.ua.mobile) {
                    this.facade.hoverTouchUnstick();
                }
                if (evt !== undefined) {
                    this.casino.soundPlayer.playEffect("SFX_SettingsButton");
                }
                $('.button-bar').css('visibility', 'hidden');
                $('#help-box').show();
                $("#game-controls").css('visibility', 'hidden');
                $("#support-game-controls").css('visibility', 'hidden');
                $("#helpButton").addClass('desktopGameMenu-help-active');
                $('#helpButton').off(ig.touchEvents, this.showHelp);
                $('#helpButton').on(ig.touchEvents, this.hideHelp);
                $("#display-layer").css("display", "none");
                this.hideVolumeSlider();
                this.facade.pauseGame();
                this.casino.soundPlayer.resumeAmbientSound();
            }
        },
        toggleHelp: function() {
            if ($('#help-box').css("display") === "none") {
                this.showHelp();
            } else {
                this.hideHelp();
            }
        },
        hideHelp: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.facade.resumeGame();
            if (ig.ua.mobile) {
                this.facade.hoverTouchUnstick();
            }
            if (evt !== undefined) {
                this.casino.soundPlayer.playEffect("SFX_SettingsButton");
            }
            this.casino.buttonProvider.enableButtons();
            $('.button-bar').css('visibility', '');
            $('#help-box').hide();
            $("#game-controls").css('visibility', '');
            $("#support-game-controls").css('visibility', '');
            $("#helpButton").removeClass('desktopGameMenu-help-active');
            $('#helpButton').off(ig.touchEvents, this.hideHelp);
            $('#helpButton').on(ig.touchEvents, this.showHelp);
            $("#display-layer").css("display", "block");
            this.hideVolumeSlider();
        },
        setUpFrameRateCounter: function() {
            var counter = $("<div id='fps-counter'></div>");
            $("#main").append(counter);
        },
        createShortCutExplanation: function() {},
        showShortCutExplanation: function() {},
        initializePaytableWithSmallestStake: function() {
            this.paytable.setStake(this.facade.getLowestStakePerLine(), this.facade.getLowestStake());
            this.paytable.initWithLowestStake();
        },
        initializePaytableWithBiggestStake: function() {
            this.paytable.setStake(this.facade.getBiggestStakePerLine(), this.facade.getBiggestStake());
            this.paytable.initWithBiggestStake();
        },
        getActiveLineContainer: function() {
            "use strict";
            return this.lineContainer;
        },
        isPaytableViewActive: function() {
            "use strict";
            return this.paytable.visible === true;
        },
        pauseGame: function() {
            this.reelContainer.pause();
            for (var i = 0; i < this.pausableObjects.length; i++) {
                this.pausableObjects[i].pause();
            }
        },
        resumeGame: function() {
            this.reelContainer.resume();
            for (var i = 0; i < this.pausableObjects.length; i++) {
                this.pausableObjects[i].resume();
            }
        }
    });
});

// ../private/de/adp/web/input/key.js 
ig.baked = true;
ig.module('de.adp.web.input.key').requires('impact.impact').defines(function() {
    Key = ig.Class.extend({});
    Key.SPACE = 32;
    Key.UP = 38;
    Key.LEFT = 37;
    Key.RIGHT = 39;
    Key.DOWN = 40;
    Key.F = 70;
    Key.N = 78;
    Key.M = 77;
    Key.B = 66;
    Key.V = 86;
    Key.C = 67;
    Key.X = 88;
    Key.A = 65;
    Key.S = 83;
});


// ../private/de/adp/web/input/hardwareKey.js 
ig.baked = true;
ig.module('de.adp.web.input.hardwareKey').requires('impact.impact', 'de.adp.web.input.key').defines(function() {
    HardKey = ig.Class.extend({});
    HardKey.START = Key.SPACE;
    HardKey.RED = Key.N;
    HardKey.BLACK = Key.B;
    HardKey.LINES_DIVIDE = Key.M;
    HardKey.MENUE = Key.X;
    HardKey.AUTOPLAY = Key.A;
    HardKey.V = 86;
    HardKey.C = 67;
    HardKey.X = 88;
});

// ../private/de/adp/web/controller/gameFlow/gameRoundPhase.js 
ig.baked = true;
ig.module('de.adp.web.controller.gameFlow.gameRoundPhase').requires('impact.impact').defines(function() {
    GameRoundPhase = ig.Class.extend({});
    GameRoundPhase.PLACE_BET = "PLACE_BETS";
    GameRoundPhase.RISK_CHOICE = "RISK_CHOICE";
    GameRoundPhase.REQUESTING_RESPONSE = "REQUESTING_RESPONSE";
    GameRoundPhase.ANIMATING_RESPONSE = "ANIMATING_RESPONSE";
});

// ../private/de/adp/web/addonGame/riskLadder/controller/ladderActionIDs.js 
ig.baked = true;
ig.module('de.adp.web.addonGame.riskLadder.controller.ladderActionIDs').requires('impact.impact').defines(function() {
    LadderActionIDs = ig.Class.extend({});
    LadderActionIDs.GAMBLE = "GAMBLE";
    LadderActionIDs.LAUNCH_LADDER = "RISK_LADDER_CHOICE";
    LadderActionIDs.END_LADDER = "END_LADDER";
    LadderActionIDs.DIVIDE = "L_RISK_DIVIDE";
    LadderActionIDs.COLLECT_TRIGGERED = "L_COLLECT_TRIGGERED";
});

// ../private/de/adp/web/addonGame/riskCards/controller/blackredActionIDs.js 
ig.baked = true;
ig.module('de.adp.web.addonGame.riskCards.controller.blackredActionIDs').requires('impact.impact').defines(function() {
    BlackredActionIDs = ig.Class.extend({});
    BlackredActionIDs.GAMBLE_ON_RED = "RISK_BLACKRED_RED";
    BlackredActionIDs.GAMBLE_ON_BLACK = "RISK_BLACKRED_BLACK";
    BlackredActionIDs.DIVIDE = "C_RISK_DIVIDE";
    BlackredActionIDs.COLLECT_TRIGGERED = "C_COLLECT_TRIGGERED";
    BlackredActionIDs.LAUNCH_BLACKRED = "RISK_BLACKRED_CHOICE";
    BlackredActionIDs.END_BLACKRED = "END_BLACKRED";
});

// ../private/de/adp/web/input/hardwareButtonToGameActionTranslator.js 
ig.baked = true;
ig.module('de.adp.web.input.hardwareButtonToGameActionTranslator').requires('impact.impact', 'de.adp.web.input.key', 'de.adp.web.input.hardwareKey', 'de.adp.web.controller.gameActionIDs', 'de.adp.web.controller.gameFlow.gameRoundPhase', 'de.adp.web.addonGame.riskLadder.controller.ladderActionIDs', 'de.adp.web.addonGame.riskCards.controller.blackredActionIDs').defines(function() {
    HardwareButtonToGameActionTranslator = ig.Class.extend({
        possibleButtons: [HardKey.BLACK, HardKey.START, HardKey.RED, HardKey.LINES_DIVIDE, HardKey.MENUE, HardKey.AUTOPLAY],
        getPossibleButtons: function() {
            return this.possibleButtons;
        },
        getButtonIDFor: function(hardButton, gameState, gameRoundPhase, facade) {
            switch (hardButton) {
                case HardKey.BLACK:
                    return this.getButtonForB(gameState, gameRoundPhase);
                    break;
                case HardKey.START:
                    return this.getButtonForSpace(gameState, gameRoundPhase, facade);
                    break;
                case HardKey.RED:
                    return this.getButtonForN(gameState, gameRoundPhase);
                    break;
                case HardKey.MENUE:
                    return this.getButtonForX(gameState, gameRoundPhase);
                    break;
                case HardKey.LINES_DIVIDE:
                    return this.getButtonForM(gameState, gameRoundPhase);
                    break;
                case Key.C:
                    return this.getButtonForNextBet();
                    break;
                case HardKey.AUTOPLAY:
                    return this.getButtonForAutoPlay();
                    break;
            }
            return "INVALID";
        },
        getButtonForAutoPlay: function(gameState, gameRoundPhase) {
            return GameActionIDs.INCREASE_AUTOSPINS;
        },
        getButtonForNextBet: function() {
            return GameActionIDs.RAISE_BET;
        },
        getButtonForM: function(gameState, gameRoundPhase) {
            if (this.isInLadder(gameState)) {
                return LadderActionIDs.DIVIDE;
            }
            if (this.isInCard(gameState)) {
                return BlackredActionIDs.DIVIDE;
            }
            return GameActionIDs.RAISE_LINES;
        },
        getButtonForSpace: function(gameState, gameRoundPhase, facade) {
            if (gameRoundPhase === GameRoundPhase.ANIMATING_RESPONSE || gameRoundPhase === GameRoundPhase.REQUESTING_RESPONSE) {
                if (facade.autoPlay._autoSpinActive) {
                    return GameActionIDs.STOP_AUTOPLAY;
                }
                return GameActionIDs.SKIP;
            }
            if (this.containsGameAction(BlackredActionIDs.LAUNCH_BLACKRED, gameState) || this.containsGameAction(LadderActionIDs.LAUNCH_LADDER, gameState))
                return GameActionIDs.COLLECT;
            if (this.isInCard(gameState))
                return BlackredActionIDs.COLLECT_TRIGGERED;
            if (this.isInLadder(gameState))
                return LadderActionIDs.COLLECT_TRIGGERED;
            if (gameRoundPhase === GameRoundPhase.PLACE_BET) {
                if (facade.autoPlay.isAutoSpinReady() && !facade.autoPlay.isInSingleOptionMode()) {
                    return GameActionIDs.START_AUTOPLAY;
                }
                return GameActionIDs.PLAY;
            }
            return GameActionIDs.SKIP;
        },
        getButtonForB: function(gameState, gameRoundPhase) {
            if (this.containsGameAction(BlackredActionIDs.LAUNCH_BLACKRED, gameState)) {
                return BlackredActionIDs.LAUNCH_BLACKRED;
            }
            if (this.isInLadder(gameState)) {
                return LadderActionIDs.GAMBLE;
            }
            if (this.isInCard(gameState)) {
                return BlackredActionIDs.GAMBLE_ON_BLACK;
            }
            var id = GameActionIDs.RAISE_BET_TO_MAX;
            return id;
        },
        getButtonForN: function(gameState, gameRoundPhase) {
            if (this.containsGameAction(LadderActionIDs.LAUNCH_LADDER, gameState)) {
                return LadderActionIDs.LAUNCH_LADDER;
            }
            if (this.isInLadder(gameState)) {
                return LadderActionIDs.GAMBLE;
            }
            if (this.isInCard(gameState)) {
                return BlackredActionIDs.GAMBLE_ON_RED;
            }
            var id = GameActionIDs.RAISE_BET;
            return id;
        },
        getButtonForX: function(gameState, gameRoundPhase) {
            return GameActionIDs.CLOSE_GAME;
        },
        containsGameAction: function(actionID, resp) {
            var l = resp.nextGameActions.length;
            var gameAction;
            for (var i = 0; i < l; i++) {
                gameAction = resp.nextGameActions[i];
                if (gameAction.id == actionID)
                    return true;
            }
            return false;
        },
        isInLadder: function(resp) {
            if (resp.addOnGameResult != null)
                return resp.addOnGameResult.creator == "LADDER";
            if (resp.addOnGameInitResult != null)
                return resp.addOnGameInitResult.creator == "LADDER";
            return false;
        },
        isInCard: function(resp) {
            if (resp.addOnGameResult != null)
                return resp.addOnGameResult.creator == "BLACKRED";
            if (resp.addOnGameInitResult != null)
                return resp.addOnGameInitResult.creator == "BLACKRED";
            return false;
        },
        getHardButtonFor: function(softButtonID) {
            if (softButtonID == "autospin" || softButtonID == GameActionIDs.PLAY || softButtonID == GameActionIDs.FINISH_GAME || softButtonID == GameActionIDs.COLLECT || softButtonID == BlackredActionIDs.COLLECT_TRIGGERED || softButtonID == GameActionIDs.SKIP || softButtonID == LadderActionIDs.COLLECT_TRIGGERED)
                return [HardKey.START];
            if (softButtonID == LadderActionIDs.GAMBLE) {
                return [HardKey.BLACK, HardKey.RED];
            }
            if (softButtonID == LadderActionIDs.LAUNCH_LADDER || softButtonID == BlackredActionIDs.GAMBLE_ON_RED || softButtonID == GameActionIDs.RAISE_BET)
                return [HardKey.RED];
            if (softButtonID == BlackredActionIDs.LAUNCH_BLACKRED || softButtonID == BlackredActionIDs.GAMBLE_ON_BLACK || softButtonID == GameActionIDs.RAISE_BET_TO_MAX)
                return [HardKey.BLACK];
            if (softButtonID == LadderActionIDs.DIVIDE || softButtonID == BlackredActionIDs.DIVIDE || softButtonID == GameActionIDs.RAISE_LINES)
                return [HardKey.LINES_DIVIDE];
            if (softButtonID == GameActionIDs.TOGGLE_AUTOPLAY_MENU)
                return [HardKey.AUTOPLAY];
            return ["INVALID"];
        },
        getBetButtons: function(withLineChangeButton) {
            if (!withLineChangeButton) {
                return [HardKey.RED, HardKey.BLACK]
            }
            return [HardKey.LINES_DIVIDE, HardKey.RED, HardKey.BLACK]
        },
        getSettingsButtons: function() {
            return [Key.X, Key.F, Key.S]
        },
        getAutoplayButtons: function() {
            return [HardKey.AUTOPLAY]
        },
        getFullScreenButtons: function() {
            return [Key.F];
        }
    });
});

// ../private/de/adp/web/input/keyboardInputHandler.js 
ig.baked = true;
ig.module('de.adp.web.input.keyboardInputHandler').requires('impact.impact', 'de.adp.web.input.key', 'de.adp.web.input.hardwareButtonToGameActionTranslator').defines(function() {
    KeyboardInputHandler = ig.Class.extend({
        facade: null,
        translator: null,
        boundKeys: [],
        lineChangePossible: false,
        init: function(facade, translator) {
            this.facade = facade;
            this.translator = translator;
            this.onFullScreenTriggered = this.onFullScreenTriggered.bind(this);
            this.translator = translator;
            if ((this.facade.casino.getCasinoConfiguration('SHOW_FULLSCREEN_BUTTON') && !ig.ua.mobile) || ig.ua.terminal) {
                this.bindFullScreenButtons();
            }
        },
        registerListeners: function() {
            var keys = this.translator.getPossibleButtons();
            var l = keys.length;
            for (var i = 0; i < l; i++) {
                ig.input.bind(keys[i], String(keys[i]));
            }
        },
        unbindAllListeners: function() {
            var keys = this.translator.getPossibleButtons();
            var l = keys.length;
            for (var i = 0; i < l; i++) {
                ig.input.unbind(keys[i]);
                this.unmarkBoundKey(keys[i]);
            }
        },
        unbindActions: function(actions) {
            var l = actions.length;
            for (var i = 0; i < l; i++) {
                var keys = this.translator.getHardButtonFor(actions[i]);
                for (j = 0; j < keys.length; j++) {
                    var key = keys[j];
                    if (key !== "INVALID") {
                        ig.input.unbind(key);
                        this.unmarkBoundKey(key);
                    }
                }
            }
        },
        markBoundKey: function(key) {
            var marker = this.getMarker(key);
            marker.isEnabled = true;
        },
        unmarkBoundKey: function(key) {
            var marker = this.getMarker(key);
            marker.isEnabled = false;
        },
        isKeyBound: function(key) {
            var marker = this.getMarker(key);
            return marker.isEnabled;
        },
        getMarker: function(key) {
            var l = this.boundKeys.length;
            var marker;
            for (var i = 0; i < l; i++) {
                marker = this.boundKeys[i];
                if (marker.key === key) {
                    return marker;
                }
            }
            marker = {
                key: key,
                isEnabled: true
            };
            this.boundKeys.push(marker);
            return marker;
        },
        getCurrentlyBoundKeys: function() {
            return this.boundKeys;
        },
        bindBetButtons: function() {
            var keys = this.translator.getBetButtons(this.lineChangePossible);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "INVALID") {
                    ig.input.bind(key, String(key));
                    this.markBoundKey(key);
                }
            }
        },
        unbindBetButtons: function() {
            var keys = this.translator.getBetButtons(this.lineChangePossible);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "INVALID") {
                    ig.input.unbind(key, String(key));
                    this.unmarkBoundKey(key);
                }
            }
        },
        bindSettingsButtons: function() {
            var keys = this.translator.getSettingsButtons();
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "INVALID") {
                    ig.input.bind(key, String(key));
                    this.markBoundKey(key);
                }
            }
        },
        bindFullScreenButtons: function() {
            var keys = this.translator.getFullScreenButtons();
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "INVALID") {
                    window.onkeyup = this.onFullScreenTriggered;
                    this.markBoundKey(key);
                }
            }
        },
        unbindFullScreenButtons: function() {
            var keys = this.translator.getFullScreenButtons();
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "INVALID") {
                    window.onkeyup = null;
                    this.unmarkBoundKey(key);
                }
            }
        },
        onFullScreenTriggered: function(e) {
            var char = e.keyCode ? e.keyCode : e.charCode;
            if (this.translator.getFullScreenButtons().indexOf(char) !== -1) {
                this.facade.sendNotification(GameActionIDs.TOGGLE_FULLSCREEN);
            }
        },
        bindAutoplayButtons: function() {
            var keys = this.translator.getAutoplayButtons();
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "INVALID") {
                    ig.input.bind(key, String(key));
                    this.markBoundKey(key);
                }
            }
        },
        pause: function() {
            this.unbindFullScreenButtons();
        },
        resume: function() {
            this.bindFullScreenButtons();
        },
        unbindAutoplayButtons: function() {
            var keys = this.translator.getAutoplayButtons();
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "INVALID") {
                    ig.input.unbind(key);
                    this.unmarkBoundKey(key);
                }
            }
        },
        bindActions: function(actions) {
            var l = actions.length;
            for (var i = 0; i < l; i++) {
                var keys = this.translator.getHardButtonFor(actions[i]);
                for (j = 0; j < keys.length; j++) {
                    var key = keys[j];
                    if (key !== "INVALID") {
                        ig.input.bind(key, String(key));
                        this.markBoundKey(key);
                    }
                }
            }
        },
        update: function() {
            var keys = this.translator.getPossibleButtons();
            var l = keys.length;
            var curKey;
            for (var i = 0; i < l; i++) {
                curKey = keys[i];
                if (ig.input.pressed(String(curKey))) {
                    this.onKeyDown({
                        keyCode: curKey
                    })
                }
            }
        },
        onKeyDown: function(e) {
            var char = e.keyCode ? e.keyCode : e.charCode;
            if (this.isKeyBound(char)) {
                var requiredAction = this.translator.getButtonIDFor(char, this.facade.casino.networkProvider.getLastResponse(), this.facade.currentGameRoundPhase, this.facade);
                this.facade.sendNotification(requiredAction);
            }
        }
    });
});


// ../private/de/adp/web/input/keyboardToGameActionTranslator.js 
ig.baked = true;
ig.module('de.adp.web.input.keyboardToGameActionTranslator').requires('impact.impact', 'de.adp.web.input.key', 'de.adp.web.controller.gameActionIDs', 'de.adp.web.controller.gameFlow.gameRoundPhase', 'de.adp.web.addonGame.riskLadder.controller.ladderActionIDs', 'de.adp.web.addonGame.riskCards.controller.blackredActionIDs', 'de.adp.web.input.hardwareKey').defines(function() {
    KeyboardToGameActionTranslator = ig.Class.extend({
        possibleButtons: [HardKey.BLACK, HardKey.START, HardKey.RED, HardKey.LINES_DIVIDE, HardKey.MENUE, HardKey.AUTOPLAY],
        getPossibleButtons: function() {
            return this.possibleButtons;
        },
        getButtonIDFor: function(hardButton, gameState, gameRoundPhase, facade) {
            switch (hardButton) {
                case HardKey.BLACK:
                    return this.getButtonForB(gameState, gameRoundPhase);
                    break;
                case HardKey.START:
                    return this.getButtonForSpace(gameState, gameRoundPhase, facade);
                    break;
                case HardKey.RED:
                    return this.getButtonForN(gameState, gameRoundPhase);
                    break;
                case HardKey.MENUE:
                    return this.getButtonForX(gameState, gameRoundPhase);
                    break;
                case HardKey.LINES_DIVIDE:
                    return this.getButtonForM(gameState, gameRoundPhase);
                    break;
                case Key.C:
                    return this.getButtonForNextBet();
                    break;
                case HardKey.AUTOPLAY:
                    return this.getButtonForAutoPlay();
                    break;
            }
            return "INVALID";
        },
        getButtonForAutoPlay: function(gameState, gameRoundPhase) {
            return GameActionIDs.INCREASE_AUTOSPINS;
        },
        getButtonForNextBet: function() {
            return GameActionIDs.RAISE_BET;
        },
        getButtonForM: function(gameState, gameRoundPhase) {
            if (this.isInLadder(gameState)) {
                return LadderActionIDs.DIVIDE;
            }
            if (this.isInCard(gameState)) {
                return BlackredActionIDs.DIVIDE;
            }
            return GameActionIDs.RAISE_LINES;
        },
        getButtonForSpace: function(gameState, gameRoundPhase, facade) {
            if (gameRoundPhase === GameRoundPhase.ANIMATING_RESPONSE || gameRoundPhase === GameRoundPhase.REQUESTING_RESPONSE) {
                return GameActionIDs.SKIP;
            }
            if (this.containsGameAction(BlackredActionIDs.LAUNCH_BLACKRED, gameState) || this.containsGameAction(LadderActionIDs.LAUNCH_LADDER, gameState)) {
                return GameActionIDs.COLLECT_AND_SPIN;
            }
            if (this.isInCard(gameState))
                return BlackredActionIDs.COLLECT_TRIGGERED;
            if (this.isInLadder(gameState))
                return LadderActionIDs.COLLECT_TRIGGERED;
            if (gameRoundPhase === GameRoundPhase.PLACE_BET) {
                if (facade.autoPlay.isAutoSpinReady() && !facade.autoPlay.isInSingleOptionMode()) {
                    return GameActionIDs.START_AUTOPLAY;
                }
                return GameActionIDs.PLAY;
            }
            return GameActionIDs.SKIP;
        },
        getButtonForB: function(gameState, gameRoundPhase) {
            if (this.containsGameAction(BlackredActionIDs.LAUNCH_BLACKRED, gameState)) {
                return BlackredActionIDs.LAUNCH_BLACKRED;
            }
            if (this.isInLadder(gameState)) {
                return LadderActionIDs.GAMBLE;
            }
            if (this.isInCard(gameState)) {
                return BlackredActionIDs.GAMBLE_ON_BLACK;
            }
            var id = GameActionIDs.RAISE_BET_TO_MAX;
            return id;
        },
        getButtonForN: function(gameState, gameRoundPhase) {
            if (this.containsGameAction(LadderActionIDs.LAUNCH_LADDER, gameState)) {
                return LadderActionIDs.LAUNCH_LADDER;
            }
            if (this.isInLadder(gameState)) {
                return LadderActionIDs.GAMBLE;
            }
            if (this.isInCard(gameState)) {
                return BlackredActionIDs.GAMBLE_ON_RED;
            }
            var id = GameActionIDs.RAISE_BET;
            return id;
        },
        getButtonForX: function(gameState, gameRoundPhase) {
            return GameActionIDs.CLOSE_GAME;
        },
        containsGameAction: function(actionID, resp) {
            var l = resp.nextGameActions.length;
            var gameAction;
            for (var i = 0; i < l; i++) {
                gameAction = resp.nextGameActions[i];
                if (gameAction.id == actionID)
                    return true;
            }
            return false;
        },
        isInLadder: function(resp) {
            if (resp.addOnGameResult != null)
                return resp.addOnGameResult.creator == "LADDER";
            if (resp.addOnGameInitResult != null)
                return resp.addOnGameInitResult.creator == "LADDER";
            return false;
        },
        isInCard: function(resp) {
            if (resp.addOnGameResult != null)
                return resp.addOnGameResult.creator == "BLACKRED";
            if (resp.addOnGameInitResult != null)
                return resp.addOnGameInitResult.creator == "BLACKRED";
            return false;
        },
        getHardButtonFor: function(softButtonID) {
            if (softButtonID == "autospin" || softButtonID == GameActionIDs.PLAY || softButtonID == GameActionIDs.FINISH_GAME || softButtonID == GameActionIDs.COLLECT || softButtonID == BlackredActionIDs.COLLECT_TRIGGERED || softButtonID == GameActionIDs.SKIP || softButtonID == LadderActionIDs.COLLECT_TRIGGERED)
                return [HardKey.START];
            if (softButtonID == LadderActionIDs.GAMBLE) {
                return [HardKey.BLACK, HardKey.RED];
            }
            if (softButtonID == LadderActionIDs.LAUNCH_LADDER || softButtonID == BlackredActionIDs.GAMBLE_ON_RED || softButtonID == GameActionIDs.RAISE_BET)
                return [HardKey.RED];
            if (softButtonID == BlackredActionIDs.LAUNCH_BLACKRED || softButtonID == BlackredActionIDs.GAMBLE_ON_BLACK || softButtonID == GameActionIDs.RAISE_BET_TO_MAX)
                return [HardKey.BLACK];
            if (softButtonID == LadderActionIDs.DIVIDE || softButtonID == BlackredActionIDs.DIVIDE || softButtonID == GameActionIDs.RAISE_LINES)
                return [HardKey.LINES_DIVIDE];
            if (softButtonID == GameActionIDs.TOGGLE_AUTOPLAY_MENU)
                return [HardKey.AUTOPLAY];
            return ["INVALID"];
        },
        getBetButtons: function(withLineChangeButton) {
            if (!withLineChangeButton) {
                return [HardKey.RED, HardKey.BLACK]
            }
            return [HardKey.LINES_DIVIDE, HardKey.RED, HardKey.BLACK]
        },
        getSettingsButtons: function() {
            return [Key.X, Key.F, Key.S]
        },
        getAutoplayButtons: function() {
            return [HardKey.AUTOPLAY]
        },
        getFullScreenButtons: function() {
            return [Key.F];
        }
    });
});

// ../private/de/adp/web/gui/elements/button.js 
ig.baked = true;
ig.module("de.adp.web.gui.elements.button").requires("impact.impact", 'de.adp.web.tracking.uitracker').defines(function() {
    Button = ig.Class.extend({
        _view: null,
        buttonId: "",
        callBackFunction: null,
        cssClasses: [],
        provider: null,
        enabled: true,
        captionBox: "",
        translationKey: "",
        init: function(id, cssClasses, callback, translationKey) {
            this.listenerFunc = this.listenerFunc.bind(this);
            if (typeof(cssClasses) === "String") {
                this.cssClasses = cssClasses;
            } else {
                this.cssClasses.push(cssClasses);
            }
            this.buttonId = id;
            this.callBackFunction = callback;
            if (translationKey) {
                this.translationKey = translationKey;
            }
            this.createSelf();
        },
        createSelf: function() {
            var btn = ig.ua.mobile ? $('<div id="' + this.buttonId + '" style="display:flex; display:-webkit-flex">') : $('<div id="' + this.buttonId + '" style="display:table">');
            this._view = ig.ua.mobile ? $('<div class="game-btn-container">') : $('<div class="game-btn-container-desktop">');
            this.captionBox = $("<div id='" + this.buttonId + "_caption' class='icon-btn-caption-centered'></div>");
            $(btn).append(this.captionBox);
            $(this._view).append(btn);
            for (var i = 0; i < this.cssClasses.length; i++) {
                $(btn).addClass(this.cssClasses[i]);
            }
            if (ig.ua.mobile) {
                $(btn).addClass("icon-btn");
            }
            $(this._view).on(ig.touchEvents, this.listenerFunc);
        },
        getView: function() {
            return this._view;
        },
        setButtonProvider: function(buttonProvider) {
            this.provider = buttonProvider;
        },
        listenerFunc: function(evt) {
            evt.preventDefault();
            UITracker.track("click", this.buttonId);
            this.provider.hideAllButtons();
            this.callBackFunction(evt);
        },
        show: function() {
            $(this._view).css("display", "inline-block");
            $(this.captionBox).css('font-size', $('#stake-meter').css('font-size'));
            ig.system.fitTextInto(this.captionBox);
            ig.system.fitTextIntoWidth(this.captionBox);
        },
        hide: function() {
            $(this._view).css("display", "none");
        },
        disable: function() {
            if (this.enabled) {
                this.enabled = false;
                $(this._view).off(ig.touchEvents, this.listenerFunc);
            }
        },
        enable: function() {
            if (!this.enabled) {
                this.enabled = true;
                $(this._view).on(ig.touchEvents, this.listenerFunc);
            }
        },
        translate: function(resProv) {
            $(this.captionBox).html(resProv.getString(this.translationKey).toUpperCase());
        }
    });
});

// ../private/de/adp/web/gui/elements/clock.js 
ig.baked = true;
ig.module("de.adp.web.gui.elements.clock").requires("impact.impact").defines(function() {
    Clock = ig.Class.extend({
        _self: null,
        cssClasses: [],
        refreshDelay: 1000,
        currentMillis: 0,
        lastMillis: 0,
        init: function(cssClasses) {
            if (typeof(cssClasses) === "String") {
                this.cssClasses = cssClasses;
            } else {
                this.cssClasses.push(cssClasses);
            }
            this.createSelf();
            this.update();
        },
        createSelf: function() {
            this._self = $("<div id='clock'>0:00</div>");
            for (var i = 0; i < this.cssClasses.length; i++) {
                $(this._self).addClass(this.cssClasses[i]);
            }
        },
        refresh: function() {
            $(this._self).html(new Date().getCurrentTime());
        },
        getView: function() {
            return this._self;
        },
        show: function() {
            $(this._self).css("display", "block");
        },
        hide: function() {
            $(this._self).css("display", "none");
        },
        update: function() {
            this.currentMillis = ig.system.now();
            if (this.lastMillis === 0) {
                this.lastMillis = this.currentMillis;
            }
            if (this.currentMillis - this.lastMillis >= this.refreshDelay) {
                this.refresh();
                this.lastMillis = this.currentMillis;
            }
        }
    });
});


// ../private/de/adp/web/data/requestBuilder.js 
ig.baked = true;
ig.module('de.adp.web.data.requestBuilder').requires('impact.impact').defines(function() {
    RequestBuilder = ig.Class.extend({
        init: function() {},
        createRequestString: function(activeWager, activeLines) {
            var request = {};
            request.wagers = [];
            request.gameParams = null;
            request.gameActionId = "PLAY";
            for (var i = 0; i < activeLines; i++) {
                var wager = {
                    "wager": activeWager,
                    "wagerPositionId": i + 1
                };
                request.wagers.push(wager);
            }
            return JSON.stringify(request);
        },
        createRequestStringWithParams: function(activeWager, activeLines, params) {
            var request = new Object();
            request.wagers = new Array();
            request.gameParams = params;
            request.gameActionId = "PLAY";
            for (var i = 0; i < activeLines; i++) {
                var wager = {
                    "wager": activeWager,
                    "wagerPositionId": i + 1
                };
                request.wagers.push(wager);
            }
            return JSON.stringify(request);
        },
        createPlayRequestStringWithWagers: function(wagers, params) {
            var request = new Object();
            request.wagers = wagers;
            request.gameParams = params;
            request.gameActionId = "PLAY";
            return JSON.stringify(request);
        },
        createRiskLadderRequest: function(command) {
            var req = {
                "gameActionId": command,
                "gameParams": null,
                "wagers": null
            };
            return JSON.stringify(req);
        },
        createRiskCardRequest: function(command) {
            var req = {
                "wagers": null,
                "gameParams": null,
                "gameActionId": command
            };
            return JSON.stringify(req);
        }
    });
});

// ../private/de/adp/web/controller/playCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.playCommand').requires('impact.impact', 'de.adp.web.data.requestBuilder', 'de.adp.web.data.paddingSpecification', "de.adp.web.controller.gameFlow.gameRoundPhase").defines(function() {
    PlayCommand = ig.Class.extend({
        facade: null,
        reqBuilder: null,
        init: function(facade) {
            this.reqBuilder = new RequestBuilder();
            this.resultReceived = this.resultReceived.bind(this);
            this.proceed = this.proceed.bind(this);
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        isSafeToExecute: function() {
            return true;
        },
        execute: function(evt) {
            if (!this.isSafeToExecute()) {
                return;
            }
            if (this.facade.casino.mustShowRTP()) {
                this.facade.casino.displayProvider.showMessage("");
            }
            this.facade.setCurrentGameRoundPhase("REQUESTING_RESPONSE");
            this.facade.sendNotification('CLOSE_ALL_OPEN_MENUS');
            this.facade.sendNotification("DISABLE_HARDWARE_KEYS");
            SpinDelayTimer.start();
            if (!this.facade.autoPlay._autoSpinActive) {
                this.facade.sendNotification('CLOSE_ALL_OPEN_MENUS');
            }
            this.facade.gameGui.winAnimation.clean();
            this.facade.gameGui.paytable.clean();
            var isAutoSpin = evt.getBody();
            var isQuickSpin = this.facade.turboSpinHandler.isActive;
            if (isAutoSpin == undefined) {
                isAutoSpin = false;
            }
            var params = this.createParameters(isAutoSpin, isQuickSpin);
            var wagers = this.createWagers();
            var requestString = this.reqBuilder.createPlayRequestStringWithWagers(wagers, params);
            this.facade.gameGui.getActiveLineContainer().showAllLines(false, true);
            this.facade.casino.networkProvider.send(requestString, this.resultReceived);
        },
        createWagers: function() {
            var activeWager = this.facade.getStakePerLine();
            var activeLines = this.facade.lineStepper.getActiveLines();
            var wagers = [];
            for (var i = 0; i < activeLines; i++) {
                var wager = {
                    "wager": activeWager,
                    "wagerPositionId": i + 1
                };
                wagers.push(wager);
            }
            return wagers;
        },
        resultReceived: function(resultData) {
            this.facade.setCurrentGameRoundPhase("ANIMATING_RESPONSE");
            var result = null;
            if (typeof resultData === "string") {
                result = JSON.parse(resultData);
            } else {
                result = resultData;
            }
            if (result.responseType === "BUSINESS_EXCEPTION") {
                if (this.facade.autoPlay._autoSpinActive) {
                    this.facade.autoPlay.incrementRemainingRounds();
                }
                this.facade.pauseGame();
                this.facade.casino.showSuppressedCasinoMessages(this.proceed);
                return;
            }
            this.facade.casino.gameRoundStarted();
            this.facade.setResult(result);
            if (this.facade.autoPlay._autoSpinActive) {
                this.facade.sendNotification("ENABLE_HARDWARE_KEYS");
            }
        },
        proceed: function() {
            this.facade.resumeGame();
            this.facade.animationsInProgress = false;
            this.facade.setCurrentGameRoundPhase(GameRoundPhase.PLACE_BET);
        },
        createParameters: function(isAutoSpin, isQuickSpin) {
            var minSpinDuration = SpinDelayTimer.getMinimalSpinDuration(this.facade.casino);
            var padSpec = this.facade.gameGui.getPaddingSpecification();
            var clientSettings = {
                coin: this.facade.coinStepper.getSelectedCoin(),
                countOfActiveWagerPositions: this.facade.lineStepper.getActiveLines(),
                custom: null
            };
            clientSettings = JSON.stringify(clientSettings);
            var params = {
                REQUIRED_SYMBOL_COUNT: padSpec.minimalSymbolCount,
                REQUIRED_MINIMAL_DURATION: minSpinDuration,
                CLIENT_SETTINGS: clientSettings
            };
            if (padSpec.distributionCoefficient !== null) {
                params.REQUIRED_SYMBOL_COUNT_DISTRIBUTION_COEFFICIENT = padSpec.distributionCoefficient;
            }
            if (padSpec.absoluteCoefficient !== null) {
                params.REQUIRED_ABSOLUTE_PADDING_COEFFICIENT = padSpec.absoluteCoefficient;
            }
            if (padSpec.linearCoefficient !== null) {
                params.REQUIRED_LINEAR_PADDING_COEFFICIENT = padSpec.linearCoefficient;
            }
            params.IS_AUTOSPIN = isAutoSpin;
            params.IS_QUICKSPIN = isQuickSpin;
            return params;
        }
    });
});


// ../private/de/adp/web/controller/gameCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.gameCommand").requires("impact.impact").defines(function() {
    GameCommand = ig.Class.extend({
        facade: null,
        addonGamesProvider: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
                this.addonGamesProvider = facade.addOnGamesProvider || null;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            throw "Has to be overwritten by concrete Subclass implementation";
        }
    });
});

// ../private/de/adp/web/controller/resizeCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.resizeCommand").requires("de.adp.web.controller.gameCommand", 'de.adp.web.base.htmlConfig', 'de.adp.web.tracking.uitracker').defines(function() {
    ResizeCommand = GameCommand.extend({
        FOOTER_GFX_WIDTH: 1920,
        FOOTER_GFX_HEIGHT: 143,
        HEADER_GFX_HEIGHT: 55,
        STANDARD_GAME_WIDTH: 920,
        STANDARD_GAME_HEIGHT: 530,
        MIDDLE_POSITION_FACTOR: 0.5,
        execute: function(notification) {
            var size;
            if (notification.getBody() !== undefined) {
                size = notification.getBody();
            } else {
                size = this.facade.casino.getDisplaySize();
            }
            var realHeight = parseInt(size.height),
                realWidth = parseInt(size.width);
            if (realHeight === undefined) {
                realHeight = ig.system.originalGameHeight;
            }
            if (realWidth === undefined) {
                realWidth = ig.system.originalGameWidth;
            }
            if (realHeight > 1.2 * realWidth) {
                ig.system.isPortrait = true;
                UITracker.track("portrait");
            } else {
                ig.system.isPortrait = false;
                UITracker.track("landscape");
            }
            var footerHeightScaled = this.calculateScaledFooterHeight(realWidth),
                headerHeightScaled = this.calculateScaledHeaderHeight(realWidth),
                canvasRatio = this.calculateCanvasResizeRatio(realHeight, footerHeightScaled, headerHeightScaled),
                canvasHeight = this.calculateMaximumCanvasHeight(canvasRatio),
                canvasWidth = this.calculateMaximumCanvasWidth(canvasRatio),
                stageScaleFactor = 1,
                newDimensions = {},
                topOffset = 0,
                leftOffset = 0,
                availableCanvasHeight = 0;
            availableCanvasHeight = realHeight - (headerHeightScaled + footerHeightScaled);
            newDimensions = this.calculateNewDimensionsIfBoundaryViolation(canvasWidth, canvasHeight, realWidth, availableCanvasHeight);
            canvasHeight = newDimensions.newHeight;
            canvasWidth = newDimensions.newWidth;
            topOffset = this.HEADER_GFX_HEIGHT * (parseInt(realWidth) / this.FOOTER_GFX_WIDTH);
            var canvasOffset = this.calculateCanvasTopOffset(availableCanvasHeight, canvasHeight, topOffset);
            stageScaleFactor = (newDimensions.scaleFactor * canvasRatio);
            leftOffset = parseInt(realWidth) - canvasWidth;
            leftOffset = Math.floor(leftOffset / 2);
            $('#riskladder-page').css('top', topOffset);
            this.persistNewValues(realWidth, realHeight, canvasWidth, canvasHeight, stageScaleFactor, canvasOffset);
            $("#canvas").css("width", canvasWidth);
            $("#canvas").css("height", canvasHeight);
            $("#canvasText").css("height", canvasHeight);
            $("#canvasText").css("width", canvasWidth);
            $("#resizableTextCanvas").css("height", canvasHeight);
            $("#resizableTextCanvas").css("width", canvasWidth);
            ig.system.resizableTextCanvas.width = canvasWidth;
            ig.system.resizableTextCanvas.height = canvasHeight;
            $("#canvas").offset({
                'top': canvasOffset
            });
            $("#canvasText").offset({
                'top': canvasOffset
            });
            $("#resizableTextCanvas").offset({
                'top': canvasOffset
            });
            ig.system.stageX = $("#canvas").offset().left;
            $('#riskladder-page').css('height', availableCanvasHeight + 'px');
            this.adjustHelpBoxSizeToCanvasSize(canvasWidth, canvasHeight, canvasOffset, leftOffset)
            if (this.facade.gameGui.runningInFullscreen) {
                $("#volumeWrapper").css('right', '9em');
            } else {
                $("#volumeWrapper").css('right', '1em');
            }
            var config = new HTMLConfig(this.facade.casino);
            if (!ig.ua.mobile) {
                $("#riskladder-container").css("transform", "scale(" + ig.system.stageScale * RLGui.scaleFactor + ")");
            }
            this.facade.lineStepper.update();
            this.facade.coinStepper.update();
            this.facade.autoPlay._autoSpinSelector.update();
            this.facade.autoPlay.calculateOffset();
            if (ig.ua.mobile) {
                $(".ui-btn").css("font-size", 12 + "px");
                this.facade.autoPlay.resizeConditions(BaseValues.DesktopScaleFactor);
                if (this.facade.casino.controlOrientation == 'left') {
                    this.facade.root.controlsLeft();
                } else {
                    this.facade.root.controlsRight();
                }
            }
            this.facade.casino.displayProvider.calcMessageAreaLeftMargin();
            for (var i = 0; i < this.facade.gameGui.resizesableObjects.length; i++) {
                this.facade.gameGui.resizesableObjects[i].resize();
            }
            this.facade.casino.buttonProvider.adjustPositionOfContainer();
            if (this.isPortrait(realWidth, realHeight) && ig.ua.mobile) {
                this.facade.gameGui.showRotationHint();
            } else {
                this.facade.gameGui.hideRotationHint();
            }
            this.rearrangeAfterDelay = this.rearrangeAfterDelay.bind(this);
            this.rearrangeAfterDelay();
        },
        rearrangeAfterDelay: function() {
            ig.system.stageX = $("#canvas").offset().left;
            for (var i = 0; i < this.facade.gameGui.resizesableObjects.length; i++) {
                this.facade.gameGui.resizesableObjects[i].resize();
            }
        },
        isPortrait: function(width, height) {
            return height > 1.2 * width;
        },
        calculateCanvasResizeRatio: function(availableWindowHeight, scaledFooterHeight, scaledHeaderHeight) {
            "use strict";
            return ((parseInt(availableWindowHeight) - scaledFooterHeight - scaledHeaderHeight)) / ig.system.originalGameHeight;
        },
        calculateMaximumCanvasWidth: function(scalingRatio) {
            "use strict";
            return ig.system.originalGameWidth * scalingRatio;
        },
        calculateMaximumCanvasHeight: function(scalingRatio) {
            "use strict";
            return ig.system.originalGameHeight * scalingRatio;
        },
        calculateCanvasTopOffset: function(availableCanvasHeight, maxCanvasHeight, calculatedTopOffset) {
            "use strict";
            if (ig.system.isPortrait) {
                return calculatedTopOffset;
            }
            return Math.floor((availableCanvasHeight - maxCanvasHeight) * this.MIDDLE_POSITION_FACTOR) + calculatedTopOffset;
        },
        calculateCanvasTopOffset: function(availableCanvasHeight, maxCanvasHeight, calculatedTopOffset) {
            "use strict";
            return Math.floor((availableCanvasHeight - maxCanvasHeight) * this.MIDDLE_POSITION_FACTOR) + calculatedTopOffset;
        },
        calculateNewDimensionsIfBoundaryViolation: function(calculatedWidth, calculatedHeight, availWidth, availHeight) {
            "use strict";
            var sc = 1;
            if (calculatedHeight >= parseInt(availHeight)) {
                sc = parseInt(availHeight) / calculatedHeight;
                calculatedHeight *= sc;
                calculatedWidth *= sc;
            }
            if (calculatedWidth >= parseInt(availWidth)) {
                sc = parseInt(availWidth) / calculatedWidth;
                calculatedHeight *= sc;
                calculatedWidth *= sc;
            }
            return {
                newWidth: calculatedWidth,
                newHeight: calculatedHeight,
                scaleFactor: sc
            };
        },
        calculateScaledFooterHeight: function(availableWidth) {
            "use strict";
            return (this.FOOTER_GFX_HEIGHT * (parseInt(availableWidth) / this.FOOTER_GFX_WIDTH)) + 2;
        },
        calculateScaledHeaderHeight: function(availableWidth) {
            "use strict";
            return BaseValues.HeaderHeight * (parseInt(availableWidth) / this.FOOTER_GFX_WIDTH);
        },
        adjustHelpBoxSizeToCanvasSize: function(width, height, offsetTop, offsetLeft) {
            "use strict";
            $('#help-box').css('width', width);
            $('#help-box').css('height', height);
            $('#help-box').css('top', offsetTop);
            $('#help-box').css('left', offsetLeft);
        },
        adjustFillupGraphics: function(screenWidth, screenHeight, offsetTop, offsetLeft, scaleFactor) {
            var sideWidth = 240;
            var upperWidth = 235;
            $("#left-fillup").css("width", sideWidth * scaleFactor);
            $("#left-fillup").css("height", 530 * scaleFactor);
            $("#left-fillup").css("top", offsetTop);
            var offleft = Math.ceil(offsetLeft - (sideWidth * scaleFactor));
            $("#left-fillup").css("left", offleft);
            $("#right-fillup").css("width", sideWidth * scaleFactor);
            $("#right-fillup").css("height", 530 * scaleFactor);
            $("#right-fillup").css("top", offsetTop);
            var offRight = Math.floor(offsetLeft + (920 * scaleFactor));
            $("#right-fillup").css("left", offRight);
            $("#top-fillup").css("width", 920 * scaleFactor);
            $("#top-fillup").css("height", upperWidth * scaleFactor);
            var offTop = Math.ceil(offsetTop - (upperWidth * scaleFactor));
            $("#top-fillup").css("top", offTop);
            $("#top-fillup").css("left", offsetLeft);
            $("#bottom-fillup").css("width", 920 * scaleFactor);
            $("#bottom-fillup").css("height", upperWidth * scaleFactor);
            var offBottom = Math.floor(offsetTop + (530 * scaleFactor));
            $("#bottom-fillup").css("top", offBottom);
            $("#bottom-fillup").css("left", offsetLeft);
        },
        persistNewValues: function(stageWidth, stageHeight, gameWidth, gameHeight, stageScale, stageYOffset) {
            "use strict";
            ig.system.stageY = stageYOffset;
            ig.system.stageWidth = stageWidth;
            ig.system.stageHeight = stageHeight;
            ig.system.gameWidth = gameWidth;
            ig.system.gameHeight = gameHeight;
            ig.system.stageScale = stageScale;
        }
    });
});

// ../private/de/adp/web/controller/autoSpinAmountChangedCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.autoSpinAmountChangedCommand').requires('impact.impact', 'de.adp.web.data.requestBuilder').defines(function() {
    AutoSpinAmountChangedCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            if (this.facade.autoPlay.checkConditionsReady()) {
                this.facade.autoPlay.autoSpinReady = true;
            }
            this.facade.sendNotification("UPDATE_BUTTONS");
        }
    });
});

// ../private/de/adp/web/controller/toggleFullscreenCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.toggleFullscreenCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    ToggleFullscreenCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            this.facade.casino.soundPlayer.playEffect("SFX_SettingsButton");
            if (!this.facade.gameGui.runningInFullscreen) {
                this.facade.gameGui.runningInFullscreen = true;
                this.facade.casino.maximizeGame();
            } else {
                this.facade.gameGui.runningInFullscreen = false;
                this.facade.casino.minimizeGame();
            }
            this.facade.gameGui.hideVolumeSlider();
        }
    });
});

// ../private/de/adp/web/controller/toggleSoundCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.toggleSoundCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    ToggleSoundCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            this.facade.casino.soundPlayer.playEffect("SFX_SettingsButton");
            var shallEnableSound = !this.facade.casino.soundPlayer.soundOn;
            if (!shallEnableSound) {
                this.facade.sendNotification(GameActionIDs.DISABLE_SOUND, {
                    withSound: true
                });
            } else {
                this.facade.sendNotification(GameActionIDs.ENABLE_SOUND, {
                    withSound: true
                });
            }
            this.facade.hoverTouchUnstick();
        }
    });
});

// ../private/de/adp/web/controller/enableSoundCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.enableSoundCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    EnableSoundCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            if ($("#soundWrapper").hasClass('desktopGameMenu-sound-off')) {
                $("#soundWrapper").removeClass('desktopGameMenu-sound-off');
            }
            this.facade.casino.soundPlayer.resumeReelRunSound();
            this.facade.casino.soundPlayer.soundOn = true;
            this.facade.casino.onAudioEnabled();
            this.facade.casino.soundPlayer.resumeAmbientSound();
            if (ig.ua.mobile) {
                $("#soundWrapper").on(ig.touchEvents, this.facade.gameGui.toggleSound);
            } else {
                $("#soundWrapper").on(ig.touchEvents, this.facade.gameGui.showVolumeSlider);
                $("#volumeSlider").on('change', this.facade.gameGui.onVolumeChange);
            }
        }
    });
});

// ../private/de/adp/web/controller/disableSoundCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.disableSoundCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    DisableSoundCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            $("#soundWrapper").addClass('desktopGameMenu-sound-off');
            this.facade.casino.soundPlayer.pauseAllAmbient();
            this.facade.casino.soundPlayer.pauseReelRunSound();
            this.facade.casino.soundPlayer.stopAllEffects();
            if (ig.ua.mobile) {
                $("#soundWrapper").off(ig.touchEvents, this.facade.gameGui.toggleSound);
            } else {
                this.facade.gameGui.hideVolumeSlider();
                $("#soundWrapper").off(ig.touchEvents, this.facade.gameGui.showVolumeSlider);
                $("#volumeSlider").off('change', this.facade.gameGui.onVolumeChange);
            }
            this.facade.casino.soundPlayer.soundOn = false;
            this.facade.casino.onAudioDisabled();
        }
    });
});

// ../private/de/adp/web/controller/freegame/playForFreeCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.freegame.playForFreeCommand', 'de.adp.web.controller.gameFlow.gameRoundPhase').requires('impact.impact', 'de.adp.web.data.requestBuilder').defines(function() {
    PlayForFreeCommand = ig.Class.extend({
        facade: null,
        reqBuilder: null,
        init: function(facade) {
            this.reqBuilder = new RequestBuilder();
            this.resultReceived = this.resultReceived.bind(this);
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        isSafeToExecute: function() {
            return true;
        },
        execute: function(notification) {
            if (!this.isSafeToExecute()) {
                return;
            }
            this.facade.setCurrentGameRoundPhase(GameRoundPhase.REQUESTING_RESPONSE);
            this.facade.gameGui.winAnimation.clean();
            var isAutoSpin = notification.getBody();
            if (isAutoSpin == undefined) {
                isAutoSpin = false;
            }
            var params = {
                REQUIRED_MINIMAL_DURATION: 0
            };
            params.IS_AUTOSPIN = isAutoSpin;
            params.IS_QUICKSPIN = this.facade.turboSpinHandler.isActive;
            var requestString = this.reqBuilder.createRequestStringWithParams(0, 0, params);
            this.facade.gameGui.getActiveLineContainer().showAllLines(false, true);
            this.facade.casino.networkProvider.send(requestString, this.resultReceived);
        },
        resultReceived: function(resultData) {
            this.facade.setCurrentGameRoundPhase(GameRoundPhase.ANIMATING_RESPONSE);
            if (typeof resultData === "string") {
                var parsedData = JSON.parse(resultData);
                this.facade.setResult(parsedData);
            } else {
                this.facade.setResult(resultData);
            }
        }
    });
});

// ../private/de/adp/web/controller/freegame/switchToFreeCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.freegame.switchToFreeCommand').requires('impact.impact', 'de.adp.web.controller.freegame.playForFreeCommand').defines(function() {
    SwitchToFreeCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            this.facade.gameGui.switchAppearanceToFreegameMode(this.facade.casino.networkProvider.getLastResponse(), true);
            this.facade.currentGameMode = "FREE_GAME";
        }
    });
});

// ../private/de/adp/web/controller/freegame/retriggerFreegameCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.freegame.retriggerFreegameCommand').requires('impact.impact', 'de.adp.web.controller.freegame.playForFreeCommand').defines(function() {
    RetriggerFreegameCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            this.onFinished = this.onFinished.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            if (this.facade.gameGui.retriggerAnimation === null) {
                this.facade.gameGui.retriggerAnimation = this.facade.gameGui.createRetriggerAnimation();
                this.facade.gameGui.registerPausableObject(this.facade.gameGui.retriggerAnimation);
            }
            this.facade.gameGui.retriggerAnimation.callback = this.onFinished;
            this.facade.gameGui.retriggerAnimation.switchWithAnimation(this.facade.casino.networkProvider.getLastResponse(), true);
        },
        onFinished: function() {
            this.facade.sendNotification("GAME_ROUND_FINISHED");
        }
    });
});

// ../private/de/adp/web/controller/freegame/switchToNormalCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.freegame.switchToNormalCommand').requires('impact.impact', 'de.adp.web.controller.playCommand').defines(function() {
    SwitchToNormalCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            this.facade.gameGui.switchAppearanceToNormalMode(this.facade.casino.networkProvider.getLastResponse(), true);
        }
    });
});

// ../private/de/adp/web/controller/freegame/switchToFreeFinishedCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.freegame.switchToFreeFinishedCommand').requires('impact.impact', 'de.adp.web.controller.freegame.playForFreeCommand', 'de.adp.web.controller.gameActionIDs').defines(function() {
    SwitchToFreeFinishedCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            this.facade.removeCommand(GameActionIDs.PLAY);
            var command = new PlayForFreeCommand(this.facade);
            this.facade.registerCommand(GameActionIDs.PLAY, command);
            this.facade.currentGameMode = "FREE_GAME";
            this.facade.sendNotification("RESULT_ANIMATION_FINISHED", this.facade.casino.networkProvider.getLastResponse());
        }
    });
});

// ../private/de/adp/web/controller/freegame/switchToNormalFinishedCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.freegame.switchToNormalFinishedCommand').requires('impact.impact', 'de.adp.web.controller.playCommand', 'de.adp.web.controller.gameActionIDs').defines(function() {
    SwitchToNormalFinishedCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            this.facade.removeCommand(GameActionIDs.PLAY);
            this.facade.registerCommand(GameActionIDs.PLAY, new PlayCommand(this.facade));
            this.facade.currentGameMode = "NORMAL";
            this.facade.sendNotification("RESULT_ANIMATION_FINISHED", this.facade.casino.networkProvider.getLastResponse());
        }
    });
});

// ../private/de/adp/web/controller/freegame/resumeToFreeCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.freegame.resumeToFreeCommand').requires('impact.impact', 'de.adp.web.controller.freegame.playForFreeCommand', 'de.adp.web.controller.gameActionIDs').defines(function() {
    ResumeToFreeCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            console.log("Reconstructing Freegames..");
            this.facade.gameGui.switchAppearanceToFreegameMode(this.facade.casino.networkProvider.getLastResponse(), false);
            this.facade.removeCommand(GameActionIDs.PLAY);
            var command = new PlayForFreeCommand(this.facade);
            this.facade.registerCommand(GameActionIDs.PLAY, command);
            this.facade.currentGameMode = "FREE_GAME";
        }
    });
});



// ../private/de/adp/web/addonGame/provider/addonGamesProvider.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.provider.addonGamesProvider").requires("impact.impact").defines(function() {
    AddonGamesProvider = ig.Class.extend({
        _activeAddonGame: "",
        addonGames: null,
        facade: null,
        addonGamesToActivate: [],
        addonGamesToChoose: [],
        init: function(p_facade) {
            this.facade = p_facade;
            this.addonGames = p_facade.addOnGames;
        },
        scanForAddonGames: function(response) {
            this.addonGamesToActivate.length = 0;
            this.addonGamesToChoose.length = 0;
            if (response.addOnGameInitResult !== null) {
                var addOnGameName = response.addOnGameInitResult.creator;
                this.handleFoundAddonGameActivation(this.addonGames[addOnGameName]);
                return;
            }
            for (var addonGame in this.addonGames) {
                if (this.addonGames[addonGame].isTriggeredBy(response)) {
                    this.addonGamesToChoose.push(addonGame);
                }
            }
        },
        getAddonGame: function(id) {
            if (this.addonGames[id] !== null) {
                if (this._activeAddonGame.length > 0) {
                    throw "There can only be one active AddonGame";
                } else {
                    this._activeAddonGame = id;
                    return this.addonGames[id];
                }
            }
        },
        startAddonGame: function(id) {},
        getAddonGameToActivate: function() {
            if (this.addonGamesToActivate.length === 0) {
                return null;
            }
            return this.addonGamesToActivate[0];
        },
        getAddonGamesToChoose: function() {
            return this.addonGamesToChoose.length > 0 ? this.addonGamesToChoose : [];
        },
        handleFoundAddonGameActivation: function(addonGame) {
            if (addonGame.isUserActivated()) {
                this.addonGamesToChoose.push(addonGame);
            } else {
                this.addonGamesToActivate.push(addonGame);
            }
        }
    });
});

// ../private/de/adp/web/controller/gameFlow/proceedGameCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.gameFlow.proceedGameCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.addonGame.provider.addonGamesProvider", 'de.adp.web.controller.gameFlow.gameRoundPhase').defines(function() {
    ProceedGameCommand = GameCommand.extend({
        addonGamesProvider: null,
        facade: null,
        init: function(p_facade) {
            this.facade = p_facade;
            this.addonGamesProvider = new AddonGamesProvider(p_facade);
        },
        execute: function(notification) {
            var response = notification.getBody();
            ig.logger.log(Logger.LogLevel.INFO, "Result Animation Finished: Proceeding Game to...");
            this.addonGamesProvider.scanForAddonGames(response);
            if (this.addonGamesProvider.getAddonGameToActivate() !== null) {
                this.triggerAddonGame(this.addonGamesProvider.getAddonGameToActivate());
                return;
            }
            var result = response.gameResult;
            if (this.facade.currentGameMode !== "FREE_GAME" && response.nextGameFlowName === "FREE_GAME" && result.freeGameRound === 0) {
                this.triggerFreegame(response);
                return;
            }
            if (result !== null && result.freeGameRound > 0) {
                if (result.totalWonFreegames() > 0) {
                    this.reTriggerFreegame(response);
                    return;
                }
                if (this.facade.currentGameMode === "FREE_GAME" && result.freeGameRound >= result.freeGamesTotal && result.totalWonFreegames() <= 0 && result.freeGameRound > 0) {
                    this.exitFreeGame(response);
                    return;
                }
            }
            if (this.addonGamesProvider.addonGamesToChoose.length > 0 && !this.facade.autoPlay._autoSpinActive) {
                this.chooseAddonGame();
                return;
            }
            if (result.freeGameRound >= result.freeGamesTotal && response.uncommittedWinSum > 0 && result.totalWonFreegames() <= 0) {
                this.commitWin();
                return;
            }
            this.proceedWithNextRound();
        },
        triggerAddonGame: function(addonGameToTrigger) {
            addonGameToTrigger.triggerActivation();
        },
        triggerFreegame: function(response) {
            ig.logger.log(Logger.LogLevel.INFO, "Freegame triggering");
            this.facade.sendNotification("FREEGAME_DETECTED", response);
        },
        reTriggerFreegame: function(response) {
            ig.logger.log(Logger.LogLevel.INFO, "Freegame retriggering");
            this.facade.sendNotification("FREEGAME_RETRIGGER_DETECTED", response);
        },
        exitFreeGame: function(response) {
            ig.logger.log(Logger.LogLevel.INFO, "Freegame exit");
            this.facade.sendNotification("FREEGAME_END_DETECTED", response);
        },
        chooseAddonGame: function() {
            this.facade.setCurrentGameRoundPhase(GameRoundPhase.RISK_CHOICE);
            ig.logger.log(Logger.LogLevel.INFO, "Gamble Choosing");
            this.facade.casino.soundPlayer.stopAllAmbient();
            this.facade.casino.soundPlayer.stopAllEffects();
            this.facade.casino.soundPlayer.playAmbient("SFX_ChooseGambleBgLoop");
            this.facade.showRTP();
            this.facade.startChooseAddonGames(this.addonGamesProvider.addonGamesToChoose);
        },
        commitWin: function() {
            ig.logger.log(Logger.LogLevel.INFO, "commiting win");
            this.facade.sendNotification("COLLECT", true);
        },
        proceedWithNextRound: function() {
            this.facade.sendNotification("GAME_ROUND_FINISHED");
        }
    });
});


// ../private/de/adp/web/utils/spinDelayTimer.js 
ig.baked = true;
ig.module("de.adp.web.utils.spinDelayTimer").requires("impact.impact").defines(function() {
    SpinDelayTimer = ig.Class.extend({});
    SpinDelayTimer.timerStartedAt = -1;
    SpinDelayTimer.start = function() {
        SpinDelayTimer.timerStartedAt = ig.system.now();
    };
    SpinDelayTimer.getMinimalSpinDuration = function(casino, facade) {
        var minSpinDuration = casino.getCasinoConfiguration("MINIMAL_GAMERUN_DURATION");
        var averageSpinDuration = casino.getCasinoConfiguration("AVERAGE_GAMERUN_DURATION");
        if (facade && averageSpinDuration > 200) {
            minSpinDuration = facade.getMinimalGameRunDurationToReachAverageGameRunDuration(averageSpinDuration);
        }
        if (minSpinDuration === undefined || minSpinDuration === "" || minSpinDuration === -1 || minSpinDuration === "-1") {
            return 0;
        }
        return minSpinDuration;
    };
    SpinDelayTimer.getMillisecondsSinceStart = function() {
        if (SpinDelayTimer.timerStartedAt === -1) {
            return 999999;
        }
        return ig.system.now() - SpinDelayTimer.timerStartedAt;
    };
});

// ../private/de/adp/web/controller/gameFlow/startNewRoundCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.gameFlow.startNewRoundCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.utils.spinDelayTimer", "de.adp.web.controller.gameFlow.gameRoundPhase").defines(function() {
    StartNewRoundCommand = GameCommand.extend({
        facade: null,
        isFirstExecution: true,
        init: function(p_facade) {
            this.facade = p_facade;
            this.proceed = this.proceed.bind(this);
        },
        execute: function(notification) {
            this.isFirstExecution = notification.getBody();
            if (!this.facade.autoPlay._autoSpinActive) {
                this.facade.sendNotification('CLOSE_ALL_OPEN_MENUS');
            }
            if (this.facade.casino.portal.areThereWaitingMessages()) {
                this.facade.pauseGame();
                this.facade.casino.showSuppressedCasinoMessages(this.proceed);
            } else {
                this.proceed(true);
            }
            if (!this.isFirstExecution && this.facade.currentGameMode == "NORMAL") {
                this.facade.casino.gameRoundEnded();
            }
        },
        proceed: function(directProceed) {
            if (!directProceed) {
                this.facade.resumeGame();
            }
            this.facade.turboSpinHandler.setSkipInProgress(false);
            if (this.facade.currentGameMode === "NORMAL") {
                var minSpinTime = SpinDelayTimer.getMinimalSpinDuration(this.facade.casino, this.facade);
                var passedTime = SpinDelayTimer.getMillisecondsSinceStart();
                if (passedTime < minSpinTime) {
                    this.facade.sendNotification("MUST_DELAY_SPIN_BUTTON");
                    return;
                }
            }
            ig.logger.log(Logger.LogLevel.INFO, "next Round starting");
            this.facade.animationsInProgress = false;
            this.facade.showRTP();
            if (this.facade.doOneMoreSpin) {
                this.facade.setCurrentGameRoundPhase(GameRoundPhase.PLACE_BET);
                this.facade.sendNotification("PLAY");
                this.facade.doOneMoreSpin = false;
                return;
            }
            if (this.facade.autoPlay._autoSpinActive) {
                if (!this.facade.gameGui.proceedAutoPlay()) {
                    this.facade.sendNotification("ENABLE_HARDWARE_KEYS");
                    this.facade.setCurrentGameRoundPhase(GameRoundPhase.PLACE_BET);
                }
            } else {
                this.facade.sendNotification("ENABLE_HARDWARE_KEYS");
                this.facade.setCurrentGameRoundPhase(GameRoundPhase.PLACE_BET);
            }
        }
    });
});


// ../private/de/adp/web/controller/gameFlow/skipAllReelsCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.gameFlow.skipAllReelsCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.utils.spinDelayTimer").defines(function() {
    SkipAllReelsCommand = GameCommand.extend({
        facade: null,
        init: function(p_facade) {
            this.facade = p_facade;
        },
        execute: function(notification) {
            this.facade.turboSpinHandler.incrementSkipCounter();
            this.facade.gameGui.reelContainer.skipAllReels();
            this.facade.gameGui.winAnimation.skipAnimation();
            this.facade.sendNotification("UPDATE_BUTTONS");
        }
    });
});


// ../private/de/adp/web/controller/gameFlow/delayNewRoundCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.gameFlow.delayNewRoundCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.utils.spinDelayTimer").defines(function() {
    DelayNewRoundCommand = GameCommand.extend({
        facade: null,
        minSpinTime: 0,
        delayTime: 0,
        delayWithAnimation: false,
        checkInterval: 0,
        init: function(p_facade) {
            this.facade = p_facade;
            this.checkDelay = this.checkDelay.bind(this);
        },
        execute: function(notification) {
            var casino = this.facade.casino;
            this.minSpinTime = SpinDelayTimer.getMinimalSpinDuration(casino, this.facade);
            this.delayTime = this.minSpinTime - SpinDelayTimer.getMillisecondsSinceStart();
            this.delayWithAnimation = true;
            if (this.delayTime < 1000) {
                this.delayWithAnimation = false;
            } else {
                this.checkDelay();
            }
            this.checkInterval = setInterval(this.checkDelay, 100);
        },
        checkDelay: function() {
            var passedTime = SpinDelayTimer.getMillisecondsSinceStart();
            if (passedTime < this.minSpinTime) {
                this.showDelay(this.calculateProgress(passedTime));
            } else {
                this.stopDelay();
            }
        },
        calculateProgress: function(passedTime) {
            var diff = this.minSpinTime - passedTime;
            return 1 - (diff / this.delayTime);
        },
        showDelay: function(progress) {
            if (this.delayWithAnimation) {
                ig.logger.log(Logger.LogLevel.INFO, "delay: " + progress);
            }
        },
        stopDelay: function() {
            clearInterval(this.checkInterval);
            this.showDelay(1);
            this.facade.sendNotification("RESULT_ANIMATION_FINISHED", this.facade.casino.networkProvider.getLastResponse());
        }
    });
});

// ../private/de/adp/web/controller/closeOpenMenuCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.closeOpenMenuCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    CloseOpenMenuCommand = GameCommand.extend({
        execute: function() {
            "use strict";
            if (!this.facade.autoPlay._autoSpinActive) {
                this.closeOpenAutoplay();
                this.closeVolumeSlider();
            }
            this.closeOpenBetting();
        },
        closeOpenBetting: function() {
            "use strict";
            this.facade.coinStepper.hide();
            this.facade.lineStepper.hide();
        },
        closeOpenAutoplay: function() {
            "use strict";
            this.facade.autoPlay.getAutoSpinSelector().hideAutoplay();
        },
        closeSideBarMenu: function() {
            "use strict";
            if ($("#mobile-menu-container").offset() !== undefined && ($("#mobile-menu-container").offset().left === 0 || $("#mobile-menu-container").offset().right === 0)) {
                this.facade.root.toggleMenu();
            }
        },
        closeVolumeSlider: function() {
            "use strict";
            if ($('#volumeWrapper').css('display') !== 'none') {
                this.facade.gameGui.hideVolumeSlider();
            }
        }
    });
});

// ../private/de/adp/web/controller/updatePaytableCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.updatePaytableCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    UpdatePaytableCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            var customData = notification.getBody();
            if (!customData) {
                customData = {};
            }
            var overwriteOlderNotifications = customData.overwrite;
            var dto = this.providePaytableData();
            dto.activeWagerPositionSet = this.facade.lineStepper.getActiveLines();
            dto = this.appendGameSpecificData(dto);
            dto = this.appendLastResponse(dto);
            dto = this.appendPaytableData(dto);
            dto.customData = customData;
            this.sendToPaytable(dto, overwriteOlderNotifications);
        },
        appendPaytableData: function(dataToSend) {
            dataToSend.payTable = this.facade.initResponse._rawResponse.payTable;
            return dataToSend;
        },
        appendLastResponse: function(dto) {
            var lastServerResponse = this.getLastServerResponse();
            if (lastServerResponse.coins != undefined) {
                return dto;
            }
            dto.lastResponse = lastServerResponse._rawResponse;
            return dto;
        },
        appendGameSpecificData: function(dataToSend) {
            return dataToSend;
        },
        sendToPaytable: function(data, overwriteOlderNotifications) {
            var sender = Intercom.getInstance();
            var json = JSON.stringify(data);
            if (overwriteOlderNotifications) {
                sender.emit(PaytableIDs.OVERWRITE_DATA_TO_EXTERNAL_PAYTABLE, json);
            } else {
                sender.emit(PaytableIDs.DATA_TO_EXTERNAL_PAYTABLE, json);
            }
        },
        providePaytableData: function() {
            var dto = this.getLastServerResponse()._rawResponse;
            var curWagerSum = this.facade.getTotalStake();
            var stakePerSelection = this.facade.getStakePerLine();
            dto.stake = curWagerSum;
            dto.stakePerSelection = stakePerSelection;
            return dto;
        },
        getLastServerResponse: function() {
            return this.facade.casino.networkProvider.getLastResponse();
        }
    });
});

// ../private/de/adp/web/controller/logToPaytableCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.logToPaytableCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    LogToPaytableCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            var sender = Intercom.getInstance();
            this.facade.logLayer.log(notification.getBody());
        }
    });
});

// ../private/de/adp/web/controller/showLogInPaytableCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.showLogInPaytableCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    ShowLogInPaytableCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            var sender = Intercom.getInstance();
            this.facade.logLayer.showLogs();
        }
    });
});

// ../private/de/adp/web/controller/hideLogInPaytableCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.hideLogInPaytableCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    HideLogInPaytableCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            var sender = Intercom.getInstance();
            this.facade.logLayer.hideLogs();
        }
    });
});

// ../private/de/adp/web/controller/updatePaytableInitDataCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.updatePaytableInitDataCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.controller.updatePaytableCommand").defines(function() {
    UpdatePaytableInitDataCommand = UpdatePaytableCommand.extend({
        facade: null,
        configKeysToCollect: [],
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        appendTranslations: function(dataToSend) {
            var lastResp = this.facade.initResponse;
            dataToSend.translations = lastResp._rawResponse.translations;
            return dataToSend;
        },
        appendCurrencyConfig: function(dataToSend) {
            var config = this.facade.casino.resourceProvider.getCurrencyOptions();
            dataToSend.currencyConfig = config;
            return dataToSend;
        },
        appendGameSpecificData: function(dataToSend) {
            return dataToSend;
        },
        sendToPaytable: function(data) {
            var dto = data;
            dto = this.appendTranslations(dto);
            dto = this.appendCurrencyConfig(dto);
            dto = this.appendGameSpecificData(dto);
            var sender = Intercom.getInstance();
            var json = JSON.stringify(dto);
            sender.emit(PaytableIDs.INITIAL_DATA_TO_EXTERNAL_PAYTABLE, json);
        },
        getLastServerResponse: function() {
            return this.facade.casino.networkProvider.getLastResponse();
        },
        providePaytableData: function() {
            var dto = this.getLastServerResponse()._rawResponse;
            var curWagerSum = this.facade.getTotalStake();
            var stakePerSelection = this.facade.getStakePerLine();
            dto.stake = curWagerSum;
            dto.stakePerSelection = stakePerSelection;
            return dto;
        },
    });
});



// ../private/de/adp/web/notifications/iNotification.js 
ig.baked = true;
ig.module('de.adp.web.notifications.iNotification').requires('impact.impact').defines(function() {
    INotification = ig.Class.extend({
        body: {},
        notificationId: "",
        init: function() {
            throw "Error: Interfaces can't be instantiated!";
        }
    });
});

// ../private/de/adp/web/notifications/notification.js 
ig.baked = true;
ig.module("de.adp.web.notifications.notification").requires("de.adp.web.notifications.iNotification").defines(function() {
    Notification = INotification.extend({
        name: null,
        body: null,
        init: function(notificationName, notificationBody) {
            this.name = notificationName;
            this.body = notificationBody;
        },
        getBody: function() {
            return this.body;
        },
        getName: function() {
            return this.name;
        }
    });
});


// ../private/de/adp/web/controller/collectCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.collectCommand').requires('de.adp.web.controller.gameCommand', 'de.adp.web.data.requestBuilder', 'de.adp.web.controller.gameFlow.gameRoundPhase').defines(function() {
    CollectCommand = GameCommand.extend({
        facade: null,
        reqBuilder: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            }
            this.reqBuilder = new RequestBuilder();
            this.onResultReceived = this.onResultReceived.bind(this);
            this.execute = this.execute.bind(this);
        },
        execute: function(evt) {
            this.facade.doOneMoreSpin = false;
            this.facade.stopAutoCollectTimer();
            var withSound = evt.getBody();
            if (withSound == null) {
                withSound = true;
            }
            this.facade.setCurrentGameRoundPhase(GameRoundPhase.REQUESTING_RESPONSE);
            this.facade.casino.soundPlayer.stopAllEffects();
            this.facade.casino.soundPlayer.stopAllAmbient();
            if (withSound) {
                this.facade.casino.soundPlayer.playEffect("SFX_Collect", true);
            }
            var requestString = JSON.stringify({
                "gameActionId": "FINISH_GAME",
                "gameParams": null,
                "wagers": null
            });
            this.facade.casino.networkProvider.send(requestString, this.onResultReceived);
        },
        onResultReceived: function(result) {
            this.facade.casino.displayProvider.showWinZone(false);
            this.facade.setCurrentGameRoundPhase(GameRoundPhase.ANIMATING_RESPONSE);
            this.facade.casino.displayProvider.setWinSumDisplayTo(0);
            this.facade.animationsInProgress = false;
            if (typeof result === "string") {
                var parsedData = JSON.parse(result);
                this.facade.lastResponse = new ActionResponse(parsedData);
                this.facade.onGameFinish(parsedData);
            } else {
                this.facade.lastResponse = new ActionResponse(result);
                this.facade.onGameFinish(result);
            }
            this.facade.sendNotification("GAME_ROUND_FINISHED");
        }
    });
});


// ../private/de/adp/web/controller/collectAndSpinCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.collectAndSpinCommand').requires('de.adp.web.controller.collectCommand', 'de.adp.web.data.requestBuilder', 'de.adp.web.controller.gameFlow.gameRoundPhase').defines(function() {
    CollectAndSpinCommand = CollectCommand.extend({
        facade: null,
        reqBuilder: null,
        onResultReceived: function(result) {
            this.facade.doOneMoreSpin = true;
            this.parent(result);
        }
    });
});

// ../private/de/adp/web/controller/updateButtonsCommand.js 
ig.baked = true;
ig.module('de.adp.web.controller.updateButtonsCommand').requires('impact.impact', 'de.adp.web.controller.gameFlow.gameRoundPhase', 'de.adp.web.controller.gameActionIDs', 'de.adp.web.addonGame.riskCards.controller.blackredActionIDs', 'de.adp.web.addonGame.riskLadder.controller.ladderActionIDs').defines(function() {
    UpdateButtonsCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function() {
            if (this.facade.gameGui.isPaytableViewActive()) {
                return;
            }
            this.facade.inputHandler.unbindAllListeners();
            this.facade.disableBetting();
            this.facade.disableAutospinSelector();
            this.facade.casino.buttonProvider.hideAllButtons();
            this.facade.root.enableSettings();
            this.facade.hideSideBarMenu();
            if (this.facade.currentGameRoundPhase === GameRoundPhase.RISK_CHOICE) {
                this.facade.root.enableSettings();
                this.hideAutoplayControl();
            } else {
                if (!ig.ua.mobile) {
                    $('#autoSpinSelectorContainer').show();
                } else {
                    $('#controlSwitchButton').css('visibilty', 'visible');
                    $('.expertautoplay-container').css('visibility', 'visible');
                }
                this.facade.inputHandler.bindAutoplayButtons();
            }
            var btnIds = [];
            if (this.facade.getActiveAddonGame() !== undefined) {
                this.hideAutoplayControl();
                this.facade.root.enableSettings();
                this.facade.root.disablePaytable();
                this.facade.root.disableHelp();
                btnIds = this.facade.getActiveAddonGame().getButtonsToShow();
                this.showButtons(btnIds);
                return;
            }
            if (this.facade.currentGameRoundPhase === GameRoundPhase.REQUESTING_RESPONSE || this.facade.currentGameRoundPhase === GameRoundPhase.ANIMATING_RESPONSE) {
                this.facade.root.enableSettings();
                if (this.facade.autoPlay._autoSpinActive && this.facade) {
                    this.facade.enableAutospinSelector();
                    if (this.facade.autoPlay.isInSingleOptionMode()) {
                        if (this.isReelSkippingAllowed()) {
                            btnIds = ["SKIP"];
                        }
                    } else {
                        if (!ig.ua.mobile) {
                            if (this.isReelSkippingAllowed()) {
                                btnIds = ["stopautospin", "SKIP"];
                            } else {
                                btnIds = ["stopautospin"];
                            }
                        } else {
                            btnIds = ["stopautospin"];
                        }
                    }
                } else {
                    this.facade.disableAutospinSelector();
                    if (this.isReelSkippingAllowed()) {
                        btnIds = ["SKIP"];
                        if (!ig.ua.mobile) {
                            btnIds = ["PLACE_HOLDER", "SKIP"];
                        }
                    }
                }
                this.enableSkipping();
                this.facade.showSideBarMenu();
                this.showButtons(btnIds);
                return;
            }
            var lastResponse = this.facade.casino.networkProvider.getLastResponse();
            btnIds = this.extractCommandsFromBackend(lastResponse);
            this.showButtons(btnIds);
        },
        hideAutoplayControl: function() {
            if (!ig.ua.mobile) {
                $('#autoSpinSelectorContainer').hide();
                $('.expertautoplay-container').hide();
            } else {
                $('#controlSwitchButton').css('visibilty', 'hidden');
                $('.expertautoplay-container').css('visibility', 'hidden');
            }
        },
        isReelSkippingAllowed: function() {
            var minGameRoundDuration = SpinDelayTimer.getMinimalSpinDuration(this.facade.casino, this.facade);
            return minGameRoundDuration < 100 && this.facade.casino.getCasinoConfiguration('ENABLE_SKIP_REELSPIN');
        },
        showButtons: function(btnIds) {
            this.facade.inputHandler.bindActions(btnIds);
            this.facade.casino.buttonProvider.showButtonsWithIds(btnIds);
        },
        enableBetting: function() {
            this.facade.inputHandler.enableBetting();
            this.facade.casino.buttonProvider.showButtonsWithIds(btnIds);
        },
        enableSettings: function() {
            this.facade.root.enableSettings();
            this.facade.inputHandler.enableSettings();
        },
        enableSkipping: function() {
            this.facade.inputHandler.bindActions([GameActionIDs.SKIP]);
        },
        extractCommandsFromBackend: function(response) {
            var ids = [];
            var commands = response.nextGameActions;
            var l = commands.length;
            var playIdx = -1;
            for (var i = 0; i < l; i++) {
                var command = commands[i];
                if ((!this.facade.casino.getCasinoConfiguration('ENABLE_RISK_CARDS') && command.id === BlackredActionIDs.LAUNCH_BLACKRED) || (!this.facade.casino.getCasinoConfiguration('ENABLE_RISK_LADDER') && command.id === LadderActionIDs.LAUNCH_LADDER)) {
                    continue;
                }
                ids.push(command.id);
                if (command.id === GameActionIDs.PLAY) {
                    playIdx = i;
                }
            }
            this.addCollectAndSpinButtonIfPossible(ids);
            if (playIdx !== -1) {
                this.facade.enableAutospinSelector();
                if (this.facade.currentGameMode === "NORMAL") {
                    this.facade.enableBetting();
                    if (this.facade.casino.getCasinoConfiguration("SHALL_CHECK_DEPOT_IN_CLIENT")) {
                        if (this.facade.lineStepper.availableLineSets.length > 1) {
                            this.facade.coinStepper.disableUnaffordableCoins(this.facade.casino.depotProvider.getDepotBalance() / this.facade.lineStepper.getActiveLines());
                            this.facade.lineStepper.disableUnaffordableLines(this.facade.casino.depotProvider.getDepotBalance() / this.facade.coinStepper.getSelectedCoin());
                        } else {
                            this.facade.coinStepper.disableUnaffordableCoins(this.facade.casino.depotProvider.getDepotBalance());
                        }
                    }
                    this.replacePlayWithStartAutoSpinButtonIfPossible(ids, playIdx);
                } else {
                    this.replacePlayWithStartAutoSpinButtonIfPossible(ids, playIdx);
                }
                this.facade.root.enableSettings();
                this.facade.showSideBarMenu();
            }
            this.removeAutoSpinButtonsIfNecessary(ids);
            return ids;
        },
        replacePlayWithStartAutoSpinButtonIfPossible: function(ids, playIdx) {
            if (this.facade.autoPlay.isAutoSpinReady() && !this.facade.autoPlay.isInSingleOptionMode()) {
                ids.splice(playIdx, 1);
                ids.push("autospin");
            }
        },
        addCollectAndSpinButtonIfPossible: function(ids) {
            if (this.facade.currentGameRoundPhase === GameRoundPhase.RISK_CHOICE) {
                ids.splice(1, 0, GameActionIDs.COLLECT_AND_SPIN);
            }
        },
        removeAutoSpinButtonsIfNecessary: function(ids) {
            if (!this.facade.autoPlay.isAutoSpinPossible()) {
                this.hideAutoplayControl();
                let index = ids.indexOf("stopautospin");
                if (index != -1) {
                    ids.splice(index, 1);
                }
                index = ids.indexOf("autospin");
                if (index != -1) {
                    ids.splice(index, 1);
                }
            }
        }
    });
});

// ../private/de/adp/web/autoplay/expertAutoplay.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.expertAutoplay", "de.adp.web.gui.settings.desktop.autoSpinSelector", 'de.adp.web.controller.gameActionIDs').requires("impact.impact").defines(function() {
    ExpertAutoplay = ig.Class.extend({
        _conditions: [],
        selectedAutoSpinAmount: 0,
        _autoSpinSelector: {},
        _autoPlayContainer: {},
        _remainingAutospins: 0,
        _autoSpinActive: false,
        _isInfiniteSpinsActive: false,
        _facade: null,
        _casino: null,
        _buttons: [],
        autoSpinReady: false,
        _menuIsVisible: false,
        _doOneHiddenSpin: false,
        init: function(facade, casino) {
            this._facade = facade;
            this._casino = casino;
            this.bindFunctionsToClass();
            this.createContainer();
            this.createButtons();
            this.createCommands();
        },
        bindFunctionsToClass: function() {
            this.onAutospinsChanged = this.onAutospinsChanged.bind(this);
            this.toggleExpertAutoPlay = this.toggleExpertAutoPlay.bind(this);
            this.conditionChanged = this.conditionChanged.bind(this);
            this.startAutoSpin = this.startAutoSpin.bind(this);
            this.stopAutoSpin = this.stopAutoSpin.bind(this);
            this.onStopButtonPressed = this.onStopButtonPressed.bind(this);
            this.show = this.show.bind(this);
            this.hide = this.hide.bind(this);
        },
        createContainer: function() {
            this._autoPlayContainer = $("<div class='expertautoplay-container'><ul style='list-style-type: none;margin:0;padding:0'><li class='condition-selector'><div id='condition-caption' style='font-size: 3em' >STOP</div><div id='mandatory-caption' style='font-size: 3em;position:absolute;bottom:3%;display:none;' translatable='is_mandatory'>*) Please fill in all required entry fields.</div></li><li class='amount-selector'></li></ul></div>");
            $("#main").append(this._autoPlayContainer);
            $('#condition-caption').css("display", "none");
        },
        createCommands: function() {},
        createButtons: function() {
            var steps = this._casino.getCasinoConfiguration("AUTOPLAY_SPIN_STEPS").split(",");
            var startValue = 0 + "";
            if (steps.length > 1) {
                var nValues = ["0"];
                if (steps.indexOf("0") === -1) {
                    steps = nValues.concat(steps);
                }
            } else {
                startValue = steps[0];
            }
            var autospinBtn, stopAutospinBtn;
            if (ig.ua.mobile) {
                autospinBtn = new Button("autospin", "autospin", this.startAutoSpin);
                stopAutospinBtn = new Button("stopautospin", "stopautospin", this.stopAutoSpin);
            } else {
                autospinBtn = new Button("autospin", "button-desktop button-desktop-idle button-desktop-autoSpinStart", this.startAutoSpin, "autostart");
                stopAutospinBtn = new Button("stopautospin", "button-desktop button-desktop-idle button-desktop-autoSpinStop", this.onStopButtonPressed);
            }
            this._autoSpinSelector = new AutoSpinSelector("autospins-spinner", ".amount-selector", this.onAutospinsChanged, this.hide, this.show);
            this._autoSpinSelector.setValues(steps, startValue);
            this._casino.buttonProvider.registerButton(autospinBtn);
            this._casino.buttonProvider.registerButton(stopAutospinBtn);
            this.calculateOffset();
            this.toggleExpertAutoPlay(false);
            var startValue = this._facade.casino.getCasinoConfiguration("AUTOPLAY_START_VALUE");
            if (steps.length == 1) {
                startValue = steps[0];
            }
            this.setTotalSpinsToGo(startValue);
            this.updateRemainingRoundsOnButton();
            this._autoSpinSelector.updateOnValue(this._remainingAutospins);
            this.steps = steps;
        },
        onStopButtonPressed: function() {
            "use strict";
            this._facade.sendNotification(GameActionIDs.STOP_AUTOPLAY);
        },
        getAutoSpinSelector: function() {
            return this._autoSpinSelector;
        },
        toggleExpertAutoPlay: function(show) {
            if (show) {
                if (ig.ua.mobile) {
                    $('#mobileMenuExpander').css('display', 'none');
                }
                this._facade.hideOpenSelectors();
                $(this._autoPlayContainer).css('display', '');
            } else {
                if (ig.ua.mobile) {
                    $('#mobileMenuExpander').css('display', '');
                }
                $(this._autoPlayContainer).css('display', 'none');
                this._facade.sendNotification("AUTOSPIN_AMOUNT_CHANGED");
            }
        },
        show: function() {
            "use strict";
            if (this._menuIsVisible) {
                return;
            }
            this._facade.hideOpenSelectors();
            if (ig.ua.mobile) {}
            $(this._autoPlayContainer).css('display', 'block');
            this._menuIsVisible = true;
        },
        hide: function() {
            if (!this._menuIsVisible) {
                return;
            }
            this._menuIsVisible = false;
            if (ig.ua.mobile) {}
            $(this._autoPlayContainer).css('display', 'none');
        },
        onAutospinsChanged: function(autoSpinAmount) {
            this.setTotalSpinsToGo(autoSpinAmount);
            if (this._conditions.length === 0) {
                this._autoSpinSelector.hideAutoplay()
            };
            this._facade.sendNotification("AUTOSPIN_AMOUNT_CHANGED", autoSpinAmount);
        },
        registerAbortCondition: function(condition) {
            if (typeof condition.fulfilled === "function") {
                $('#condition-caption').css("display", "block");
                condition.registerChangecallback(this.conditionChanged);
                this._conditions.push(condition);
                $('.condition-selector').append(condition.getView());
                if (condition._isMandatory) {
                    this.showMandatoryExplanation();
                }
            }
            this.calculateOffset();
        },
        removeAbortCondition: function(condition) {
            "use strict";
            if (this._conditions.indexOf(condition) !== -1) {
                this._conditions.erase(condition);
            }
            this.calculateOffset();
        },
        getRemainingRounds: function() {
            if (this._isInfiniteSpinsActive) {
                return 1;
            }
            return this._remainingAutospins;
        },
        reduceRemainingRounds: function() {
            this._remainingAutospins--;
            this.updateRemainingRoundsOnButton();
        },
        incrementRemainingRounds: function() {
            this._remainingAutospins++;
            this.updateRemainingRoundsOnButton();
        },
        pauseAutoSpin: function() {},
        resumeAutoSpin: function() {},
        startAutoSpin: function() {
            this._facade.sendNotification(GameActionIDs.START_AUTOPLAY);
        },
        stopAutoSpin: function(stoppedByCondition) {
            this._casino.soundPlayer.playEffect("SFX_Autoplay_Off");
            this._autoSpinActive = false;
            for (var i = 0; i < this._conditions.length; i++) {
                this._conditions[i].onAutplayStopped();
                if (this._conditions[i]._isMandatory) {
                    if (this.isInSingleOptionMode()) {
                        this.setTotalSpinsToGo(this.getAutoSpinSelector()._values[0]);
                    } else {
                        this.setTotalSpinsToGo(0);
                    }
                }
            }
            if (this._remainingAutospins <= 0 || stoppedByCondition === true) {
                if (this._facade.casino.getCasinoConfiguration("AUTOPLAY_RESET_TO_START_VALUE")) {
                    var startValue = this._facade.casino.getCasinoConfiguration("AUTOPLAY_START_VALUE");
                    if (this.isInSingleOptionMode()) {
                        startValue = this.getAutoSpinSelector()._values[0];
                    }
                    this.setTotalSpinsToGo(startValue);
                } else {
                    this.setTotalSpinsToGo(this.selectedAutoSpinAmount);
                }
            }
            this._autoSpinSelector.hideExpertAutoplay();
            this.updateRemainingRoundsOnButton();
            this._autoSpinSelector.updateOnValue(this._remainingAutospins, true);
            this.resetConditions();
            this._facade.sendNotification("UPDATE_BUTTONS");
        },
        resetConditions: function() {
            "use strict";
            for (var i = 0; i < this._conditions.length; i++) {
                this._conditions[i].onAutplayStopped();
                if (this._conditions[i]._isMandatory) {
                    this._conditions[i].reset();
                }
            }
        },
        checkConditions: function(facade) {
            var matched = false;
            for (var l = 0; l < this._conditions.length; l++) {
                var cond = this._conditions[l];
                if (cond.isActive()) {
                    matched = cond.fulfilled(this.casino, facade);
                }
                if (matched) {
                    break;
                }
            }
            return matched;
        },
        checkConditionsReady: function() {
            var ready = true;
            if (this._conditions.length > 0) {
                for (var i = 0; i < this._conditions.length; i++) {
                    var condition = this._conditions[i];
                    if (condition._isMandatory && !condition.isReady()) {
                        ready = false;
                        break;
                    }
                }
            }
            return ready;
        },
        resizeConditions: function(scaleFactor) {
            "use strict";
            for (var i = 0; i < this._conditions.length; i++) {
                var condition = this._conditions[i];
                condition.resizeView();
            }
            this.calculateOffset();
        },
        isAutoSpinReady: function() {
            if (this._remainingAutospins > 0 || this._isInfiniteSpinsActive) {
                if (this.checkConditionsReady()) {
                    return true;
                }
            }
            return false;
        },
        setTotalSpinsToGo: function(val) {
            val = parseInt(val, 10);
            if (val < 0) {
                this._isInfiniteSpinsActive = true;
            } else {
                this._isInfiniteSpinsActive = false;
            }
            this._remainingAutospins = val;
            this.selectedAutoSpinAmount = this._remainingAutospins;
        },
        updateRemainingRoundsOnButton: function() {
            if (!this._isInfiniteSpinsActive) {
                if (this._remainingAutospins >= 0) {
                    $("#selectedAutospinAmount").html(this._remainingAutospins);
                } else {
                    $("#selectedAutospinAmount").html(0);
                }
            }
            this._autoSpinSelector.updateOnValue(this._remainingAutospins, true);
        },
        pauseAutoSpin: function() {
            this._autoSpinActive = false;
        },
        calculateOffset: function() {
            this.toggleExpertAutoPlay(true);
            if (this._conditions.length !== 0) {
                var padding = this._conditions[0].getHeight() / 2;
            }
            var conditionsHeight = $(".condition-selector").height() + 2 * BaseValues.DesktopButtonFontSize;
            var selectorHeight = $("#autoSpinWrapper").height();
            var height = conditionsHeight > selectorHeight ? conditionsHeight : selectorHeight,
                offsetTop = ig.system.stageHeight - $('#depotDisplay').height() - height;
            $(this._autoPlayContainer).css('height', height);
            var selectorOffset = conditionsHeight - selectorHeight;
            if (selectorOffset <= 0) {
                selectorOffset = 0;
            }
            $("#autoSpinWrapper").css('top', selectorOffset);
            $(this._autoPlayContainer).css('top', offsetTop);
            if (this._conditions.length === 0) {
                $(".condition-selector").css('display', 'none');
                $(".amount-selector").addClass('no-expert-mode');
            } else {
                $(".condition-selector").css('display', '');
                $(".amount-selector").removeClass('no-expert-mode');
            }
            this.toggleExpertAutoPlay(false);
        },
        conditionChanged: function() {
            this._facade.sendNotification("AUTOSPIN_AMOUNT_CHANGED");
        },
        showMandatoryExplanation: function() {
            $('#mandatory-caption').css("display", "block");
        },
        translate: function(resProv) {
            "use strict";
            $('#condition-caption').html(resProv.getString('deactivate_autoplay'));
            $('#mandatory-caption').html(resProv.getString('is_mandatory'));
            this._autoSpinSelector.translate(resProv);
        },
        hasMandatoryCondition: function() {
            if (this._conditions.length > 0) {
                for (var i = 0; i < this._conditions.length; i++) {
                    var condition = this._conditions[i];
                    if (condition._isMandatory) {
                        return true;
                    }
                }
            }
            return false;
        },
        doOneAutoSpin: function() {
            this._doOneHiddenSpin = true;
        },
        isInSingleOptionMode: function() {
            return this.getAutoSpinSelector()._values.length <= 1;
        },
        isAutoSpinPossible: function() {
            if (!this._casino.getCasinoConfiguration("ENABLE_AUTOPLAY")) {
                return false;
            }
            if (this.steps.length > 1) {
                return true;
            }
            if (this.steps.length == 1) {
                if (this.steps[0] !== "0") {
                    return true;
                }
            }
            return false;
        }
    });
});



// ../private/de/adp/web/paytable/elements/payGroup.js 
ig.baked = true;
ig.module("de.adp.web.paytable.elements.payGroup").requires("impact.impact").defines(function() {
    PayGroup = ig.Class.extend({
        _self: null,
        _valueBox: null,
        _image: null,
        _imageBox: null,
        _parent: "",
        _gfxPath: "",
        _maxValue: null,
        groupMembers: [],
        payItems: [],
        occurences: [],
        upperCaption: "",
        lowerCaption: "",
        id: 0,
        htmlID: "",
        isEmpty: true,
        init: function(id, payGroupMemberIds, symbolGfxPath, occurences) {
            if (payGroupMemberIds.isArray()) {
                this.groupMembers = payGroupMemberIds;
                this.id = id;
                this._parent = parent;
                this._gfxPath = symbolGfxPath;
            }
            if (occurences !== undefined) {
                if (occurences.isArray()) {
                    this.occurences = occurences;
                }
            } else {
                this.occurences = [];
            }
            this.createGroup();
        },
        get: function() {
            return this._self;
        },
        createGroup: function() {
            this.htmlID = "paygroup" + this.id;
            this._self = $("<div id='" + this.htmlID + "' class='paygroup ui-responsive'></div>");
            if (this.occurences.length === 1) {
                this._valueBox = $("<div id='" + this.htmlID + "valueBox' class='paygroup-valueBox' ><!--span class='alignHelper'></span--></div>");
                $(this._self).append("<div id='" + this.htmlID + "symbol' class='paygroup-symbol'><!--span class='alignHelper'></span--><img id=" + this.htmlID + "symbolImage" + "  src='" + this._gfxPath + "'/></div>");
            } else {
                this._valueBox = $("<div id='" + this.htmlID + "valueBox' class='paygroup-valueBox' ></div>");
                this._image = $("<img id=" + this.htmlID + "symbolImage" + "  src='" + this._gfxPath + "'/>");
                this._imageBox = $("<div id='" + this.htmlID + "symbol' class='paygroup-symbol'></div>");
                $(this._imageBox).append(this._image);
                $(this._self).append(this._imageBox);
            }
            $(this._self).append(this._valueBox);
            this.addCaptionBelowImage("&#160;", "paytable-image-caption");
        },
        addPayItem: function(payItem) {
            if (typeof payItem !== 'undefined') {
                if (!this.isEmpty) {
                    $(payItem.get()).addClass("payItemSeparator");
                }
                payItem.setPayItemOccurence(this.occurences.length);
                if (this.occurences.length === 1) {
                    $(this._self).addClass("paygroup-one");
                }
                this.payItems.push(payItem);
                $(this._valueBox).append(payItem.get());
                this.isEmpty = false;
            }
        },
        addPayItems: function() {
            for (var i = 0; i < arguments.length; i++) {
                if (arguments[i] instanceof PayItem) {
                    arguments[i].setPayItemOccurence(this.occurences.length);
                    this.payItems.push(arguments[i]);
                    $(this._valueBox).append(arguments[i].get());
                }
            }
        },
        addSupportText: function(localeKey, styleClasses) {
            if (styleClasses === undefined || styleClasses === null) {
                styleClasses = "";
            }
            var cap = $("<p class='" + styleClasses + "'>" + localeKey + "</p>");
            $(this._valueBox).append(cap);
            if (this.payItems.length < 1) {
                $(this._valueBox).addClass("paygroup-valueBox-onlyText");
            }
            return cap;
        },
        addCaptionAboveImage: function(localeKey, styleClasses) {
            if (styleClasses === undefined || styleClasses === null) {
                styleClasses = "";
            }
            if (this.upperCaption !== "") {
                $(this.upperCaption).html(localeKey);
                $(this.upperCaption).addClass(styleClasses);
            } else {
                this.upperCaption = $("<p class='" + styleClasses + "' >" + localeKey + "</p>");
                $(this._image).prepend(this.upperCaption);
            }
        },
        addCaptionBelowImage: function(localeKey, styleClasses) {
            if (styleClasses === undefined || styleClasses === null) {
                styleClasses = "";
            }
            if (this.lowerCaption !== "") {
                $(this.lowerCaption).html(localeKey);
                $(this.lowerCaption).addClass(styleClasses);
            } else {
                this.lowerCaption = $("<p class='" + styleClasses + "'>" + localeKey + "</p>");
                $(this._imageBox).append(this.lowerCaption);
            }
        },
        getGroupMembers: function() {
            return this.groupMembers;
        },
        getPayItems: function() {
            return this.payItems;
        },
        x: function(value) {
            this.styles.left = value;
        },
        y: function(value) {
            this.styles.top = value;
        },
        onDisplay: function() {}
    });
});

// ../private/de/adp/web/paytable/paytable.js 
ig.baked = true;
ig.module('de.adp.web.paytable.paytable').requires('impact.impact', 'de.adp.web.paytable.elements.payGroup', 'de.adp.web.utils.spaceFiller').defines(function() {
    Paytable = ig.Class.extend({
        _htmlContainer: null,
        _paygroupContainer: [],
        gridCounter: 0,
        result: null,
        activeLineStake: 0,
        activeTotalStake: 0,
        coinValue: 0,
        payGroups: [],
        highlights: [],
        headerGroup: null,
        payGroupAmount: 0,
        payItemFontSize: 0,
        init: function(result, container) {
            var paytable = result.payTable();
            this._htmlContainer = container;
            this.payGroupAmount = paytable.groups.length;
            for (var i = 0; i < paytable.groups.length; i++) {
                this.payGroups.push(paytable.groups[i]);
            }
        },
        addPaygroup: function(paygroup) {
            if (paygroup instanceof PayGroup) {
                this._paygroupContainer.push(paygroup);
                if (this.gridCounter > 3) {
                    this.gridCounter = 0;
                }
                switch (this.gridCounter) {
                    case 0:
                        $(paygroup.get()).addClass("ui-block-a");
                        break;
                    case 1:
                        $(paygroup.get()).addClass("ui-block-b");
                        break;
                    case 2:
                        $(paygroup.get()).addClass("ui-block-c");
                        break;
                    case 3:
                        $(paygroup.get()).addClass("ui-block-d");
                        break;
                    default:
                        break;
                }
                this.gridCounter++;
                $(this._htmlContainer).append(paygroup.get());
            }
        },
        addHeaderGroup: function(headerGroup) {
            this.headerGroup = headerGroup;
            if (this._paygroupContainer[0] !== undefined) {
                $(this._paygroupContainer[0]).prepend(headerGroup.getView());
            } else {
                $(this._htmlContainer).append(headerGroup.getView());
            }
        },
        setHighlight: function(symbolId, occur) {
            var highItem = $("div[symbolId='" + symbolId + "'][occurrence='" + occur + "']").addClass("highlight");
            this.highlights.push(highItem);
        },
        clean: function() {
            for (var i = 0; i < this.highlights.length; i++) {
                $(this.highlights[i]).removeClass("highlight");
            }
            this.highlights.length = 0;
        },
        setStake: function(stakePerLine, totalStake) {
            this.activeLineStake = stakePerLine;
            this.activeTotalStake = totalStake;
            for (var i = 0; i < this.payGroupAmount; i++) {
                this.calculateWinningsPerPaygroup(i);
            }
        },
        onDisplay: function() {
            for (var i = 0; i < this._paygroupContainer.length; i++) {
                this._paygroupContainer[i].onDisplay();
            }
            this.layoutFonts();
        },
        layoutFonts: function() {
            if (this.initialFontSize == undefined) {
                this.initialFontSize = SpaceFiller.getFontSizeInPixel(".points-box");
            } else {
                $(".points-box").css("font-size", this.initialFontSize + "px");
            }
            var downScaleRatio = this.calculateRequiredDownscaleRatio();
            if (downScaleRatio >= 1) {
                return;
            }
            var currentFontSize = SpaceFiller.getFontSizeInPixel(".points-box");
            var requiredFontSize = currentFontSize * downScaleRatio;
            $(".points-box").css("font-size", requiredFontSize + "px");
        },
        calculateWinningsPerPaygroup: function(payGroupId) {
            var payGroup = this.payGroups[payGroupId];
            var symbolIds = payGroup.members;
            for (var i = 0; i < symbolIds.length; i++) {
                var payGroupMember = $("span[symbolId=" + symbolIds[i] + "]");
                for (var j = 0; j < payGroupMember.length; j++) {
                    for (var k = 0; k < payGroup.items.length; k++) {
                        if (parseInt($(payGroupMember[j]).attr("occurence")) === payGroup.items[k].occur) {
                            if ($(payGroupMember[j]).attr("dependsOnTotalStake") === "true") {
                                $(payGroupMember[j]).html(currencyFormatter.getMoneyString(this.activeTotalStake * payGroup.items[k].winFactor));
                            } else {
                                $(payGroupMember[j]).html(currencyFormatter.getMoneyString(this.activeLineStake * payGroup.items[k].winFactor));
                            }
                        }
                    }
                }
            }
        },
        calculateRequiredDownscaleRatio: function() {
            var downScaleRatio = 1;
            var availableWidth = $(".points-box-value").width();
            for (var i = 0; i < this._paygroupContainer.length; i++) {
                var items = this._paygroupContainer[i].getPayItems();
                for (var j = 0; j < items.length; j++) {
                    var item = items[j]._self[0].childNodes[1].childNodes[0];
                    var misMatchRatio = SpaceFiller.getRequiredDownScaleRatio(item, availableWidth);
                    if (misMatchRatio < downScaleRatio) {
                        downScaleRatio = misMatchRatio;
                    }
                }
            }
            return downScaleRatio;
        },
        switchToFree: function() {},
        switchToNormal: function() {}
    });
});



// ../private/de/adp/web/addonGame/view/addonGame.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.view.addonGame").requires("impact.node").defines(function() {
    AddonGame = ig.Node.extend({
        init: function(casino) {},
        getGameName: function() {
            throw "AddonGame: AddonGame must return a unique Gamename";
        },
        activate: function() {
            throw "AddonGame: Activate methods needs to be overwritten by subclass";
        },
        isTriggeredBy: function(result) {
            return false;
        },
        isUsingCanvas: function() {
            return false;
        },
        handleResult: function(result) {
            throw "handleResult: Implmenent this method to handle the gambling results";
        },
        resume: function(result) {
            throw "resume: Implement this method to manage resuming";
        },
        getButtonsToShow: function() {
            throw "getButtonsToShow: Implement this method to display Buttons matching the current game state.";
        },
        update: function() {
            this.parent();
        },
        draw: function() {
            this.parent();
        },
        hide: function() {
            this.visible = false;
        },
        show: function() {
            this.visible = true;
        }
    });
});


// ../private/de/adp/web/addonGame/riskLadder/elements/riskStep.js 
ig.baked = true;
ig.module('de.adp.web.addonGame.riskLadder.elements.riskStep').requires("impact.impact").defines(function() {
    RiskStep = ig.Class.extend({
        _elId: "",
        _self: null,
        MIN_X_SCALE: 0.5,
        MIN_Y_SCALE: 0.65,
        BASE_WIDTH: 276,
        BASE_HEIGHT: 60,
        actHeight: 0,
        actWidth: 0,
        level: 0,
        winAmount: 0,
        parentContainer: null,
        isAdjusted: false,
        avWidth: 100,
        init: function(winAmount, level, totalLevels, parentContainer) {
            if (typeof level === 'number' && level > 0) {
                this.level = level;
            }
            if (typeof winAmount === 'number' && winAmount > 0) {
                this.winAmount = winAmount;
            }
            this.parentContainer = parentContainer;
            this.createElement(winAmount, level, totalLevels);
        },
        createElement: function(winAmount, level, totallevels) {
            this._self = $("<div id='level" + level + "' class='riskladder-element'><p id='level" + level + "-caption'>" + currencyFormatter.getMoneyString(winAmount) + "</p></div>");
            this._elId = "#level" + level;
            this.levelId = level;
            this.totalLevels = totallevels;
            $(this.parentContainer).append(this._self);
            this.resize();
        },
        highlight: function() {
            $(this._self).css({
                "background-image": "url(private/de/adp/web/assets/riskLadder/riskladder_highlight.png)",
                "color": "#000"
            });
        },
        unlight: function() {
            $(this._self).css({
                "background-image": "url(private/de/adp/web/assets/riskLadder/riskladder_idle.png)",
                "color": "#FFF"
            });
        },
        semiHighlight: function() {
            $(this._self).css({
                "background-image": "url(private/de/adp/web/assets/riskLadder/riskladder_highlight.png)",
                "opacity": 0.6
            });
        },
        getWinAmount: function() {
            return this.winAmount;
        },
        self: function() {
            if (typeof this._self !== "null" && typeof this._self !== "undefined") {
                return this._self;
            }
        },
        getWidth: function() {
            return $(this._self).outerWidth();
        },
        getHeight: function() {
            return $(this._self).innerHeight();
        },
        updateValue: function(value) {
            if (this.winAmount === value) {
                return;
            }
            this.winAmount = value;
            var money = currencyFormatter.getMoneyString(value);
            $("#level" + this.level + "-caption").html(money);
            this.isAdjusted = false;
            this.adjustText();
        },
        adjustText: function() {
            if (this.isAdjusted) {
                return;
            }
            var elem = $("#level" + this.level + "-caption");
            ig.system.fitTextIntoWidth(elem, this.avWidth);
            this.isAdjusted = true;
        },
        resize: function() {
            var progressFactor = this.levelId / this.totalLevels;
            var textHeight = 1.2 * 16;
            var baseProgressFactor = 14 / 15;
            var firstWidth = this.MIN_X_SCALE * this.BASE_WIDTH + baseProgressFactor * this.BASE_WIDTH * (1 - this.MIN_X_SCALE);
            var elWidth = this.MIN_X_SCALE * this.BASE_WIDTH + progressFactor * this.BASE_WIDTH * (1 - this.MIN_X_SCALE);
            this.avWidth = elWidth * 0.8;
            var elHeight = this.MIN_Y_SCALE * this.BASE_HEIGHT + progressFactor * this.BASE_HEIGHT * (1 - this.MIN_Y_SCALE);
            $(this._self).css({
                "height": (elHeight) + "px",
                "width": (elWidth) + "px",
                "background-size": (elWidth) + "px " + (elHeight) + "px"
            });
            $(this._self).css("background-image", "url(private/de/adp/web/assets/riskLadder/riskladder_idle.png)");
            $(this._self).css("left", ((firstWidth - elWidth)) / 2);
            this.actHeight = elHeight;
            this.actWidth = elWidth;
            var topOffset = ((elHeight) / 2) - (((textHeight + 9)) / 2);
            $($(this._elId + "-caption").css({
                "top": topOffset,
                "font-size": textHeight + "pt"
            }));
        }
    });
});

// ../private/de/adp/web/addonGame/riskLadder/controller/riskLadderGambleCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.controller.riskLadderGambleCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.data.requestBuilder", "de.adp.web.addonGame.riskLadder.controller.ladderActionIDs").defines(function() {
    RiskLadderGambleCommand = GameCommand.extend({
        reqBuilder: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            this.resultReceived = this.resultReceived.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
            this.reqBuilder = new RequestBuilder();
        },
        execute: function() {
            if (!this.facade.getActiveAddonGame().isReadyForInput) {
                return;
            }
            this.facade.getActiveAddonGame().isReadyForInput = false;
            this.facade.getActiveAddonGame().stopAutoCollectTimer();
            this.facade.casino.networkProvider.send(this.reqBuilder.createRiskLadderRequest("PLAY"), this.resultReceived);
            this.facade.sendNotification("UPDATE_BUTTONS");
        },
        resultReceived: function(result) {
            this.facade.getActiveAddonGame().handleResult(result);
        }
    });
});

// ../private/de/adp/web/addonGame/riskLadder/controller/riskLadderDivideCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.controller.riskLadderDivideCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.data.requestBuilder", "de.adp.web.addonGame.riskLadder.controller.ladderActionIDs").defines(function() {
    RiskLadderDivideCommand = GameCommand.extend({
        reqBuilder: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            this.resultReceived = this.resultReceived.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
            this.reqBuilder = new RequestBuilder();
        },
        execute: function() {
            if (!this.facade.getActiveAddonGame().isReadyForInput) {
                return;
            }
            this.facade.getActiveAddonGame().isReadyForInput = false;
            this.facade.getActiveAddonGame().isDividing = true;
            this.facade.getActiveAddonGame().stopAutoCollectTimer();
            this.facade.casino.soundPlayer.playEffect("SFX_GambleDivide");
            this.facade.casino.networkProvider.send(this.reqBuilder.createRiskLadderRequest("RISK_DIVIDE"), this.resultReceived);
            this.facade.sendNotification("UPDATE_BUTTONS");
        },
        resultReceived: function(result) {
            this.facade.getActiveAddonGame().handleResult(result);
        }
    });
});


// ../private/de/adp/web/addonGame/riskLadder/elements/riskStepPlayoff.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.elements.riskStepPlayoff").requires("de.adp.web.addonGame.riskLadder.elements.riskStep").defines(function() {
    RiskStepPlayoff = RiskStep.extend({
        avWidth: 100,
        isAdjusted: false,
        createElement: function(winAmount, level, totallevels) {
            this._self = $("<div id='level" + level + "' class='riskladder-element'><p id='level" + level + "-caption'></p></div>");
            this._elId = "#level" + level;
            this.levelId = level;
            this.totalLevels = totallevels;
            $(this.parentContainer).append(this._self);
            this.resize();
        },
        translate: function(resProv) {
            if (this.isAdjusted) {
                return;
            }
            $('#riskladder-page').css('display', 'block');
            $(this.parentContainer).css('display', 'block');
            $("#level" + this.level + "-caption").html(resProv.getString("LadderPlayOffCaption").toUpperCase());
            ig.system.fitTextIntoWidth($("#level" + this.level + "-caption"), this.avWidth);
            this.isAdjusted = true;
            $(this.parentContainer).css('display', 'none');
            $('#riskladder-page').css('display', 'none');
        },
        resize: function() {
            var textHeight = 1.2 * 16;
            var progressFactor = this.levelId / this.totalLevels;
            var baseProgressFactor = 14 / 15;
            var firstWidth = this.MIN_X_SCALE * this.BASE_WIDTH + baseProgressFactor * this.BASE_WIDTH * (1 - this.MIN_X_SCALE);
            var elWidth = this.MIN_X_SCALE * this.BASE_WIDTH + progressFactor * this.BASE_WIDTH * (1 - this.MIN_X_SCALE);
            var border = this.MIN_X_SCALE * 36 + progressFactor * 36 * (1 - this.MIN_X_SCALE);
            this.avWidth = (elWidth - border);
            var elHeight = this.MIN_Y_SCALE * this.BASE_HEIGHT + progressFactor * this.BASE_HEIGHT * (1 - this.MIN_Y_SCALE);
            $(this._self).css({
                "height": (elHeight) + "px",
                "width": (elWidth) + "px",
                "background-size": (elWidth) + "px " + (elHeight) + "px"
            });
            $(this._self).css("background-image", "url(private/de/adp/web/assets/riskLadder/riskladder_idle.png)");
            $(this._self).css("left", (firstWidth - elWidth) / 2);
            var topOffset = ((elHeight) / 2) - ((textHeight + 9) / 2);
            $($(this._elId + " > p").css({
                "top": (topOffset),
                "font-size": textHeight + "pt"
            }));
        }
    });
});


// ../private/de/adp/web/addonGame/riskLadder/dtos/riskLadderResult.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.dtos.riskLadderResult").requires("impact.impact").defines(function() {
    RiskLadderResult = ig.Class.extend({
        previousLevel: -1,
        nextLevel: -1,
        currentLevel: -1,
        value: 0,
        init: function() {},
        fill: function(result) {
            if (result !== null) {
                if (result.level !== null) {
                    this.currentLevel = result.level;
                } else {
                    return false;
                }
                if (result.winLevel !== null) {
                    this.nextLevel = result.winLevel;
                } else {
                    return false;
                }
                if (result.lossLevel !== null) {
                    this.previousLevel = result.lossLevel;
                } else {
                    return false;
                }
                if (result.value !== null) {
                    this.value = result.value;
                } else {
                    return false;
                }
                return true;
            } else {
                return false;
            }
        }
    });
});

// ../private/de/adp/web/addonGame/riskLadder/elements/firework.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.elements.firework").requires("impact.impact").defines(function() {
    FireWork = ig.Class.extend({
        _self: null,
        _posX: 0,
        _posY: 0,
        _timeStarted: 0,
        _timeSinceLastFrame: 0,
        _frameTime: 0,
        classes: ["fireworks-blue", "fireworks-yellow", "fireworks-white"],
        activeColor: 0,
        currentFrame: 0,
        maxFrames: [15, 22, 22],
        sizes: [180, 363, 402],
        finishCallback: null,
        fadingOut: false,
        fadeOutTime: 250,
        fadeOutStartTime: 0,
        init: function(color, x, y, finishCallback) {
            this.activeColor = color;
            this._posX = x;
            this._posY = y;
            this.finishCallback = finishCallback;
            this.createDiv();
        },
        createDiv: function() {
            this._self = $("<div id='" + this.activeColor + this._posX + this._posY + "' class='fireworks " + this.classes[this.activeColor] + "'></div>");
            this.layoutHTMLElementAccordingToCanvas(this._self, this._posX, this._posY, this.sizes[this.activeColor], this.sizes[this.activeColor], 10);
            this._frameTime = this.maxFrames[this.activeColor] / ig.system.currentFPS;
            this._timeStarted = Date.now();
        },
        setPosition: function(x, y) {
            this.currentFrame = 0;
            $(this._self).css('opacity', 1);
            this.layoutHTMLElementAccordingToCanvas(this._self, x, y, this.sizes[this.activeColor], this.sizes[this.activeColor], 10);
            this._frameTime = this.maxFrames[this.activeColor] / ig.system.currentFPS;
            this._timeStarted = Date.now();
        },
        get: function() {
            return this._self;
        },
        getMaxFrames: function() {
            return this.maxFrames[this.activeColor];
        },
        fadeOutFirework: function() {
            "use strict";
            this.fadingOut = true;
            this.fadeOutStartTime = Date.now();
            $(this._self).css('opacity', 0);
        },
        showNextFrame: function() {
            "use strict";
            $(this._self).css('background-position', (this.currentFrame * this.sizes[this.activeColor]) * -1);
        },
        layoutHTMLElementAccordingToCanvas: function(element, posX, posY, width, height, fontSize) {
            var canvasX = ig.system.stageX,
                canvasY = ig.system.stageY,
                scaleY = 1,
                scaleX = 1;
            $(element).css("position", "absolute");
            if (posX != undefined) {
                posX = (posX * ig.system.stageScale + canvasX);
                $(element).css("left", posX);
            }
            if (posY != undefined) {
                posY = (posY * ig.system.stageScale + canvasY);
                $(element).css("top", posY);
            }
            if (fontSize != undefined) {
                fontSize = fontSize * ig.system.stageScale;
                $(element).css("font-size", fontSize + "px");
            }
            if (width != undefined) {
                scaleX = (width * ig.system.stageScale) / width;
            }
            if (height != undefined) {
                scaleY = (height * ig.system.stageScale) / height;
            }
            if (scaleX != 1 || scaleY != 1) {
                $(element).css("transform", 'scale(' + scaleX + ',' + scaleY + ')');
            }
        },
        update: function() {
            this._timeSinceLastFrame = Date.now() - this._timeStarted;
            if (this._timeSinceLastFrame > this._frameTime && !this.fadingOut) {
                this.showNextFrame();
                this.currentFrame++;
                if (this.currentFrame >= this.maxFrames[this.activeColor]) {
                    this.fadeOutFirework();
                }
            } else {
                if ((Date.now() - this.fadeOutStartTime) > this.fadeOutTime) {
                    this.finishCallback(this);
                    this.fadingOut = false;
                }
            }
        },
        kill: function() {
            "use strict";
            $(this._self).remove();
            this.currentFrame = 0;
        }
    });
});

// ../private/de/adp/web/addonGame/riskLadder/elements/desktopLadderChoiceButton.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.elements.desktopLadderChoiceButton").requires("de.adp.web.gui.elements.button").defines(function() {
    DesktopLadderChoiceButton = Button.extend({
        translate: function(resProv) {
            var caption = "";
            if (resProv.localeID === "hu") {
                var rawString = resProv.getString(this.translationKey).toUpperCase();
                var firstPart = rawString.substr(0, 8);
                var secondPart = rawString.substr(8);
                caption = firstPart + " " + secondPart;
            } else {
                caption = resProv.getString(this.translationKey).toUpperCase();
            }
            $(this.captionBox).html(caption);
        }
    });
});

// ../private/de/adp/web/addonGame/riskLadder/riskLadderGui.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.riskLadderGui").requires("impact.impact", "de.adp.web.addonGame.view.addonGame", "de.adp.web.addonGame.riskLadder.elements.riskStep", "de.adp.web.addonGame.riskLadder.controller.riskLadderGambleCommand", "de.adp.web.addonGame.riskLadder.controller.riskLadderDivideCommand", "de.adp.web.addonGame.riskLadder.controller.ladderActionIDs", "de.adp.web.controller.gameActionIDs", "de.adp.web.addonGame.riskLadder.elements.riskStepPlayoff", "de.adp.web.addonGame.riskLadder.dtos.riskLadderResult", "de.adp.web.data.requestBuilder", "de.adp.web.addonGame.riskLadder.elements.firework", "de.adp.web.addonGame.riskLadder.elements.desktopLadderChoiceButton").defines(function() {
    RLGui = AddonGame.extend({
        GAME_ID: "LADDER",
        ladderRoot: null,
        controlContainer: null,
        BLINK_FRAME_SPLIT: 250,
        BLINK_FRAME_STEP: 375,
        ALTERNATING_RATIO: 5,
        ALTERNATING_RATIO_PLAYOFF: 100,
        TOTAL_STEPS: 15,
        LADDER_AMOUNTS: [0, 15, 30, 60, 120, 240, "PLAYOFF", 400, 800, 1200, 2000, 3200, 5200, 8400, 14000],
        COLLECTTIMELIMIT: 8000,
        PLAYOFFLIMIT: 80,
        PLAYOFFALTERNATECOUNT: 0,
        autoCollectTimerStartTime: 0,
        currentLevel: 0,
        currentBet: 0,
        winLevel: 0,
        lossLevel: 0,
        _switch: false,
        lastResult: null,
        lastResponse: null,
        ladderItems: [],
        fireWorkMaxTime: 0,
        curPlayoffHighlight: 0,
        prevPlayoffHighlight: 0,
        PLAYOFF_INDEX: 6,
        playOffRange: 0,
        casino: null,
        maxWidth: 0,
        riskButton: null,
        facade: null,
        started: false,
        showFireWork: false,
        reqBuilder: null,
        isPlayOff: false,
        diff: 0,
        lastLadderLevel: -1,
        lastLadderLevelMovedTo: 12,
        prevLadderStep: 0,
        nextLadderStep: 0,
        isAnimatingEnd: false,
        idleTimeInMilliseconds: 0,
        activeFireWorks: [],
        collectTimeout: null,
        isReadyForInput: false,
        currTimeUpdate: 0,
        lastTimeUpdate: 0,
        timeSinceAnimationStart: 0,
        isDividing: false,
        pausedTime: 0,
        pauseStartedAt: 0,
        isPaused: false,
        playOffStep: null,
        blinkRatio: 0,
        init: function(container, controlContainer, p_facade, p_casino) {
            RLGui.scaleFactor = ig.system.originalGameWidth / 920;
            if (typeof container !== "undefined" && container !== null) {
                if (container.indexOf("#") > -1) {
                    this.ladderRoot = container;
                } else {
                    this.ladderRoot = "#" + container;
                }
                $(this.ladderRoot).hide();
            }
            if (typeof controlContainer !== "undefined" && controlContainer !== null) {
                if (controlContainer.indexOf("#") > -1) {
                    this.controlContainer = controlContainer;
                } else {
                    this.controlContainer = "#" + controlContainer;
                }
                $(this.controlContainer).hide();
            }
            this.facade = p_facade;
            this.casino = p_casino;
            this.reqBuilder = new RequestBuilder();
            this.bindFunctionsToClass();
            this.createButtons();
            this.createLadder();
            $("#riskladder-container").css("transform", "scale(" + ig.system.stageScale * RLGui.scaleFactor + ")");
            this.preload();
        },
        preload: function() {
            new ig.Image('private/de/adp/web/assets/riskLadder/firework_blue.png');
            new ig.Image('private/de/adp/web/assets/riskLadder/firework_white.png');
            new ig.Image('private/de/adp/web/assets/riskLadder/firework_yellow.png');
        },
        bindFunctionsToClass: function() {
            this.onResultReceived = this.onResultReceived.bind(this);
            this.onMovingFinished = this.onMovingFinished.bind(this);
            this.gamble = this.gamble.bind(this);
            this.performCollect = this.performCollect.bind(this);
            this.divide = this.divide.bind(this);
            this.activate = this.activate.bind(this);
            this.triggerActivation = this.triggerActivation.bind(this);
            this.getButton = this.getButton.bind(this);
            this.updateButtons = this.updateButtons.bind(this);
            this.onCollectTriggered = this.onCollectTriggered.bind(this);
            this.setNewFireWorkPositon = this.setNewFireWorkPositon.bind(this);
            this.skipFireWork = this.skipFireWork.bind(this);
            this.onPlayoffSoundFinished = this.onPlayoffSoundFinished.bind(this);
        },
        activate: function(isResuming) {
            this.isReadyForInput = false;
            this.lastResponse = this.facade.casino.networkProvider.getLastResponse();
            this.facade.sendNotification("UPDATE_BUTTONS");
            this.isCollectable = false;
            this.facade.gameGui.cleanWinAnimation();
            $(this.ladderRoot).css("display", "block");
            $(this.ladderRoot).parent().css("display", "block");
            this.playOffStep.adjustText();
            if (!isResuming) {
                this.requestInitResult();
            }
            this.facade.casino.soundPlayer.stopAllEffects();
            this.facade.casino.soundPlayer.stopAllAmbient();
            this.facade.casino.soundPlayer.playAmbient("SFX_GambleBgLoop");
        },
        hide: function() {
            $(this.ladderRoot).css("visibility", "hidden");
            $(this.ladderRoot).parent().css("visibility", "hidden");
        },
        show: function() {
            $(this.ladderRoot).css("visibility", "visible");
            $(this.ladderRoot).parent().css("visibility", "visible");
        },
        deactivate: function() {
            this.started = false;
            this.isReadyForInput = false;
            this.facade.casino.soundPlayer.stopAllEffects();
            this.facade.casino.soundPlayer.stopAllAmbient();
            $("#riskladder-page").off(ig.touchEvents, this.skipFireWork);
            $(this.ladderRoot).css("display", "none");
            $(this.ladderRoot).parent().css("display", "none");
            this.clear();
            this.facade.gameGui.winAnimation.showAnimation(true);
            this.facade.sendNotification(LadderActionIDs.END_LADDER);
        },
        getGameName: function() {
            return this.GAME_ID;
        },
        gamble: function() {
            this.facade.sendNotification(LadderActionIDs.GAMBLE);
        },
        onCollectTriggered: function() {
            this.isCollectable = false;
            this.facade.sendNotification(LadderActionIDs.COLLECT_TRIGGERED);
        },
        performCollect: function() {
            this.isReadyForInput = false;
            this.frameCnt = 0;
            if (this.activeFireWorks.length > 0) {
                for (var i = 0; i < this.activeFireWorks.length; i++) {
                    $(this.activeFireWorks[i].get()).remove();
                }
                this.activeFireWorks.length = 0;
            }
            $(this.controlContainer).hide();
            var withSound = !(this.lastResult.currentLevel === 0);
            this.deactivate();
            this.facade.sendNotification(GameActionIDs.COLLECT, withSound);
        },
        divide: function() {
            this.facade.sendNotification(LadderActionIDs.DIVIDE);
        },
        createButtons: function() {
            var divideButton, gambleButton, collectButton, startLadderButton;
            if (ig.ua.mobile) {
                divideButton = new Button(LadderActionIDs.DIVIDE, "RISK_DIVIDE", this.divide);
                gambleButton = new Button(LadderActionIDs.GAMBLE, "LADDER_GAMBLE", this.gamble);
                collectButton = new Button(LadderActionIDs.COLLECT_TRIGGERED, "FINISH_GAME", this.onCollectTriggered);
                startLadderButton = new Button(LadderActionIDs.LAUNCH_LADDER, "RISK_LADDER_CHOICE", this.triggerActivation);
            } else {
                divideButton = new Button(LadderActionIDs.DIVIDE, "button-desktop button-desktop-idle button-desktop-gambleDivide", this.divide, "ButtonCaption_RISK_DIVIDE");
                gambleButton = new Button(LadderActionIDs.GAMBLE, "button-desktop button-desktop-idle button-desktop-gamble", this.gamble, "ButtonCaption_RISK");
                collectButton = new Button(LadderActionIDs.COLLECT_TRIGGERED, "button-desktop button-desktop-idle button-desktop-collect", this.onCollectTriggered, "ButtonCaption_COLLECT");
                startLadderButton = new DesktopLadderChoiceButton(LadderActionIDs.LAUNCH_LADDER, "button-desktop button-desktop-idle button-desktop-gamble-ladder", this.triggerActivation, "ButtonCaption_RISK_LADDER_CHOICE");
            }
            this.riskButton = startLadderButton;
            this.casino.buttonProvider.registerButton(collectButton);
            this.casino.buttonProvider.registerButton(gambleButton, "support");
            this.casino.buttonProvider.registerButton(divideButton);
            this.casino.buttonProvider.registerButton(startLadderButton, "support");
        },
        setResult: function(result) {
            this.lastResponse = result;
            if (typeof result.addOnGameResult !== "undefined") {
                this.lastResult = result.addOnGameResult;
            } else if (typeof result.level !== "undefined") {
                this.lastResult = result;
            } else {
                throw "No valid Result specified!";
            }
            this.evaluateResult();
        },
        evaluateResult: function() {
            this.currentLevel = this.lastResult.level;
            this.winLevel = this.lastResult.winLevel;
            this.lossLevel = this.lastResult.lossLevel;
        },
        isInRange: function(level) {
            return ((level < this.ladderItems.length) && (level > -1));
        },
        highlight: function(level) {
            if (this.isInRange(level)) {
                var li = this.ladderItems[(this.ladderItems.length - 1) - level];
                li.highlight();
            }
        },
        unlight: function(level) {
            if (this.isInRange(level)) {
                var li = this.ladderItems[(this.ladderItems.length - 1) - level];
                li.unlight();
            }
        },
        semiHighlight: function(level) {
            if (this.isInRange(level)) {
                var li = this.ladderItems[this.ladderItems.length - level];
                li.semiHighlight();
            }
        },
        createLadder: function() {
            for (var i = this.TOTAL_STEPS - 1; i >= 0; i--) {
                var li;
                if (i !== this.PLAYOFF_INDEX) {
                    li = new RiskStep(this.LADDER_AMOUNTS[i], i, this.TOTAL_STEPS, this.ladderRoot);
                } else {
                    li = new RiskStepPlayoff(this.LADDER_AMOUNTS[i], i, this.TOTAL_STEPS, this.ladderRoot);
                    this.casino.resourceProvider.registerTranslatableObject(li);
                    this.playOffStep = li;
                }
                if (this.maxWidth < li.getWidth()) {
                    this.maxWidth = li.getWidth();
                }
                this.ladderItems.push(li);
            }
            $("#riskladder-container").css({
                "width": this.maxWidth + "px"
            });
        },
        startPlayOff: function(p_startlevel) {
            var l = this.facade.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_GamblePlayoff");
            this.playOffSoundTimer = new Timer(this.onPlayoffSoundFinished, l);
            this.facade.casino.soundPlayer.playEffect("SFX_GamblePlayoff");
            this.frameCnt = 0;
            this.highlight(p_startlevel);
            this.curPlayoffHighlight = this.PLAYOFF_INDEX + 1;
            this.playOffRange = this.ladderItems.length - (this.PLAYOFF_INDEX + 1);
            this.PLAYOFFALTERNATECOUNT = 0;
            this.isPlayOff = true;
            this.moveTo(12);
        },
        requestInitResult: function() {
            var reqString = this.reqBuilder.createRiskLadderRequest(LadderActionIDs.LAUNCH_LADDER);
            this.casino.networkProvider.send(reqString, this.onResultReceived);
        },
        handleResult: function(result) {
            this.onResultReceived(result);
        },
        onResultReceived: function(result) {
            var gameResult;
            if (typeof result === "string") {
                gameResult = JSON.parse(result);
            } else {
                gameResult = result;
            }
            this.lastResponse = gameResult;
            var newLadderItems = gameResult.addOnGameResult.ladderItems;
            if (newLadderItems === "undefined") {
                newLadderItems = gameResult.addOnGameResult._rawData.ladderItems
            }
            this.updateItemValues(newLadderItems);
            var lr = new RiskLadderResult();
            for (var i = 0; i < this.ladderItems.length; i++) {
                this.unlight(i);
            }
            if (typeof gameResult.addOnGameResult.initialLadderItems !== "undefined" && gameResult.addOnGameResult.initialLadderItems !== null) {
                if (typeof gameResult.addOnGameResult.initialLadderItems[1] !== "undefined" && gameResult.addOnGameResult.initialLadderItems[1] !== null) {
                    var l1 = new RiskLadderResult();
                    if (!l1.fill(gameResult.addOnGameResult.initialLadderItems[0])) {
                        throw "InitialLadderItem 1 is malformed or incorrect";
                    }
                    var l2 = new RiskLadderResult();
                    if (!l2.fill(gameResult.addOnGameResult.initialLadderItems[1])) {
                        throw "InitialLadderItem 0 is malformed or incorrect";
                    }
                    lr.previousLevel = l2.currentLevel;
                    lr.nextLevel = l1.currentLevel;
                    if (ig.ua.mobile) {
                        lr.currentLevel = -1;
                    } else {
                        lr.currentLevel = l1.currentLevel;
                    }
                    this.currentBet = parseInt(gameResult.addOnGameResult.initalWager);
                } else {
                    if (!lr.fill(gameResult.addOnGameResult.initialLadderItems[0])) {
                        throw "InitalLadderItem 0 is malformed or incorrect";
                    }
                    this.currentBet = lr.value;
                }
                this.lastResult = lr;
                this.started = true;
            } else {
                if (!lr.fill(gameResult.addOnGameResult)) {
                    throw "InitalLadderItem 0 is malformed or incorrect";
                }
                this.currentBet = lr.value;
                this.casino.displayProvider.setWinSumDisplayTo(gameResult.uncommittedWinSum);
                this.currentBet = lr.value;
            }
            this.lastResult = lr;
            this.handleLadderResult(lr);
        },
        playStepUp: function() {
            this.casino.soundPlayer.playEffect("SFX_LadderUp");
        },
        playStepDown: function() {
            this.casino.soundPlayer.playEffect("SFX_LadderDown");
        },
        handleLadderResult: function(result) {
            if (this.isPlayOff) {
                this.isPlayOff = false;
            }
            if (result.currentLevel === 0) {
                this.handleLoss(result);
                return;
            } else if (result.currentLevel === this.PLAYOFF_INDEX) {
                this.handlePlayOff(result);
            } else {
                if (!this.isDividing && result.nextLevel !== -1) {
                    if (result.currentLevel >= this.lastLadderLevel) {
                        this.playStepUp();
                    } else {
                        this.playStepDown();
                    }
                }
                this.isDividing = false;
                if (result.nextLevel === -1) {
                    this.handleTop(result);
                } else {
                    this.handleNextStep(result);
                }
            }
            this.lastLadderLevel = result.currentLevel;
            this.updateButtons();
        },
        updateButtons: function() {
            this.facade.sendNotification("UPDATE_BUTTONS");
        },
        getButtonsToShow: function() {
            var resp = this.lastResponse;
            var commands = resp.nextGameActions;
            var ids = [];
            if (!(this.isReadyForInput) || this.isCollecting) {
                return ids;
            }
            for (var i = 0; i < commands.length; i++) {
                var command = commands[i];
                if (command.id === "FINISH_GAME") {
                    ids.push(LadderActionIDs.COLLECT_TRIGGERED);
                }
                if (command.id === "RISK_DIVIDE") {
                    ids.push(LadderActionIDs.DIVIDE);
                }
                if (command.id === "PLAY") {
                    ids.push(LadderActionIDs.GAMBLE);
                }
            };
            return ids;
        },
        handlePlayOff: function(result) {
            this.startPlayOff(this.PLAYOFF_INDEX);
        },
        setNewFireWorkPositon: function(fireWork) {
            var xPos = Math.random() * (ig.system.stageWidth - 402);
            var yPos = Math.random() * (ig.system.stageHeight - 402);
            fireWork.setPosition(Math.floor(xPos), Math.floor(yPos));
        },
        handleTop: function(result) {
            this.started = false;
            this.showFireWork = true;
            this.timeSinceAnimationStart = 0;
            this.moveTo(result.currentLevel);
            this.lastTimeUpdate = ig.system.now();
            $("#riskladder-controls").css("display", "none");
            this.highlight(result.currentLevel);
            this.facade.casino.soundPlayer.stopAmbient();
            if (this.casino.soundPlayer.soundOn) {
                this.fireWorkMaxTime = this.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_GambleTop");
            } else {
                this.fireWorkMaxTime = 10000;
            }
            this.facade.casino.soundPlayer.playEffect("SFX_GambleTop", false);
            this.createFireWork();
            this.createFireWork();
            this.createFireWork();
            $("#riskladder-page").on(ig.touchEvents, this.skipFireWork);
        },
        handleNextStep: function(result) {
            this.highlight(result.currentLevel);
            if (this.isInRange(result.currentLevel)) {
                this.blinkRatio = this.BLINK_FRAME_STEP;
            } else {
                this.blinkRatio = this.BLINK_FRAME_SPLIT;
            }
            if (ig.ua.mobile) {
                this.moveTo(result.nextLevel);
            } else {
                this.moveTo(result.currentLevel);
            }
            this.collectTimerStartTime = ig.system.now();
        },
        stopAutoCollectTimer: function() {
            if (this.collectTimeout !== undefined) {
                clearTimeout(this.collectTimeout);
            }
        },
        handleLoss: function(result) {
            $("#riskladder-controls").css("display", "none");
            this.facade.casino.soundPlayer.stopAmbient();
            this.facade.casino.soundPlayer.playEffect("SFX_GambleLoose", false);
            this.started = false;
            this.casino.displayProvider.setWinSumDisplayTo(0);
            this.highlight(result.currentLevel);
            this.isCollecting = true;
        },
        isTriggeredBy: function(result) {
            if (result.nextGameFlowName === GameRoundPhase.RISK_CHOICE) {
                return true;
            }
            return false;
        },
        getButton: function() {
            return this.riskButton;
        },
        triggerActivation: function() {
            this.facade.sendNotification(LadderActionIDs.LAUNCH_LADDER);
        },
        resume: function() {
            this.updateItemValues(this.facade.lastResponse.addOnGameResult._rawData.ladderItems);
            this.facade.sendNotification("RESUME_RISKLADDER", this.facade.lastResponse);
        },
        moveTo: function(levelId) {
            var middleOfScreen = Math.floor(ig.system.stageHeight / 2),
                currentMiddleLadderItem = this.showFireWork ? this.lastResult.currentLevel : Math.ceil((this.lastResult.previousLevel + this.lastResult.nextLevel) / 2),
                currentMiddleLadderPosition = $(this.ladderItems[(this.ladderItems.length - 1) - currentMiddleLadderItem]._self).offset().top,
                distanceBetweenBothMiddles = middleOfScreen - currentMiddleLadderPosition;
            $(this.ladderRoot).animate({
                "top": "+=" + distanceBetweenBothMiddles + "px"
            }, "slow", this.onMovingFinished);
        },
        onMovingFinished: function() {
            if (this.showFireWork) {
                return;
            }
            if (!this.isPlayOff) {
                this.isCollectable = true;
                this.isReadyForInput = true;
                this.updateButtons();
            }
        },
        onPlayoffSoundFinished: function() {
            if (this.playOffSoundTimer) {
                this.playOffSoundTimer.abort();
            }
            this.isReadyForInput = true;
            this.updateButtons();
        },
        createFireWork: function() {
            var fireWork = new FireWork(Math.floor(Math.random() * 3), Math.ceil(Math.random() * ((ig.system.stageWidth) - 402)), Math.ceil(Math.random() * ((ig.system.stageHeight) - 402)), this.setNewFireWorkPositon);
            this.activeFireWorks.push(fireWork);
            $("#riskladder-page").append(fireWork.get());
        },
        clear: function() {
            this.lastResult = null;
            this.lastLadderLevel = -1;
            this.lastLadderLevelMovedTo = 0;
            this.curPlayoffHighlight = 0;
            this.prevPlayoffHighlight = 0;
            this.prevLadderStep = 0;
            this.nextLadderStep = 0;
            this.isCollecting = false;
            $(this.ladderRoot).css("top", 0);
            for (var i = 0; i < this.ladderItems.length; i++) {
                this.unlight(i);
            }
            for (var j = 0; j < this.activeFireWorks.length; j++) {
                var fw = this.activeFireWorks[j];
                fw.kill();
            }
            this.activeFireWorks.length = 0;
        },
        update: function() {
            this.currTimeUpdate = ig.system.now();
            this.timeSinceAnimationStart += this.currTimeUpdate - this.lastTimeUpdate;
            if (this.isReadyForInput && !this.showFireWork && !this.isPlayOff && ((ig.system.now() - this.collectTimerStartTime) >= this.COLLECTTIMELIMIT && !this.isCollecting)) {
                this.onCollectTriggered();
            }
            this.lastTimeUpdate = this.currTimeUpdate;
            if (this.isCollecting) {
                if (this.timeSinceAnimationStart >= 33) {
                    this.unlight(this.lastResult.previousLevel);
                    this.unlight(this.lastResult.nextLevel);
                    this.highlight(this.lastResult.currentLevel);
                }
                if (this.timeSinceAnimationStart >= 3000 && this.isCollecting) {
                    this.isCollecting = false;
                    this.performCollect();
                    this.idleTimeInMilliseconds = 0;
                }
                return;
            }
            if (this.started) {
                if (this.isPlayOff) {
                    if (this.timeSinceAnimationStart >= this.ALTERNATING_RATIO_PLAYOFF) {
                        this.timeSinceAnimationStart = 0;
                        this.curPlayoffHighlight = (++this.curPlayoffHighlight) % this.playOffRange;
                        this.ladderItems[(this.ladderItems.length - 1) - (this.PLAYOFF_INDEX + 1 + this.prevPlayoffHighlight)].unlight();
                        this.ladderItems[(this.ladderItems.length - 1) - (this.PLAYOFF_INDEX + 1 + this.curPlayoffHighlight)].highlight();
                        this.prevPlayoffHighlight = (this.curPlayoffHighlight + 5) % this.playOffRange;
                        this.PLAYOFFALTERNATECOUNT++;
                        if (this.PLAYOFFALTERNATECOUNT >= this.PLAYOFFLIMIT) {
                            this.isPlayOff = false;
                            this.gamble();
                        }
                    }
                } else {
                    if (this.timeSinceAnimationStart >= this.blinkRatio) {
                        this.timeSinceAnimationStart = 0;
                        if (this._switch) {
                            this.casino.soundPlayer.playEffect("SFX_BlinkDown1");
                            this.highlight(this.lastResult.previousLevel);
                            this.unlight(this.lastResult.nextLevel);
                        } else {
                            this.casino.soundPlayer.playEffect("SFX_BlinkUp1");
                            this.unlight(this.lastResult.previousLevel);
                            this.highlight(this.lastResult.nextLevel);
                        }
                        this._switch = !this._switch;
                    }
                }
            } else if (this.showFireWork) {
                for (var i = 0; i < this.activeFireWorks.length; i++) {
                    this.activeFireWorks[i].update();
                }
                if (this.timeSinceAnimationStart >= this.fireWorkMaxTime) {
                    this.stopFireWork();
                }
            }
        },
        stopFireWork: function() {
            this.showFireWork = false;
            for (var i = 0; i < this.activeFireWorks.length; i++) {
                $(this.activeFireWorks[i].get()).remove();
            }
            this.performCollect();
        },
        skipFireWork: function() {
            this.casino.soundPlayer.stopEffect("SFX_GambleTop");
            this.fireWorkMaxTime = 0;
        },
        pauseGame: function() {
            this.pauseStartedAt = ig.system.now();
            this.pausedTime = 0;
            this.isPaused = true;
            if (this.playOffSoundTimer) {
                this.playOffSoundTimer.pause();
            }
        },
        resumeGame: function() {
            if (!this.isPaused) {
                this.pauseStartedAt = ig.system.now();
            }
            if (this.playOffSoundTimer) {
                this.playOffSoundTimer.resume();
            }
            this.isPaused = false;
            this.pausedTime = ig.system.now() - this.pauseStartedAt;
            this.timeSinceAnimationStart = this.timeSinceAnimationStart - this.pausedTime;
            this.collectTimerStartTime = this.collectTimerStartTime + this.pausedTime;
            this.pausedTime = 0;
        },
        updateItemValues: function(initialLadderItems) {
            if (initialLadderItems === undefined) {
                return;
            }
            if (initialLadderItems.length != this.ladderItems.length) {
                ig.logger.log(Logger.LogLevel.ERROR, "initial ladderItems not matching!");
                return;
            }
            for (var i = 0; i < this.ladderItems.length; i++) {
                if (i !== 6) {
                    this.ladderItems[(this.ladderItems.length - 1) - i].updateValue(initialLadderItems[i].value);
                }
            }
        },
        resize: function() {
            $("#riskladder-container").css("transform", "scale(" + ig.system.stageScale * RLGui.scaleFactor + ")");
            if (this.lastResult === null) {
                return;
            }
            var middleOfScreen = Math.floor(ig.system.stageHeight / 2),
                currentMiddleLadderItem = Math.ceil((this.lastResult.previousLevel + this.lastResult.nextLevel) / 2);
            if (this.showFireWork) {
                currentMiddleLadderItem = this.lastResult.currentLevel;
            }
            if (!currentMiddleLadderItem || currentMiddleLadderItem < 0) {
                currentMiddleLadderItem = 8;
            }
            var currentMiddleLadderPosition = $(this.ladderItems[(this.ladderItems.length - 1) - currentMiddleLadderItem]._self).offset().top,
                distanceBetweenBothMiddles = middleOfScreen - currentMiddleLadderPosition;
            var ladderTop = parseInt($(this.ladderRoot).css("top").replace("px", ""));
            $(this.ladderRoot).css("top", (ladderTop + distanceBetweenBothMiddles) + "px");
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/dtos/cardResult.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.dtos.cardResult").requires("impact.impact").defines(function() {
    CardResult = ig.Class.extend({
        _newCard: null,
        _drawnCards: [],
        _initialWager: 0,
        _currBet: -100,
        _nextBet: -100,
        _peakValue: -1,
        _isWin: false,
        _peakReached: false,
        init: function() {},
        getInitialWager: function() {
            return this._initialWager;
        },
        getDrawnCard: function() {
            return this._newCard;
        },
        getDrawnCards: function() {
            return this._drawnCards;
        },
        isWin: function() {
            return this._isWin;
        },
        curBet: function() {
            return this._currBet;
        },
        nextBet: function() {
            return this._nextBet;
        },
        peak: function() {
            return this._peakValue;
        },
        isPeakReached: function() {
            return this._peakReached;
        },
        fill: function(p_data) {
            if (p_data !== null) {
                if (p_data.drawnCard !== null) {
                    this._newCard = new CardVO();
                    this._newCard.fill(p_data.drawnCard);
                }
                if (p_data.won !== null) {
                    this._isWin = p_data.won;
                }
                if (p_data.nextWagerStep !== null) {
                    this._currBet = parseInt(p_data.nextWagerStep);
                }
                if (p_data.nextWinSum !== null) {
                    this._nextBet = parseInt(p_data.nextWinSum);
                } else {
                    this._nextBet = 2 * this._currBet;
                }
                if (p_data.isPeakBetStep !== null) {
                    this._peakReached = p_data.isPeakBetStep;
                }
                if (p_data.initialWager !== null) {
                    this._initialWager = p_data.initialWager;
                }
                if (p_data.peak !== null) {
                    this._peakValue = p_data.peak;
                } else {
                    this._peakValue = 14000;
                }
                if (p_data.drawnCards !== null) {
                    this._drawnCards = [];
                    for (var i = 0; i < p_data.drawnCards.length; i++) {
                        var card = new CardVO();
                        card.fill(p_data.drawnCards[i]);
                        this._drawnCards.push(card);
                    }
                }
            }
        }
    });
    CardVO = ig.Class.extend({
        _value: 0,
        _color: 0,
        _winCard: false,
        _holded: false,
        _data: null,
        init: function(p_color, p_value) {
            this._color = p_color || 0;
            this._value = p_value || 0;
        },
        fill: function(p_data) {
            this._data = p_data;
            if (p_data !== null) {
                if (p_data.suitId !== null) {
                    this._color = p_data.suitId;
                }
                if (p_data.rankId !== null) {
                    this._value = p_data.rankId;
                }
            }
        },
        getData: function() {
            return this._data;
        },
        isWinCard: function() {
            return this._winCard;
        },
        isHolded: function() {
            return this._holded;
        },
        value: function() {
            return this._value;
        },
        color: function() {
            return this._color;
        }
    });
});



// ../private/de/adp/web/animation/easing/easing.js 
ig.baked = true;
ig.module('de.adp.web.animation.easing.easing').requires('impact.entity').defines(function() {
    LinearEasing = ig.Class.extend({});
    LinearEasing.in = function(curTime, startPos, distance, duration) {
        return distance * curTime / duration + startPos;
    };
    LinearEasing.out = function(curTime, startPos, distance, duration) {
        return distance * curTime / duration + startPos;
    };
    LinearEasing.inAndOut = function(curTime, startPos, distance, duration) {
        return distance * curTime / duration + startPos;
    };
    QuadEasing = ig.Class.extend({});
    QuadEasing.in = function(curTime, startPos, distance, duration) {
        var cd = curTime / duration;
        return distance * (cd) * cd + startPos;
    };
    QuadEasing.out = function(curTime, startPos, distance, duration) {
        var cd = curTime / duration;
        return -distance * (cd) * (cd - 2) + startPos;
    };
    QuadEasing.inAndOut = function(curTime, startPos, distance, duration) {
        var cd = (curTime / (duration / 2));
        if ((cd) < 1) {
            return distance / 2 * cd * cd + startPos;
        }
        return -distance / 2 * ((--cd) * (cd - 2) - 1) + startPos;
    };
    BackEasing = ig.Class.extend({});
    BackEasing.in = function(curTime, startPos, distance, duration) {
        var s = 1.70158;
        var cd = curTime / duration;
        return distance * (cd) * cd * ((s + 1) * cd - s) + startPos;
    };
    BackEasing.out = function(curTime, startPos, distance, duration) {
        var s = 1.70158;
        var cd = curTime / duration - 1;
        return distance * ((cd) * cd * ((s + 1) * cd + s) + 1) + startPos;
    };
    BackEasing.inAndOut = function(curTime, startPos, distance, duration) {
        var s = (1.70158 * 1.525) + 1;
        var cd = (curTime / (duration / 2));
        if ((cd) < 1) {
            return distance / 2 * (cd * cd * s * cd - s) + startPos;
        }
        curTime -= 2;
        return distance / 2 * ((cd) * cd * s * cd + s + 2) + startPos;
    };
});

// ../private/de/adp/web/animation/tween/moveTween.js 
ig.baked = true;
ig.module('de.adp.web.animation.tween.moveTween').requires('impact.entity', 'de.adp.web.animation.easing.easing').defines(function() {
    MoveTween = ig.Class.extend({
        target: null,
        startPos: {
            x: 0,
            y: 0
        },
        endPos: {
            x: 0,
            y: 0
        },
        durationInMilliseconds: 0,
        distance: {
            x: 0,
            y: 0
        },
        curTimeInMilliseconds: 0,
        easing: null,
        callBack: null,
        startTimeInMilliseconds: 0,
        init: function() {
            this.easing = QuadEasing.in;
        },
        setEasing: function(easing) {
            if (easing !== undefined && easing !== null) {
                this.easing = easing;
            }
        },
        start: function(p_target, p_endPos, p_durationInMilliseconds, p_callBack) {
            this.target = p_target;
            this.startPos = {
                x: p_target.pos.x,
                y: p_target.pos.y
            };
            this.endPos = p_endPos;
            this.distance = {
                x: this.endPos.x - this.startPos.x,
                y: this.endPos.y - this.startPos.y
            };
            this.callBack = p_callBack;
            this.durationInMilliseconds = p_durationInMilliseconds;
            this.startTimeInMilliseconds = ig.system.now();
        },
        update: function() {
            var curTime = ig.system.now() - this.startTimeInMilliseconds;
            var newPosX = this.easing(curTime, this.startPos.x, this.distance.x, this.durationInMilliseconds);
            var newPosY = this.easing(curTime, this.startPos.y, this.distance.y, this.durationInMilliseconds);
            this.target.pos.x = newPosX;
            this.target.pos.y = newPosY;
            if (curTime >= this.durationInMilliseconds || this.isEndPointReached(newPosX, newPosY, this.startPos, this.distance)) {
                this.stop();
            }
        },
        isEndPointReached: function(newX, newY, startPos, distance) {
            var xReached = false,
                yReached = false;
            if (Math.abs(this.getMovementDelta(newX, startPos.x)) >= Math.abs(distance.x) || Math.abs(this.getMovementDelta(newX, startPos.x)) >= Math.abs(Math.floor(distance.x * 0.97))) {
                xReached = true;
            }
            if (Math.abs(this.getMovementDelta(newY, startPos.y)) >= Math.abs(distance.y) || Math.abs(this.getMovementDelta(newY, startPos.y)) >= Math.abs(Math.floor(distance.y * 0.97))) {
                yReached = true;
            }
            return xReached && yReached;
        },
        getMovementDelta: function(newPos, oldPos) {
            return newPos - oldPos;
        },
        stop: function() {
            this.target.pos.x = this.endPos.x;
            this.target.pos.y = this.endPos.y;
            this.callBack(this);
        },
        pause: function() {
            this.pauseStartedAt = ig.system.now();
            this.pausedTime = 0;
            this.isPaused = true;
        },
        resume: function() {
            if (!this.isPaused) {
                this.pauseStartedAt = ig.system.now();
            }
            this.isPaused = false;
            this.pausedTime = ig.system.now() - this.pauseStartedAt;
            this.startTimeInMilliseconds = this.startTimeInMilliseconds + this.pausedTime;
            this.pausedTime = 1;
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/elements/canvas/canvasCardFrontface.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.elements.canvas.canvasCardFrontface").requires("impact.node").defines(function() {
    CanvasCardFrontFace = ig.Node.extend({
        _values: [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'],
        _frontFaceSprite: {},
        _width: 180,
        _height: 252,
        _gfxHeight: 369,
        _gfxWidth: 281,
        _scaleY: 1,
        _scaleX: 1,
        _value: 0,
        _color: 0,
        _context: {},
        _canvas: {},
        init: function(value, color, width, height) {
            this._canvas = document.createElement('canvas');
            this._canvas.width = width;
            this._canvas.height = height;
            this._context = this._canvas.getContext('2d');
            this._width = width;
            this._height = height;
            this._scaleX = width / this._gfxWidth;
            this._scaleY = height / this._gfxHeight;
            this._color = color;
            this._value = value;
            this.createColor(this._color);
        },
        createColor: function(color) {
            this._frontFaceSprite = new Image();
            this._frontFaceSprite.onload = this.createValue.bind(this);
            this._frontFaceSprite.onerror = this.onErrorLoadingImage.bind(this);
            switch (color) {
                case 2:
                    this._frontFaceSprite.src = "private/de/adp/web/assets/riskCards/ris_pik.png";
                    break;
                case 1:
                    this._frontFaceSprite.src = "private/de/adp/web/assets/riskCards/ris_herz.png";
                    break;
                case 3:
                    this._frontFaceSprite.src = "private/de/adp/web/assets/riskCards/ris_kreuz.png";
                    break;
                case 0:
                    this._frontFaceSprite.src = "private/de/adp/web/assets/riskCards/ris_karo.png";
                    break;
                default:
            }
        },
        createValue: function() {
            this._context.drawImage(this._frontFaceSprite, ((this._value % 5) * this._gfxWidth), Math.floor(this._value / 5) * this._gfxHeight, this._gfxWidth, this._gfxHeight, 0, 0, Math.floor(this._gfxWidth * this._scaleX), Math.floor(this._gfxHeight * this._scaleY));
        },
        drawValue: function() {},
        draw: function() {},
        update: function() {},
        getView: function() {
            return this._canvas;
        },
        onErrorLoadingImage: function() {
            ig.logger.log(Logger.LogLevel.ERROR, "Error loading Image for Card");
        }
    });
    CanvasCardFrontFace.HeartsFront = "private/de/adp/web/assets/riskCards/ris_herz.png";
    CanvasCardFrontFace.DiamondFront = "private/de/adp/web/assets/riskCards/ris_karo.png";
    CanvasCardFrontFace.ClubsFront = "private/de/adp/web/assets/riskCards/ris_kreuz.png";
    CanvasCardFrontFace.SpadesFront = "private/de/adp/web/assets/riskCards/ris_pik.png";
});

// ../private/de/adp/web/addonGame/riskCards/elements/canvas/canvasCardBackface.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.elements.canvas.canvasCardBackface").requires("impact.node").defines(function() {
    CanvasCardBackFace = ig.Node.extend({
        _gfxHeight: 369,
        _gfxWidth: 281,
        _scaleX: 0,
        _scaleY: 0,
        _backfaceGfx: {},
        _canvas: {},
        _context: {},
        _width: 180,
        _height: 252,
        init: function(width, height) {
            this._width = width || 180;
            this._height = height || 252;
            this._canvas = document.createElement('canvas');
            this._canvas.width = width;
            this._canvas.height = height;
            this._scaleX = width / this._gfxWidth;
            this._scaleY = height / this._gfxHeight;
            this._context = this._canvas.getContext('2d');
            this._backfaceGfx = new Image();
            this._backfaceGfx.src = "private/de/adp/web/assets/riskCards/card_backface.png";
            this._backfaceGfx.onload = this.createBackground.bind(this);
        },
        createBackground: function() {
            this._context.drawImage(this._backfaceGfx, 0, 0, this._gfxWidth, this._gfxHeight, 0, 0, Math.floor(this._gfxWidth * this._scaleX), Math.floor(this._gfxHeight * this._scaleY));
        },
        getView: function() {
            return this._canvas;
        },
        draw: function() {
            if (this._backfaceGfx.loaded === true) {
                this._context.drawImage(this._backfaceGfx, 0, 0, this._gfxWidth, this._gfxHeight, 0, 0, Math.floor(this._gfxWidth * this._scaleX), Math.floor(this._gfxHeight * this._scaleY));
            }
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/elements/canvas/canvasCard.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.elements.canvas.canvasCard").requires("impact.node", "de.adp.web.addonGame.riskCards.elements.canvas.canvasCardFrontface", "de.adp.web.addonGame.riskCards.elements.canvas.canvasCardBackface").defines(function() {
    CanvasCard = ig.Node.extend({
        _state: 'backface',
        _duration: 500,
        _startTime: 0,
        _currTime: 0,
        _animationDuration: 0,
        _progressFactor: 20,
        _progress: 100,
        _cardValue: 0,
        _cardColor: "spades",
        _backface: {},
        _frontFace: {},
        _context: {},
        _width: 0,
        _height: 0,
        _cardCanvas: {},
        _cardContext: {},
        _flipped: false,
        init: function(value, color, width, height) {
            this._cardValue = value;
            this._cardColor = color;
            this._context = ig.system.contextText;
            this._height = height;
            this._width = width;
            this._cardCanvas = document.createElement('canvas');
            this._cardCanvas.width = width;
            this._cardCanvas.height = height;
            this._cardContext = this._cardCanvas.getContext('2d');
            this.createView();
        },
        createView: function() {
            this._frontFace = new CanvasCardFrontFace(this._cardValue, this._cardColor, this._width, this._height);
            this._frontFace.visibility = false;
            this.addChild(this._frontFace);
            this._backface = new CanvasCardBackFace(this._width, this._height);
            this.addChild(this._backface);
        },
        draw: function() {
            this.parent();
            this._cardContext.clearRect(0, 0, this._width, this._height);
            this._cardContext.save();
            switch (this._state) {
                case CanvasCard.IDLE:
                    this._cardContext.drawImage(this._backface.getView(), 0, 0);
                    break;
                case CanvasCard.REVEALED:
                    this._cardContext.drawImage(this._frontFace.getView(), 0, 0);
                    break;
                case CanvasCard.REVEALING:
                    this._cardContext.translate(this._width / 2, 0);
                    this._cardContext.scale(this._progress / 100, 1);
                    this._cardContext.translate(-this._width / 2, 0);
                    if (!this._flipped) {
                        this._cardContext.drawImage(this._backface.getView(), 0, 0, this._width, this._height);
                    } else {
                        this._cardContext.drawImage(this._frontFace.getView(), 0, 0, this._width, this._height);
                    }
                    break;
                default:
            }
            this._cardContext.restore();
            this._context.drawImage(this._cardCanvas, this.pos.x, this.pos.y);
        },
        update: function() {
            switch (this._state) {
                case CanvasCard.IDLE:
                    break;
                case CanvasCard.REVEALED:
                    break;
                case CanvasCard.REVEALING:
                    if (this._progress >= 100 && this._flipped) {
                        this._flipped = false;
                        this._progress = 100;
                        this._state = CanvasCard.REVEALED;
                    } else if (Math.truncate(this._progress / 100, 1) === 0) {
                        this._frontFace.visible = true;
                        this._backface.visible = false;
                        this._flipped = true;
                        this._progressFactor *= -1;
                        this._progress -= this._progressFactor;
                    } else {
                        this._progress -= this._progressFactor;
                    }
                    break;
                default:
            }
        },
        reveal: function() {
            this._startTime = ig.system.now();
            this._state = CanvasCard.REVEALING;
            return this;
        },
        setRevealed: function() {
            this._frontFace.visible = true;
            this._backface.visible = false;
            this._state = CanvasCard.REVEALED;
            return this;
        }
    });
    CanvasCard.IDLE = "backface";
    CanvasCard.REVEALING = "reveal";
    CanvasCard.REVEALED = "revealed";
});

// ../private/de/adp/web/addonGame/riskCards/riskCardGuiCanvas.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.riskCardGuiCanvas").requires("impact.scene", "impact.image", "de.adp.web.gui.elements.button", "de.adp.web.gui.elements.textBox", "de.adp.web.controller.gameActionIDs", "de.adp.web.controller.gameFlow.gameRoundPhase", "de.adp.web.addonGame.riskCards.dtos.cardResult", "de.adp.web.addonGame.riskCards.controller.blackredActionIDs", 'de.adp.web.data.requestBuilder', 'de.adp.web.animation.tween.moveTween', "de.adp.web.addonGame.riskCards.elements.canvas.canvasCard", "de.adp.web.gui.elements.textBox", 'de.adp.web.animation.easing.easing').defines(function() {
    RiskCardGuiCanvas = ig.Scene.extend({
        facade: null,
        casino: null,
        backgroundImage: {},
        drawnCardInitPos: {
            x: 250,
            y: 175
        },
        cardDimension: {
            width: 152,
            height: 207
        },
        GAME_ID: "BLACKRED",
        winHiglight: {},
        COLLECTIMELIMIT: 8000,
        endSoundStartTime: 0,
        endSoundDuration: 3000,
        autoCollectTimerStartTime: 0,
        _unusedCards: null,
        _drawnCardElements: [],
        riskButton: null,
        reqBuilder: null,
        _cardResult: null,
        addedCards: 0,
        newAddedCard: null,
        fireWorkMaxTime: 0,
        activeFireWorks: [],
        pausedTime: 0,
        pauseStartedAt: 0,
        tweens: [],
        curBetTextField: {},
        nextBetTextField: {},
        topBetTextField: {},
        isPaused: false,
        isRoot: true,
        drawnCardInitPos: {
            x: 250,
            y: 175
        },
        cardDimension: {
            width: 152,
            height: 207
        },
        state: "INACTIVE",
        topBetCaptionTF: {},
        nextBetCaptionTF: {},
        curBetCaptionTF: {},
        init: function(p_casino, p_facade) {
            this.scaleFactor = ig.system.originalGameWidth / 920;
            this.bindFunctionsToClass();
            this.reqBuilder = new RequestBuilder();
            this.casino = p_casino;
            this.facade = p_facade;
            this.backgroundImage = new ig.Image("private/de/adp/web/assets/riskCards/ris_back.jpg");
            this.winHiglight = new ig.Image("private/de/adp/web/assets/riskCards/ris_winframe.png");
            this.winHiglight.visiable = false;
            this.winHiglight.pos.x = 611 * this.scaleFactor;
            this.winHiglight.pos.y = 87 * this.scaleFactor;
            this.addChild(this.backgroundImage);
            this.addChild(this.winHiglight);
            this.createButtons();
            this.createTextFields();
        },
        getGameName: function() {
            return "RISK_CARDS";
        },
        isUsingCanvas: function() {
            return true;
        },
        isTriggeredBy: function(result) {
            if (result.nextGameFlowName === GameRoundPhase.RISK_CHOICE) {
                return true;
            }
            return false;
        },
        bindFunctionsToClass: function() {
            this.triggerActivation = this.triggerActivation.bind(this);
            this.chooseBlackCard = this.chooseBlackCard.bind(this);
            this.chooseRedCard = this.chooseRedCard.bind(this);
            this.triggerCollect = this.triggerCollect.bind(this);
            this.performCollect = this.performCollect.bind(this);
            this.handleResult = this.handleResult.bind(this);
            this.divide = this.divide.bind(this);
            this.onMovingFinished = this.onMovingFinished.bind(this);
            this.skipFireWorks = this.skipFireWorks.bind(this);
            this.setNewFireWorkPositon = this.setNewFireWorkPositon.bind(this);
        },
        createButtons: function() {
            var divideButton, gambleRedButton, gambleBlackButton, collectButton, startButton;
            if (ig.ua.mobile) {
                divideButton = new Button(BlackredActionIDs.DIVIDE, "RISK_DIVIDE", this.divide);
                gambleRedButton = new Button(BlackredActionIDs.GAMBLE_ON_RED, "RISK_BLACKRED_RED", this.chooseRedCard);
                gambleBlackButton = new Button(BlackredActionIDs.GAMBLE_ON_BLACK, "RISK_BLACKRED_BLACK", this.chooseBlackCard);
                collectButton = new Button(BlackredActionIDs.COLLECT_TRIGGERED, "FINISH_GAME", this.triggerCollect);
                startButton = new Button(BlackredActionIDs.LAUNCH_BLACKRED, "RISK_BLACKRED_CHOICE", this.triggerActivation);
            } else {
                collectButton = new Button(BlackredActionIDs.COLLECT_TRIGGERED, "button-desktop button-desktop-idle button-desktop-collect", this.triggerCollect, "ButtonCaption_COLLECT");
                divideButton = new Button(BlackredActionIDs.DIVIDE, "button-desktop button-desktop-idle button-desktop-gambleDivide", this.divide, "ButtonCaption_RISK_DIVIDE");
                gambleRedButton = new Button(BlackredActionIDs.GAMBLE_ON_RED, "button-desktop button-desktop-idle button-desktop-gambleRed", this.chooseRedCard, "ButtonCaption_RISK_BLACKRED_RED");
                gambleBlackButton = new Button(BlackredActionIDs.GAMBLE_ON_BLACK, "button-desktop button-desktop-idle button-desktop-gambleBlack", this.chooseBlackCard, "ButtonCaption_RISK_BLACKRED_BLACK");
                startButton = new Button(BlackredActionIDs.LAUNCH_BLACKRED, "button-desktop button-desktop-idle button-desktop-gamble-cards", this.triggerActivation, "ButtonCaption_RISK_BLACKRED_CHOICE");
            }
            this.riskButton = startButton;
            this.casino.buttonProvider.registerButton(collectButton);
            this.casino.buttonProvider.registerButton(gambleRedButton, "support");
            this.casino.buttonProvider.registerButton(gambleBlackButton, "support");
            this.casino.buttonProvider.registerButton(divideButton);
            this.casino.buttonProvider.registerButton(startButton, "support");
        },
        createTextFields: function() {
            this.curBetTextField = new TextBox(620 * this.scaleFactor, 363 * this.scaleFactor, 164 * this.scaleFactor, 41 * this.scaleFactor);
            this.curBetTextField.setTextFormat(35 * this.scaleFactor, "Arial", "bold", "#FF0", "center", "middle");
            this.addChild(this.curBetTextField);
            this.nextBetTextField = new TextBox(621 * this.scaleFactor, 235 * this.scaleFactor, 200 * this.scaleFactor, 49 * this.scaleFactor);
            this.nextBetTextField.setTextFormat(45 * this.scaleFactor, "Arial", "bold", "#FF0", "center", "middle");
            this.addChild(this.nextBetTextField);
            this.topBetTextField = new TextBox(623 * this.scaleFactor, 94 * this.scaleFactor, 236 * this.scaleFactor, 59 * this.scaleFactor);
            this.topBetTextField.setTextFormat(55 * this.scaleFactor, "Arial", "bold", "#FF0", "center", "middle");
            this.addChild(this.topBetTextField);
            this.curBetCaptionTF = new TextBox(615 * this.scaleFactor, 305 * this.scaleFactor, 270 * this.scaleFactor, 50 * this.scaleFactor);
            this.curBetCaptionTF.setTextFormat(20 * this.scaleFactor, "Arial", "bold", "#FFF", "left");
            this.addChild(this.curBetCaptionTF);
            this.nextBetCaptionTF = new TextBox(615 * this.scaleFactor, 175 * this.scaleFactor, 270 * this.scaleFactor, 50 * this.scaleFactor);
            this.nextBetCaptionTF.setTextFormat(20 * this.scaleFactor, "Arial", "bold", "#FFF", "left");
            this.addChild(this.nextBetCaptionTF);
            this.topBetCaptionTF = new TextBox(615 * this.scaleFactor, 35 * this.scaleFactor, 270 * this.scaleFactor, 50 * this.scaleFactor);
            this.topBetCaptionTF.setTextFormat(20 * this.scaleFactor, "Arial", "bold", "#FFF", "left");
            this.addChild(this.topBetCaptionTF);
            this.curBetCaptionTF.useSharperCanvas = this.curBetTextField.useSharperCanvas = this.nextBetCaptionTF.useSharperCanvas = this.nextBetTextField.useSharperCanvas = true;
            this.topBetCaptionTF.useSharperCanvas = this.topBetTextField.useSharperCanvas = true;
            this.casino.resourceProvider.registerTranslatableObject(this);
        },
        translate: function(resProv) {
            this.topBetCaptionTF.setText(resProv.getString("BlackRedPeakCaption"));
            this.nextBetCaptionTF.setText(resProv.getString("BlackRedWinCaption"));
            this.curBetCaptionTF.setText(resProv.getString("BlackRedRiskCaption"));
        },
        activate: function(isResuming) {
            this.state = "INITIALIZING";
            this.lastResponse = this.facade.casino.networkProvider.getLastResponse();
            this.facade.sendNotification("UPDATE_BUTTONS");
            if (!this.initialized) {
                this.backgroundImage.resize(this.scaleFactor);
                this.backgroundImage.width = 920 * this.scaleFactor;
                this.backgroundImage.height = 530 * this.scaleFactor;
                this.winHiglight.resize(this.scaleFactor);
                this.initialized = true;
            }
            this.endSoundDuration = 3000;
            $("#main").addClass('frame-background-riskcards');
            this.facade.gameGui.cleanWinAnimation();
            this.casino.soundPlayer.playAmbient("SFX_Cards_BgLoop");
            this.unlightTop();
            if (!isResuming) {
                this.requestInitResult();
            }
            this.visible = true;
        },
        hide: function() {
            this.visible = false;
            $("#main").removeClass('frame-background-riskcards');
        },
        show: function() {
            $("#main").addClass('frame-background-riskcards');
            this.visible = true;
        },
        draw: function() {
            if (this.visible) {
                this.parent();
            }
        },
        deactivate: function() {
            this.visible = false;
            $("#main").removeClass('frame-background-riskcards');
            for (var i = 0; i < this._drawnCardElements.length; i++) {
                this.removeChild(this._drawnCardElements[i]);
            }
            this.removeChild(this._unusedCards);
            this._drawnCardElements.length = 0;
            this.state = "INACTIVE";
            this.curBetCaptionTF.hide();
            this.curBetTextField.hide();
            this.nextBetCaptionTF.hide();
            this.nextBetTextField.hide();
            this.topBetCaptionTF.hide();
            this.topBetTextField.hide();
            this.facade.gameGui.winAnimation.showAnimation(true);
            this.facade.sendNotification(BlackredActionIDs.END_BLACKRED);
        },
        getButton: function() {
            return this.riskButton;
        },
        triggerActivation: function() {
            this.facade.sendNotification(BlackredActionIDs.LAUNCH_BLACKRED);
        },
        requestInitResult: function() {
            this.state = "REQUESTING_RESULT";
            var reqString = this.reqBuilder.createRiskLadderRequest(BlackredActionIDs.LAUNCH_BLACKRED);
            this.casino.networkProvider.send(reqString, this.handleResult);
        },
        updateCardResult: function(result) {
            if (typeof result === "string") {
                this.lastResult = JSON.parse(result);
            } else {
                this.lastResult = result;
            }
            this._cardResult = new CardResult();
            this._cardResult.fill(this.lastResult.addOnGameResult);
        },
        handleResult: function(result, resuming) {
            this.state = "ANIMATING_CARD";
            this.updateCardResult(result);
            if (resuming == true || this._cardResult.getDrawnCard() === null) {
                this.createDrawnCardStack();
            }
            if (this._cardResult.getDrawnCard() === null) {
                this.handleDivide();
                return;
            }
            if (this._cardResult.isWin()) {
                this.handleStepUp();
            } else {
                this.handleLoss();
            }
            this.resetAutoCollectTimer();
            this.updateButtons();
            this.updateDisplay();
        },
        handleDivide: function() {
            this.resetAutoCollectTimer();
            this.updateDisplay();
            this.state = "WAIT_FOR_INPUT";
            this.updateButtons();
        },
        handleStepUp: function() {
            var newCard = new CanvasCard(this._cardResult.getDrawnCard().value(), this._cardResult.getDrawnCard().color(), this.cardDimension.width * this.scaleFactor, this.cardDimension.height * this.scaleFactor);
            newCard.setPosition((this.drawnCardInitPos.x + this.cardDimension.width + (this.cardDimension.width * 0.2)) * this.scaleFactor, this.drawnCardInitPos.y * this.scaleFactor);
            this.addChild(newCard);
            this.collectTimerStartTime = ig.system.now();
            this.casino.soundPlayer.playEffect("SFX_Cards_Won");
            this.newAddedCard = newCard;
            this.moveCardToDrawn(newCard);
        },
        moveCardToDrawn: function(card) {
            this.animating = true;
            var tween;
            tween = new MoveTween();
            tween.setEasing(LinearEasing.in);
            tween.start(card, {
                x: this.drawnCardInitPos.x * this.scaleFactor,
                y: this.drawnCardInitPos.y * this.scaleFactor
            }, 500, this.onMovingFinished);
            this.tweens.push(tween);
            card.reveal();
        },
        onMovingFinished: function() {
            this.tweens = [];
            this.updateDrawnCardStack();
            this._drawnCardElements.push(this.newAddedCard);
            this.addedCards++;
            this.isAnimatingCard = false;
            if (this._cardResult.isPeakReached()) {
                this.handleTop();
            } else {
                this.state = "WAIT_FOR_INPUT";
                this.updateButtons();
            }
        },
        updateDrawnCardStack: function() {
            var removed = this._drawnCardElements.splice(0, 1);
            this.removeChild(removed[0]);
            for (var i = 0; i < this._drawnCardElements.length; i++) {
                this._drawnCardElements[i].setPosition(this._drawnCardElements[i].pos.x + -40, this._drawnCardElements[i].pos.y);
            }
        },
        handleLoss: function() {
            this.state = "ANIMATING_END";
            var newCard = new CanvasCard(this._cardResult.getDrawnCard().value(), this._cardResult.getDrawnCard().color(), this.cardDimension.width * this.scaleFactor, this.cardDimension.height * this.scaleFactor);
            newCard.setPosition(this._unusedCards.pos.x, this._unusedCards.pos.y);
            this.casino.soundPlayer.stopAmbient();
            this.endSoundDuration = this.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_Card_Lost");
            this.casino.soundPlayer.playEffect("SFX_Card_Lost", false);
            this.endSoundStartTime = ig.system.now();
            this._unusedCards = newCard;
            this.addChild(newCard);
            newCard.reveal();
        },
        handleTop: function() {
            this.state = "ANIMATING_TOP";
            this.casino.soundPlayer.stopAmbient();
            this.casino.soundPlayer.playEffect("SFX_GambleTop", false);
            this.endSoundDuration = this.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_GambleTop");
            this.casino.buttonProvider.hideAllButtons();
            this.fireWorkMaxTime = this.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_GambleTop");
            this.endSoundStartTime = ig.system.now();
            this.topBetTextField.setText(currencyFormatter.getMoneyStringForCanvas(this._cardResult.peak()));
            var scaleFactor = this.topBetTextField.getScaleDownRatio();
            this.curBetTextField.setText(currencyFormatter.getMoneyStringForCanvas(this._cardResult.curBet()));
            this.nextBetTextField.setText(currencyFormatter.getMoneyStringForCanvas(this._cardResult.nextBet()));
            this.curBetTextField.adjustTextSize(scaleFactor);
            this.nextBetTextField.adjustTextSize(scaleFactor);
            this.casino.displayProvider.setWinSumDisplayTo(this._cardResult.peak());
            $('#main').on(ig.touchEvents, this.skipFireWorks)
            this.createFireWork();
            this.createFireWork();
            this.createFireWork();
            this.highlightTop();
        },
        createFireWork: function() {
            var fireWork = new FireWork(Math.floor(Math.random() * 3), Math.ceil(Math.random() * ((ig.system.stageWidth) - 402)), Math.ceil(Math.random() * ((ig.system.stageHeight) - 402)), this.setNewFireWorkPositon);
            this.activeFireWorks.push(fireWork);
            $("#main").append(fireWork.get());
        },
        setNewFireWorkPositon: function(fireWork) {
            var xPos = Math.random() * (ig.system.stageWidth - 402);
            var yPos = Math.random() * (ig.system.stageHeight - 402);
            ig.logger.log(Logger.LogLevel.INFO, "New Firework Position: X= " + xPos + " px || Y= " + yPos + " px");
            fireWork.setPosition(Math.floor(xPos), Math.floor(yPos));
        },
        createDrawnCardStack: function() {
            var len = this._cardResult.getDrawnCards().length;
            for (var i = 0; i < len; i++) {
                var card = new CanvasCard(this._cardResult.getDrawnCards()[i].value(), this._cardResult.getDrawnCards()[i].color(), this.cardDimension.width * this.scaleFactor, this.cardDimension.height * this.scaleFactor);
                this.addChild(card);
                card.setPosition(this.drawnCardInitPos.x * this.scaleFactor + (((len - 1) - i) * -40 * this.scaleFactor), this.drawnCardInitPos.y * this.scaleFactor);
                this._drawnCardElements.push(card);
                card.setRevealed();
                ig.logger.log(Logger.LogLevel.INFO, "Added Card " + i);
            }
            var unused = new CanvasCard(0, 1, this.cardDimension.width * this.scaleFactor, this.cardDimension.height * this.scaleFactor);
            unused.setPosition((this.drawnCardInitPos.x + this.cardDimension.width + (this.cardDimension.width * 0.2)) * this.scaleFactor, this.drawnCardInitPos.y * this.scaleFactor);
            this._unusedCards = unused;
            this.addChild(this._unusedCards);
        },
        updateDisplay: function() {
            var hasNonZeros = this.areAllDecimalDigitsZero(this._cardResult.peak(), this._cardResult.nextBet(), this._cardResult.curBet());
            var textTop = currencyFormatter.getMoneyStringForCanvas(this._cardResult.peak(), hasNonZeros);
            var textNext = currencyFormatter.getMoneyStringForCanvas(this._cardResult.nextBet(), hasNonZeros);
            var textBet = currencyFormatter.getMoneyStringForCanvas(this._cardResult.curBet(), hasNonZeros);
            this.topBetTextField.setText(textTop);
            var scaleFactorTop = this.topBetTextField.getScaleDownRatio();
            this.curBetTextField.setText(textBet);
            var scaleFactorBet = this.curBetTextField.getScaleDownRatio();
            this.nextBetTextField.setText(textNext);
            var scaleFactorNext = this.nextBetTextField.getScaleDownRatio();
            var scaleFactor = Math.min(scaleFactorBet, scaleFactorNext, scaleFactorTop);
            this.curBetTextField.adjustTextSize(scaleFactor);
            this.nextBetTextField.adjustTextSize(scaleFactor);
            this.casino.displayProvider.setWinSumDisplayTo(this._cardResult.curBet());
        },
        areAllDecimalDigitsZero: function(s1, s2, s3) {
            var digits = currencyFormatter.currencyOptions.numberOfFractionDigits;
            var isZero = currencyFormatter.areXLastCharactersZero(s1 + "", digits);
            if (!isZero) {
                return false;
            }
            var isZero = currencyFormatter.areXLastCharactersZero(s2 + "", digits);
            if (!isZero) {
                return false;
            }
            var isZero = currencyFormatter.areXLastCharactersZero(s3 + "", digits);
            if (!isZero) {
                return false;
            }
            return true;
        },
        chooseRedCard: function() {
            this.facade.sendNotification(BlackredActionIDs.GAMBLE_ON_RED);
        },
        chooseBlackCard: function() {
            this.facade.sendNotification(BlackredActionIDs.GAMBLE_ON_BLACK);
        },
        triggerCollect: function() {
            this.facade.sendNotification(BlackredActionIDs.COLLECT_TRIGGERED);
        },
        performCollect: function() {
            this.casino.soundPlayer.stopAmbient();
            var withSound = this._cardResult.isWin();
            this.deactivate();
            this.facade.sendNotification(GameActionIDs.COLLECT, withSound);
        },
        divide: function() {
            this.facade.sendNotification(BlackredActionIDs.DIVIDE);
        },
        resetAutoCollectTimer: function() {
            this.autoCollectTimerStartTime = ig.system.now();
        },
        highlightTop: function() {
            this.winHiglight.visible = true;
        },
        unlightTop: function() {
            this.winHiglight.visible = false;
        },
        updateButtons: function() {
            this.facade.sendNotification("UPDATE_BUTTONS");
        },
        getButtonsToShow: function() {
            var ids = [];
            if (this.state === "WAIT_FOR_INPUT") {
                var resp = this.lastResult;
                var commands = resp.nextGameActions;
                for (var i = 0; i < commands.length; i++) {
                    var command = commands[i];
                    if (command.id === "FINISH_GAME" && this._cardResult.nextBet() > 0) {
                        ids.push(BlackredActionIDs.COLLECT_TRIGGERED);
                    }
                    if (command.id === "RISK_DIVIDE") {
                        ids.push(BlackredActionIDs.DIVIDE);
                    }
                    if (command.id === "RISK_BLACKRED_RED") {
                        ids.push(BlackredActionIDs.GAMBLE_ON_RED);
                    }
                    if (command.id === "RISK_BLACKRED_BLACK") {
                        ids.push(BlackredActionIDs.GAMBLE_ON_BLACK);
                    }
                }
            }
            return ids;
        },
        resume: function(result) {
            this.facade.sendNotification("RESUME_RISKCARDS");
        },
        update: function() {
            this.parent();
            if ((ig.system.now() - this.autoCollectTimerStartTime) >= this.COLLECTIMELIMIT && this.state === "WAIT_FOR_INPUT") {
                this.triggerCollect();
            }
            var passedTime = ig.system.now() - this.endSoundStartTime;
            if (this.state === "ANIMATING_END") {
                if (passedTime >= this.endSoundDuration) {
                    this.performCollect();
                }
            } else if (this.state === "ANIMATING_TOP") {
                for (var i = 0; i < this.activeFireWorks.length; i++) {
                    this.activeFireWorks[i].update();
                }
                if (this.isFireworkOver(passedTime)) {
                    this.endFireWorks();
                }
            }
            if (this.tweens.length > 0) {
                for (var l = 0; l < this.tweens.length; l++) {
                    this.tweens[l].update();
                }
            }
        },
        isFireworkOver: function(passedTime) {
            return (this.casino.soundPlayer.soundOn && passedTime >= this.fireWorkMaxTime) || (!this.casino.soundPlayer.soundOn && passedTime >= this.endSoundDuration)
        },
        endFireWorks: function() {
            for (var j = 0; j < this.activeFireWorks.length; j++) {
                $(this.activeFireWorks[j].get()).remove();
            }
            this.activeFireWorks = [];
            this.performCollect();
        },
        skipFireWorks: function() {
            if (this.state === "ANIMATING_TOP") {
                this.casino.soundPlayer.stopEffect("SFX_GambleTop");
                $('#main').off(ig.touchEvents, this.skipFireWorks);
                if (this.casino.soundPlayer.soundOn) {
                    this.fireWorkMaxTime = 0;
                } else {
                    this.endSoundDuration = 0;
                }
            }
        },
        pauseGame: function() {
            this.pauseStartedAt = ig.system.now();
            this.pausedTime = 0;
            this.isPaused = true;
        },
        resumeGame: function() {
            if (!this.isPaused) {
                this.pauseStartedAt = ig.system.now();
            }
            this.isPaused = false;
            this.pausedTime = ig.system.now() - this.pauseStartedAt;
            this.autoCollectTimerStartTime = this.autoCollectTimerStartTime + this.pausedTime;
            if (this.state === "ANIMATING_END") {
                this.endSoundStartTime = this.endSoundStartTime + this.pausedTime;
            }
            this.pausedTime = 1;
        },
        resize: function() {
            if (this.lastResult === null) {
                return;
            }
        }
    });
});

// ../private/de/adp/web/addonGame/riskLadder/controller/stopRiskLadderCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.controller.stopRiskLadderCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.addonGame.riskLadder.controller.ladderActionIDs").defines(function() {
    StopRiskLadderCommand = GameCommand.extend({
        execute: function() {
            ig.logger.log(Logger.LogLevel.INFO, "Unloading Riskladder game");
            this.facade.removeCommand(LadderActionIDs.GAMBLE);
            this.facade.removeCommand(LadderActionIDs.DIVIDE);
            this.facade.removeCommand(LadderActionIDs.COLLECT_TRIGGERED);
            this.facade.removeCommand(LadderActionIDs.END_LADDER);
            this.facade.setActiveAddonGame(null);
        }
    });
});

// ../private/de/adp/web/addonGame/riskLadder/controller/ladderCollectTriggeredCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.controller.ladderCollectTriggeredCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.data.requestBuilder").defines(function() {
    LadderCollectTriggeredCommand = GameCommand.extend({
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function() {
            this.facade.getActiveAddonGame().isReadyForInput = false;
            this.facade.casino.soundPlayer.stopAllAmbient();
            this.facade.casino.soundPlayer.playEffect("SFX_GambleCollect", false);
            this.facade.getActiveAddonGame().isCollecting = true;
            this.facade.sendNotification("UPDATE_BUTTONS");
        }
    });
});

// ../private/de/adp/web/addonGame/riskLadder/controller/startRiskLadderCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.controller.startRiskLadderCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.addonGame.riskLadder.controller.riskLadderDivideCommand", "de.adp.web.addonGame.riskLadder.controller.riskLadderGambleCommand", "de.adp.web.addonGame.riskLadder.controller.stopRiskLadderCommand", "de.adp.web.addonGame.riskLadder.controller.ladderCollectTriggeredCommand", "de.adp.web.addonGame.riskLadder.controller.ladderActionIDs").defines(function() {
    StartRiskLadderCommand = GameCommand.extend({
        execute: function(notification) {
            this.facade.stopAutoCollectTimer();
            $("#collect").css("display", "none");
            var gambleCommand = new RiskLadderGambleCommand(this.facade);
            var gambleDivide = new RiskLadderDivideCommand(this.facade);
            var gambleEnd = new StopRiskLadderCommand(this.facade);
            var collect = new LadderCollectTriggeredCommand(this.facade);
            this.facade.setActiveAddonGame("LADDER");
            this.facade.registerCommand(LadderActionIDs.GAMBLE, gambleCommand);
            this.facade.registerCommand(LadderActionIDs.DIVIDE, gambleDivide);
            this.facade.registerCommand(LadderActionIDs.COLLECT_TRIGGERED, collect);
            this.facade.registerCommand(LadderActionIDs.END_LADDER, gambleEnd);
            this.facade.getActiveAddonGame().activate();
        }
    });
});


// ../private/de/adp/web/addonGame/riskLadder/controller/resumeRiskLadderCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskLadder.controller.resumeRiskLadderCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.addonGame.riskLadder.controller.ladderActionIDs").defines(function() {
    ResumeRiskLadderCommand = GameCommand.extend({
        execute: function(notification) {
            $("#collect").css("display", "none");
            var gambleCommand = new RiskLadderGambleCommand(this.facade);
            var gambleDivide = new RiskLadderDivideCommand(this.facade);
            var gambleEnd = new StopRiskLadderCommand(this.facade);
            var collect = new LadderCollectTriggeredCommand(this.facade);
            this.facade.setActiveAddonGame("LADDER");
            this.facade.registerCommand(LadderActionIDs.GAMBLE, gambleCommand);
            this.facade.registerCommand(LadderActionIDs.DIVIDE, gambleDivide);
            this.facade.registerCommand(LadderActionIDs.COLLECT_TRIGGERED, collect);
            this.facade.registerCommand(LadderActionIDs.END_LADDER, gambleEnd);
            this.facade.getActiveAddonGame().activate(true);
            this.facade.getActiveAddonGame().onResultReceived(this.facade.lastResponse._rawResponse);
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/controller/blackCardCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.controller.blackCardCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.addonGame.riskCards.controller.blackredActionIDs", "de.adp.web.data.requestBuilder").defines(function() {
    BlackCardCommand = GameCommand.extend({
        init: function(facade) {
            this.execute = this.execute.bind(this);
            this.resultReceived = this.resultReceived.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
            this.reqBuilder = new RequestBuilder();
        },
        execute: function() {
            this.facade.getActiveAddonGame().state = "REQUESTING_RESULT";
            this.facade.getActiveAddonGame().resetAutoCollectTimer();
            this.facade.casino.networkProvider.send(this.reqBuilder.createRiskLadderRequest(BlackredActionIDs.GAMBLE_ON_BLACK), this.resultReceived);
            this.facade.sendNotification("UPDATE_BUTTONS");
        },
        resultReceived: function(result) {
            if (typeof result === "string") {
                result = JSON.parse(result);
            }
            this.facade.getActiveAddonGame().handleResult(result);
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/controller/redCardCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.controller.redCardCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.data.requestBuilder", "de.adp.web.addonGame.riskCards.controller.blackredActionIDs").defines(function() {
    RedCardCommand = GameCommand.extend({
        init: function(facade) {
            this.execute = this.execute.bind(this);
            this.resultReceived = this.resultReceived.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
            this.reqBuilder = new RequestBuilder();
        },
        execute: function() {
            this.facade.getActiveAddonGame().state = "REQUESTING_RESULT";
            this.facade.getActiveAddonGame().resetAutoCollectTimer();
            this.facade.casino.networkProvider.send(this.reqBuilder.createRiskLadderRequest(BlackredActionIDs.GAMBLE_ON_RED), this.resultReceived);
            this.facade.sendNotification("UPDATE_BUTTONS");
        },
        resultReceived: function(result) {
            if (typeof result === "string") {
                result = JSON.parse(result);
            }
            this.facade.getActiveAddonGame().handleResult(result);
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/controller/blackredDivideCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.controller.blackredDivideCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.addonGame.riskCards.controller.blackredActionIDs", "de.adp.web.data.requestBuilder").defines(function() {
    BlackRedDivideCommand = GameCommand.extend({
        reqBuilder: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            this.resultReceived = this.resultReceived.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
            this.reqBuilder = new RequestBuilder();
        },
        execute: function() {
            this.facade.getActiveAddonGame().state = "REQUESTING_RESULT";
            this.facade.getActiveAddonGame().resetAutoCollectTimer();
            this.facade.casino.soundPlayer.playEffect("SFX_Card_Divide");
            this.facade.casino.networkProvider.send(this.reqBuilder.createRiskLadderRequest("RISK_DIVIDE"), this.resultReceived);
            this.facade.sendNotification("UPDATE_BUTTONS");
        },
        resultReceived: function(result) {
            this.facade.getActiveAddonGame().handleResult(result);
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/controller/collectTriggeredCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.controller.collectTriggeredCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.data.requestBuilder").defines(function() {
    CollectTriggeredCommand = GameCommand.extend({
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function() {
            this.facade.getActiveAddonGame().state = "REQUESTING_RESULT";
            this.facade.getActiveAddonGame().resetAutoCollectTimer();
            this.facade.casino.soundPlayer.stopAmbient();
            this.facade.casino.soundPlayer.playEffect("SFX_Cards_Collect", false);
            this.facade.getActiveAddonGame().endSoundDuration = this.facade.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_Cards_Collect");
            this.facade.getActiveAddonGame().state = "ANIMATING_END";
            this.facade.getActiveAddonGame().endSoundStartTime = ig.system.now();
            this.facade.sendNotification("UPDATE_BUTTONS");
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/controller/switchToRiskCardsCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.controller.switchToRiskCardsCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.addonGame.riskCards.controller.blackCardCommand", "de.adp.web.addonGame.riskCards.controller.redCardCommand", "de.adp.web.addonGame.riskCards.controller.blackredDivideCommand", "de.adp.web.addonGame.riskCards.controller.collectTriggeredCommand", "de.adp.web.addonGame.riskCards.controller.blackredActionIDs").defines(function() {
    SwitchToRiskCardsCommand = GameCommand.extend({
        execute: function(notification) {
            this.facade.stopAutoCollectTimer();
            $("#collect").css("display", "none");
            var cardsRed = new RedCardCommand(this.facade);
            var cardsBlack = new BlackCardCommand(this.facade);
            var gambleDivide = new BlackRedDivideCommand(this.facade);
            var gambleEnd = new StopRiskCardsCommand(this.facade);
            var collect = new CollectTriggeredCommand(this.facade);
            this.facade.setActiveAddonGame("BLACKRED");
            this.facade.registerCommand(BlackredActionIDs.GAMBLE_ON_RED, cardsRed);
            this.facade.registerCommand(BlackredActionIDs.GAMBLE_ON_BLACK, cardsBlack);
            this.facade.registerCommand(BlackredActionIDs.DIVIDE, gambleDivide);
            this.facade.registerCommand(BlackredActionIDs.END_BLACKRED, gambleEnd);
            this.facade.registerCommand(BlackredActionIDs.COLLECT_TRIGGERED, collect);
            this.facade.getActiveAddonGame().activate(false);
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/controller/resumeRiskCardsCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.controller.resumeRiskCardsCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.addonGame.riskCards.controller.blackCardCommand", "de.adp.web.addonGame.riskCards.controller.redCardCommand", "de.adp.web.addonGame.riskCards.controller.blackredDivideCommand", "de.adp.web.addonGame.riskCards.controller.collectTriggeredCommand", "de.adp.web.addonGame.riskCards.controller.blackredActionIDs").defines(function() {
    ResumeRiskCardsCommand = GameCommand.extend({
        execute: function(notification) {
            $("#collect").css("display", "none");
            var cardsRed = new RedCardCommand(this.facade);
            var cardsBlack = new BlackCardCommand(this.facade);
            var gambleDivide = new BlackRedDivideCommand(this.facade);
            var gambleEnd = new StopRiskCardsCommand(this.facade);
            var collectTriggered = new CollectTriggeredCommand(this.facade);
            this.facade.setActiveAddonGame("BLACKRED");
            this.facade.registerCommand(BlackredActionIDs.GAMBLE_ON_RED, cardsRed);
            this.facade.registerCommand(BlackredActionIDs.GAMBLE_ON_BLACK, cardsBlack);
            this.facade.registerCommand(BlackredActionIDs.DIVIDE, gambleDivide);
            this.facade.registerCommand(BlackredActionIDs.END_BLACKRED, gambleEnd);
            this.facade.registerCommand(BlackredActionIDs.COLLECT_TRIGGERED, collectTriggered);
            this.facade.getActiveAddonGame().activate(true);
            this.facade.getActiveAddonGame().handleResult(this.facade.lastResponse._rawResponse, true);
        }
    });
});

// ../private/de/adp/web/addonGame/riskCards/controller/stopRiskCardsCommand.js 
ig.baked = true;
ig.module("de.adp.web.addonGame.riskCards.controller.stopRiskCardsCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    StopRiskCardsCommand = GameCommand.extend({
        execute: function() {
            this.facade.setActiveAddonGame(null);
            this.facade.removeCommand(BlackredActionIDs.GAMBLE_ON_RED);
            this.facade.removeCommand(BlackredActionIDs.GAMBLE_ON_BLACK);
            this.facade.removeCommand(BlackredActionIDs.DIVIDE);
            this.facade.removeCommand(BlackredActionIDs.END_BLACKRED);
        }
    });
});

// ../private/de/adp/web/autoplay/controller/proceedAutoPlayCommand.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.controller.proceedAutoPlayCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.controller.gameActionIDs").defines(function() {
    ProceedAutoplayCommand = GameCommand.extend({
        execute: function(notification) {
            var autoPlay = this.facade.autoPlay;
            if (!autoPlay._autoSpinActive || autoPlay.getRemainingRounds() === 0 || autoPlay.checkConditions(this.facade.casino, this.facade)) {
                this.facade.sendNotification(GameActionIDs.STOP_AUTOPLAY);
                this.facade.setCurrentGameRoundPhase(GameRoundPhase.PLACE_BET);
            } else {
                this.facade.sendNotification(GameActionIDs.PLAY, true);
                if (autoPlay._doOneHiddenSpin) {
                    autoPlay._doOneHiddenSpin = false;
                    autoPlay._autoSpinActive = false;
                } else {
                    if (!autoPlay._isInfiniteSpinsActive && this.facade.currentGameMode !== "FREE_GAME") {
                        autoPlay.reduceRemainingRounds();
                    }
                }
            }
        }
    });
});

// ../private/de/adp/web/autoplay/controller/stopAutoPlayCommand.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.controller.stopAutoPlayCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.controller.gameFlow.gameRoundPhase").defines(function() {
    StopAutoplayCommand = GameCommand.extend({
        execute: function(notification) {
            var autoPlay = this.facade.autoPlay;
            autoPlay.stopAutoSpin(true);
            if (autoPlay.isInSingleOptionMode()) {
                $('#autospinSelectorButton').removeClass('button-desktop-autoSpinStop');
                $('#autospinSelectorButton').addClass('button-desktop-autoSpinStart');
            }
            this.facade.sendNotification("UPDATE_BUTTONS");
        }
    });
});

// ../private/de/adp/web/autoplay/controller/pauseAutoPlayCommand.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.controller.pauseAutoPlayCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.controller.gameFlow.gameRoundPhase").defines(function() {
    PauseAutoplayCommand = GameCommand.extend({
        execute: function(notification) {
            var autoPlay = this.facade.autoPlay;
            autoPlay.pauseAutoSpin();
            if (autoPlay.isInSingleOptionMode()) {
                $('#autospinSelectorButton').removeClass('button-desktop-autoSpinStop');
                $('#autospinSelectorButton').addClass('button-desktop-autoSpinStart');
            }
            this.facade.sendNotification("UPDATE_BUTTONS");
        }
    });
});

// ../private/de/adp/web/autoplay/controller/toggleAutoPlayMenuCommand.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.controller.toggleAutoPlayMenuCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.controller.gameFlow.gameRoundPhase").defines(function() {
    ToggleAutoPlayMenuCommand = GameCommand.extend({
        execute: function(notification) {
            var autoPlay = this.facade.autoPlay;
            var selector = autoPlay._autoSpinSelector;
            if (selector._values.length <= 1) {
                this.facade.sendNotification(GameActionIDs.START_AUTOPLAY, this);
                return;
            }
            if (selector.menuVisible) {
                selector.hideAutoplay();
            } else {
                selector.showAutoplay();
            }
        }
    });
});

// ../private/de/adp/web/controller/wager/betChangeCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.wager.betChangeCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.paytable.paytableIDs").defines(function() {
    BetChangeCommand = GameCommand.extend({
        gameGui: null,
        init: function(facade, gameGui) {
            this.parent(facade);
            this.gameGui = gameGui;
        },
        execute: function(notification) {
            var shallShowLines = notification.getBody();
            var totalStake = 0;
            var stakePerLine = 0;
            totalStake = this.facade.getTotalStake();
            stakePerLine = this.facade.getStakePerLine();
            this.facade.casino.displayProvider.updateBetSumDisplay(totalStake);
            this.gameGui.paytable.setStake(stakePerLine, totalStake);
            if (this.facade.lineStepper.isMaximumLines() && this.facade.coinStepper.isMaximumCoin()) {
                $("#maxBetButton").removeClass('button-desktop-idle');
                $("#maxBetButton").addClass('button-desktop-active');
                $('#maxBetButton').addClass('button-desktop-no-hover');
                this.facade.inputHandler.unbindActions([GameActionIDs.RAISE_BET_TO_MAX]);
            } else {
                $("#maxBetButton").removeClass('button-desktop-active');
                $("#maxBetButton").addClass('button-desktop-idle');
                $('#maxBetButton').removeClass('button-desktop-no-hover');
                this.facade.inputHandler.bindActions([GameActionIDs.RAISE_BET_TO_MAX]);
            }
            if (this.isMaxPossibleBetReached()) {
                this.facade.casino.soundPlayer.playEffect("Maxbet_Button");
            }
            this.gameGui.winAnimation.clean();
            this.gameGui.updateLineContainer(this.facade.lineStepper.getActiveLines());
            if (!shallShowLines) {
                this.facade.gameGui.getActiveLineContainer().showAllLines(false, true);
            }
            this.facade.sendNotification(PaytableIDs.NOTIFICATION_UPDATE_PAYTABLE, {
                overwrite: true
            });
            this.facade.casino.onTotalStakeChanged(totalStake);
            this.facade.showRTP();
        },
        isMaxPossibleBetReached: function() {
            if (this.facade.isAMaxRaiseNotFinished) {
                return false;
            } else {
                if ((this.facade.lineStepper.hasSwitchedToMaxValue() && this.facade.coinStepper.isMaximumCoin()) || this.facade.lineStepper.isMaximumLines() && this.facade.coinStepper.hasSwitchedToMaxValue() || this.facade.lineStepper.hasSwitchedToMaxValue() && this.facade.coinStepper.hasSwitchedToMaxValue()) {
                    return true;
                }
                return false;
            }
        }
    });
});

// ../private/de/adp/web/controller/wager/raiseBetToMaxCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.wager.raiseBetToMaxCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    RaiseBetToMaxCommand = GameCommand.extend({
        gameGui: null,
        init: function(facade, gameGui) {
            this.parent(facade);
            this.gameGui = gameGui;
        },
        execute: function(notification) {
            this.facade.isAMaxRaiseNotFinished = true;
            $('#maxBetButton').addClass('button-desktop-no-hover');
            if (!this.facade.casino.maxBetEnabled()) {
                $("#maxBetButton").css("pointer-events", "none");
            }
            this.facade.inputHandler.unbindActions([GameActionIDs.RAISE_BET_TO_MAX]);
            this.facade.lineStepper.setMaximumLines();
            this.facade.isAMaxRaiseNotFinished = false;
            this.facade.coinStepper.setMaximumCoin();
            this.facade.hoverTouchUnstick();
        }
    });
});

// ../private/de/adp/web/controller/wager/raiseBetCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.wager.raiseBetCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    RaiseBetCommand = GameCommand.extend({
        execute: function(notification) {
            this.facade.casino.soundPlayer.playEffect("SFX_RaiseBet");
            this.facade.coinStepper.increaseCoin();
        }
    });
});

// ../private/de/adp/web/controller/wager/raiseLinesCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.wager.raiseLinesCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    RaiseLinesCommand = GameCommand.extend({
        execute: function(notification) {
            this.facade.casino.soundPlayer.playEffect("SFX_RaiseBet");
            this.facade.lineStepper.increaseLines();
        }
    });
});

// ../private/de/adp/web/controller/gameFlow/resumeGameCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.gameFlow.resumeGameCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.dtos.gameResult", 'de.adp.web.controller.gameFlow.gameRoundPhase', 'de.adp.web.controller.gameActionIDs').defines(function() {
    ResumeGameCommand = GameCommand.extend({
        execute: function(p_notification) {
            this.facade.sendNotification('CLOSE_ALL_OPEN_MENUS');
            this.facade.setCurrentGameRoundPhase(GameRoundPhase.ANIMATING_RESPONSE);
            var addonGameToResume;
            var response = p_notification.getBody();
            var result = new GameResult();
            result = response.gameResult;
            if (this.facade.lineStepper.availableLineSets.length > 1) {
                var betPerLine = response._rawResponse.wagers[0].wager;
                var lineCnt = response._rawResponse.wagers.length;
                this.facade.lineStepper.setActiveLines(lineCnt);
                this.facade.coinStepper.setSelectedCoin(betPerLine);
            } else {
                this.facade.coinStepper.setSelectedCoin(response.lastWagerSum);
            }
            this.facade.sendNotification("BET_CHANGED", false);
            this.restoreLastWinSum(response);
            this.facade.gameGui.getActiveLineContainer().showAllLines(false, true);
            this.facade.coinStepper.disable();
            this.facade.lineStepper.disable();
            this.facade.casino.buttonProvider.hideAllButtons();
            this.facade.animationsInProgress = true;
            if (result.freeGameRound > 0) {
                this.facade.sendNotification("UNFINISHED_FREEGAME_DETECTED");
                this.restoreLastWinSumWithoutLastMainGameWin(response);
                if (this.needsToReconstructLastFreegameBeforeReconstructGambleGame(response)) {
                    this.facade.gameGui.directlyFinishResult(result);
                    this.facade.gameGui.switchAppearanceToNormalMode(response, false);
                    this.facade.removeCommand(GameActionIDs.PLAY);
                    this.facade.registerCommand(GameActionIDs.PLAY, new PlayCommand(this.facade));
                    this.facade.currentGameMode = "NORMAL";
                    this.facade.currentGameRoundPhase = GameRoundPhase.RISK_CHOICE;
                    addonGameToResume = this.addonGamesProvider.getAddonGame(response.addOnGameResult._rawData.creatorName);
                    addonGameToResume.resume(response.addOnGameResult);
                    this.restoreLastWinSum(response);
                    return;
                }
                if (this.hasUnfinishedAddOnGame(response)) {
                    this.facade.gameGui.directlyFinishResult(result);
                    addonGameToResume = this.addonGamesProvider.getAddonGame(response.addOnGameResult._rawData.creatorName);
                    addonGameToResume.resume(response.addOnGameResult);
                    return;
                }
                this.restoreLastWinSumWithoutLastMainGameWin(response);
                this.facade.gameGui.onResultReceived(result, true);
            } else {
                if (response.addOnGameResult !== null && response.addOnGameResult !== undefined) {
                    this.facade.gameGui.directlyFinishResult(result);
                    this.facade.currentGameRoundPhase = GameRoundPhase.RISK_CHOICE;
                    addonGameToResume = this.addonGamesProvider.getAddonGame(response.addOnGameResult._rawData.creatorName);
                    addonGameToResume.resume(response.addOnGameResult);
                    return;
                } else {
                    this.restoreLastWinSumWithoutLastMainGameWin(response);
                    this.facade.gameGui.getActiveLineContainer().showAllLines(false, true);
                    this.facade.gameGui.onResultReceived(result, true);
                }
            }
        },
        isInLastFreegameRound: function(result) {
            if (result.freeGameRound === result.freeGamesTotal && result.totalWonFreegames() === 0) {
                return true;
            }
            return false;
        },
        hasUnfinishedAddOnGame: function(response) {
            if (response.addOnGameResult !== null && response.addOnGameResult !== undefined) {
                return true;
            }
            return false;
        },
        needsToReconstructLastFreegameBeforeReconstructGambleGame: function(response) {
            var result = new GameResult();
            result = response.gameResult;
            if (response.addOnGameResult == null) {
                return false;
            }
            if (response.gameResult.freeGameRound <= 0) {
                return false;
            }
            var addOnGameToReconstruct = response.addOnGameResult._rawData.creatorName;
            if (addOnGameToReconstruct === "BLACKRED" || addOnGameToReconstruct === "LADDER") {
                return true;
            }
            return false;
        },
        restoreLastWinSumWithoutLastMainGameWin: function(response) {
            var gameResult = new GameResult();
            gameResult = response.gameResult;
            var intermediateWinSum = response.uncommittedWinSum - gameResult.totalWinAmount();
            this.facade.casino.displayProvider.setWinSumDisplayTo(intermediateWinSum);
        },
        restoreLastWinSum: function(response) {
            this.facade.casino.displayProvider.showWinZone(true);
            var intermediateWinSum = response.uncommittedWinSum;
            this.facade.casino.displayProvider.setWinSumDisplayTo(intermediateWinSum);
        }
    });
});

// ../private/de/adp/web/controller/enableHardwareControlsCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.enableHardwareControlsCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    EnableHardwareControlsCommand = GameCommand.extend({
        execute: function(notification) {
            "use strict";
            this.facade.spaceBarActive = true;
        }
    });
});

// ../private/de/adp/web/controller/disableHardwareControlsCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.disableHardwareControlsCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    DisableHardwareControlsCommand = GameCommand.extend({
        execute: function(notification) {
            "use strict";
            this.facade.spaceBarActive = false;
        }
    });
});

// ../private/de/adp/web/controller/closeGameCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.closeGameCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    CloseGameCommand = GameCommand.extend({
        execute: function() {
            "use strict";
            this.facade.root.closeGame();
        }
    });
});

// ../private/de/adp/web/autoplay/controller/startAutoPlayCommand.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.controller.startAutoPlayCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.controller.gameActionIDs").defines(function() {
    StartAutoplayCommand = GameCommand.extend({
        execute: function(notification) {
            var autoPlay = this.facade.autoPlay;
            if (autoPlay._autoSpinActive) {
                this.facade.sendNotification(GameActionIDs.STOP_AUTOPLAY);
                return;
            }
            if (autoPlay._remainingAutospins < -1 && !autoPlay.isInSingleOptionMode()) {
                return;
            }
            if (autoPlay._remainingAutospins == 0) {
                return;
            }
            if (autoPlay.checkConditionsReady()) {
                for (var i = 0; i < autoPlay._conditions.length; i++) {
                    autoPlay._conditions[i].onAutplayStarted();
                }
                autoPlay._autoSpinActive = true;
                autoPlay.reduceRemainingRounds();
                autoPlay.hide();
                this.facade.casino.soundPlayer.playEffect("SFX_Autoplay_On");
                if (autoPlay.isInSingleOptionMode()) {
                    $('#autospinSelectorButton').removeClass('button-desktop-autospinamount-button');
                    $('#autospinSelectorButton').addClass('button-desktop-autoSpinStop');
                }
                this.facade.hideOpenSelectors();
                this.facade.sendNotification('UPDATE_BUTTONS');
                this.facade.sendNotification(GameActionIDs.PLAY, true);
            }
        }
    });
});

// ../private/de/adp/web/autoplay/controller/increaseAutoplayStepsCommand.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.controller.increaseAutoplayStepsCommand").requires("de.adp.web.controller.gameCommand", "de.adp.web.controller.gameFlow.gameRoundPhase").defines(function() {
    IncreaseAutoplayStepsCommand = GameCommand.extend({
        execute: function(notification) {
            var autoPlay = this.facade.autoPlay;
            if (!autoPlay._autoSpinActive) {
                autoPlay._autoSpinSelector.showAutoplay();
                autoPlay._autoSpinSelector.increaseStep();
            }
        }
    });
});

// ../private/de/adp/web/autoplay/fakeAutoplay.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.fakeAutoplay").requires("impact.impact").defines(function() {
    FakeAutoplay = ig.Class.extend({
        _conditions: [],
        selectedAutoSpinAmount: 0,
        _autoSpinSelector: {},
        _autoPlayContainer: {},
        _remainingAutospins: 0,
        _autoSpinActive: false,
        _isInfiniteSpinsActive: false,
        _facade: null,
        _casino: null,
        _buttons: [],
        autoSpinReady: false,
        _menuIsVisible: false,
        init: function(facade, casino) {
            this._facade = facade;
            this._casino = casino;
            this._autoSpinSelector = {
                update: function() {},
                show: function() {},
                hide: function() {},
                disable: function() {},
                enable: function() {},
                calculateTopMargin: function() {},
                showAutoplay: function() {},
                hideAutoplay: function() {},
                showButton: function() {},
                hideButton: function() {},
                reenableButton: function() {}
            };
            $('#autoSpinSelectorContainer').remove();
        },
        getAutoSpinSelector: function() {
            return this._autoSpinSelector;
        },
        toggleExpertAutoPlay: function(show) {},
        show: function() {},
        hide: function() {},
        onAutospinsChanged: function(autoSpinAmount) {},
        registerAbortCondition: function(condition) {},
        removeAbortCondition: function(condition) {},
        getRemainingRounds: function() {
            return 0;
        },
        reduceRemainingRounds: function() {},
        incrementRemainingRounds: function() {},
        startAutoSpin: function() {},
        stopAutoSpin: function(stoppedByCondition) {},
        resetConditions: function() {},
        checkConditions: function(facade) {
            return false;
        },
        checkConditionsReady: function() {
            return false;
        },
        resizeConditions: function(scaleFactor) {},
        isAutoSpinReady: function() {
            return false;
        },
        setTotalSpinsToGo: function(val) {},
        updateRemainingRoundsOnButton: function() {},
        pauseAutoSpin: function() {},
        resumeAutoSpin: function() {},
        calculateOffset: function() {},
        conditionChanged: function() {},
        showMandatoryExplanation: function() {},
        translate: function(resProv) {},
        hasMandatoryCondition: function() {
            return false;
        },
        isAutoSpinPossible: function() {
            return false;
        }
    });
});

// ../private/de/adp/web/utils/randomGenerator.js 
ig.baked = true;
ig.module("de.adp.web.utils.randomGenerator").requires("impact.impact").defines(function() {
    RandomGenerator = ig.Class.extend({});
    RandomGenerator.getUniqueIntegerArray = function(amount, minValue, maxValue) {
        var integers = [];
        for (var i = 0; i < amount; i++) {
            var rnd = Math.round(Math.random() * maxValue);
            if (rnd < minValue) {
                rnd += minValue;
            }
            while (integers.indexOf(rnd) >= 0) {
                rnd = Math.round(Math.random() * maxValue);
                if (rnd < minValue) {
                    rnd += minValue;
                }
            }
            integers.push(rnd);
        }
        return integers;
    };
    RandomGenerator.getRandomInt = function(minValue, maxValue) {
        var rand = Math.round(Math.random() * maxValue);
        if (rand < minValue) {
            rand += minValue;
        }
        return rand;
    };
});

// ../private/de/adp/web/gui/settings/desktop/selector.js 
ig.baked = true;
ig.module("de.adp.web.gui.settings.desktop.selector").requires("impact.impact").defines(function() {
    Selector = ig.Class.extend({
        _id: "selector",
        _elementsContainer: null,
        _maxElementsPerColumn: 4,
        _parentDiv: "",
        _chosenCallback: null,
        _values: [],
        _elements: [],
        _selectedElement: null,
        _isVisible: true,
        init: function(id, parentDiv, selectedCallback) {
            this._values = [];
            this._id = id;
            this._parentDiv = parentDiv;
            this._chosenCallback = selectedCallback;
            this.onElementChosen = this.onElementChosen.bind(this);
        },
        translate: function() {},
        setValues: function(values) {
            if (Array.isArray(values)) {
                this._values = values;
            }
            this.createElements();
        },
        createElements: function() {
            for (var i = 0; i < this._values.length; i++) {
                var value = this._values[i];
                var el = $("<div id='btn_'" + value + "'_'><p>" + value + "</p></div>");
                el.on(ig.touchEvents, this.onElementChosen);
                this._elements.push(el);
                $(this._parentDiv).append(el);
            }
        },
        onElementChosen: function(evt) {
            UITracker.track("click", evt.target);
            $(this._selectedElement).removeClass(".selection_Highlight");
            this._selectedElement = evt.target;
            $(evt.target).addClass(".selection_Highlight");
            if (typeof this._chosenCallback === "function") {
                this._chosenCallback();
            }
        },
        findElementWithValue: function(value) {
            var idx = this._values.indexOf(value);
            if (idx !== -1) {
                return this._elements[idx];
            }
            return null;
        }
    });
    SelectorElementWidths = ig.Class.extend({});
    SelectorElementWidths.OneColumn = {
        'elementClass': 'selector-one-column',
        'containerClass': 'container-one-column'
    };
    SelectorElementWidths.TwoColumn = {
        'elementClass': 'selector-two-column',
        'containerClass': 'container-two-column'
    };
    SelectorElementWidths.ThreeColumn = {
        'elementClass': 'selector-three-column',
        'containerClass': 'container-three-column'
    };
    SelectorElementWidths.FourColumn = {
        'elementClass': 'selector-four-column',
        'containerClass': 'container-four-column'
    };
    SelectorElementWidths.FiveColumn = {
        'elementClass': 'selector-five-column',
        'containerClass': 'container-five-column'
    };
});

// ../private/de/adp/web/gui/settings/desktop/coinSelector.js 
ig.baked = true;
ig.module('de.adp.web.gui.settings.desktop.coinSelector').requires('de.adp.web.gui.settings.desktop.selector', "de.adp.web.base.baseValues").defines(function() {
    CoinSelector = Selector.extend({
        _elementStyle: null,
        activeCoinValue: 0,
        betPerLineLocale: "bet_per_line",
        betCaptionPerLine: "",
        betCaption: "",
        previousCoinValue: 0,
        cutOffDecimals: false,
        init: function(id, parentDiv, selectedCallback) {
            this.onElementChosen = this.onElementChosen.bind(this);
            this.show = this.show.bind(this);
            this.hide = this.hide.bind(this);
            this.parent(id, parentDiv, selectedCallback);
            this._elementsContainer = $("<div id='coinWrapper'></div>");
            $(this._parentDiv).prepend(this._elementsContainer);
        },
        setCoins: function(values) {
            if (Array.isArray(values)) {
                this._values = values;
            }
            this.createElements();
        },
        setSelectedCoin: function(coinValue) {
            var idx = this._values.indexOf(coinValue);
            var totalLength = this._elements.length - 1;
            if (idx !== -1) {
                this._elements[totalLength - idx].trigger(ig.touchEvents);
            }
        },
        setMaximumCoin: function() {
            this._elements[0].trigger(ig.touchEvents);
        },
        increaseCoin: function() {
            var button = this.findElementWithValue(this.activeCoinValue);
            var idx = this._elements.indexOf(button) - 1;
            if (idx < 0) {
                idx = this._elements.length - 1;
            }
            this._elements[idx].trigger(ig.touchEvents);
        },
        findElementWithValue: function(value) {
            var idx = this._values.indexOf(value);
            if (idx !== -1) {
                return this._elements[this._elements.length - (idx + 1)];
            }
            return null;
        },
        areAllFractionsZero: function() {
            var digits = currencyFormatter.currencyOptions.numberOfFractionDigits;
            for (var i = this._values.length - 1; i >= 0; i--) {
                var value = this._values[i];
                var isZero = currencyFormatter.areXLastCharactersZero(value + "", digits);
                if (!isZero) {
                    return false;
                }
            }
            return true;
        },
        createElements: function() {
            this.cutOffDecimals = this.areAllFractionsZero();
            for (var i = this._values.length - 1; i >= 0; i--) {
                var value = this._values[i];
                var el;
                var moneyString = this.formatMoneyString(value);
                el = $("<div id='btn_" + value + "' amount='" + value + "' class='selector-element button-desktop-black button-desktop-idle' ><p>" + moneyString + "</p></div>");
                $(el).css('width', BaseValues.DesktopButtonWidthScaled + "px");
                $(el).css('height', BaseValues.DesktopButtonHeightScaled + "px");
                $(el).on(ig.touchEvents, this.onElementChosen);
                this._elements.push(el);
                $(this._elementsContainer).append(el);
            }
            this.hide();
            var coinCount = this._elements.length;
            switch (coinCount) {
                case 0:
                    this.activeCoinValue = 0;
                    break;
                case 1:
                    this.activeCoinValue = this._values[0];
                    this._selectedElement = this._elements[0];
                    break;
                default:
                    this.activeCoinValue = this._values[1];
                    this._selectedElement = this._elements[this._elements.length - 2];
            }
            this.setCaptionForMainButton();
            var elCount = Math.ceil(this._values.length / this._maxElementsPerColumn);
            var width = $(this._elements[this._values.length - 1]).outerWidth() * elCount + ((elCount + 1) * 7);
            $(this._elementsContainer).css('width', width + "px");
            $(this._elementsContainer).addClass('container');
            this.calculateTopMargin();
            $(this._selectedElement).removeClass("button-desktop-idle");
            $(this._selectedElement).addClass("button-desktop-active");
        },
        onElementChosen: function(evt) {
            this.previousCoinValue = this.activeCoinValue;
            this.activeCoinValue = parseInt($(evt.currentTarget).attr('amount'));
            if (this._selectedElement) {
                $(this._selectedElement).removeClass("button-desktop-active");
                $(this._selectedElement).addClass("button-desktop-idle");
            }
            $(evt.currentTarget).removeClass("button-desktop-idle");
            $(evt.currentTarget).addClass("button-desktop-active");
            this.setCaptionForMainButton();
            this._selectedElement = evt.currentTarget;
            if (typeof this._chosenCallback === "function") {
                this._chosenCallback();
                this.hide();
            }
        },
        translate: function(resProv) {
            if (resProv) {
                this.betCaptionPerLine = resProv.getString(this.betPerLineLocale).toUpperCase();
                this.betCaption = resProv.getString("bet").toUpperCase();
                this.setCaptionForMainButton();
                this.onDisplay();
            }
        },
        formatMoneyString: function(amount) {
            var moneyString = currencyFormatter.getMoneyString(amount, this.cutOffDecimals);
            var currency = currencyFormatter.casino.resourceProvider.getCurrencyOptions().currencySymbol;
            if (currency !== "") {
                if (currencyFormatter.casino.resourceProvider.getCurrencyOptions().printedBefore) {
                    moneyString = moneyString.replace(currency + " ", currency + "<br>");
                } else {
                    moneyString = moneyString.replace(" " + currency, "<br>" + currency);
                }
            }
            return moneyString;
        },
        setCaptionForMainButton: function() {
            var moneyString = this.formatMoneyString(this.activeCoinValue);
            if (this.lineSelectionPossible) {
                $("#selectedBetAmount").html(moneyString);
                $("#perLine").html(this.betCaptionPerLine);
                $("#perLine").css("display", "block");
            } else {
                $("#selectedBetAmount").html(moneyString);
                $("#perLine").css("display", "none");
            }
            $("#selectedBetAmount").css("font-size", BaseValues.DesktopButtonFontSize);
            ig.system.fitTextInto($("#selectedBetAmount"));
            var availableWidth = BaseValues.DesktopButtonWidthScaled * 0.85;
            ig.system.fitTextIntoWidth($("#selectedBetAmount"), availableWidth);
            var fs = BaseValues.DesktopButtonFontSize;
            $("#selectedBetAmount").css("line-height", fs + "px");
        },
        disableUnaffordableCoins: function(depotValue) {
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                if (parseInt($(element).attr('amount') > depotValue)) {
                    $(element).css('opacity', '0.4');
                    $(element).off(ig.touchEvents, this.onElementChosen);
                } else {
                    $(element).css('opacity', '1');
                }
            }
        },
        show: function() {
            if (this._isVisible) {
                return;
            }
            this._isVisible = true;
            $(".selector-dark-background").css("display", "block");
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            $(".selector-dark-background").css("z-index", "8");
            $(this._elementsContainer).css("display", "");
            $("#coinSelectorButton").off(ig.touchEvents, this.show);
            $("#coinSelectorButton").on(ig.touchEvents, this.hide);
            this.onDisplay();
            this.calculateTopMargin();
        },
        hide: function() {
            if (!this._isVisible) {
                return;
            }
            this._isVisible = false;
            $(".selector-dark-background").css("display", "none");
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            $(this._elementsContainer).css("display", "none");
            $("#coinSelectorButton").off(ig.touchEvents, this.hide);
            $("#coinSelectorButton").on(ig.touchEvents, this.show);
        },
        disable: function() {
            $("#coinSelectorButton").off(ig.touchEvents, this.show);
            $("#coinSelectorButton").css("opacity", "0.75");
            $("#coinSelectorButton").removeClass("desktopGameButtonHover");
            $("#coinSelectorButton").addClass("button-desktop-bet-button-black");
            $("#coinSelectorButton").removeClass("button-desktop-bet-button");
            $("#coinSelectorButton").css("pointer-events", "none");
        },
        enable: function() {
            $("#coinSelectorButton").on(ig.touchEvents, this.show);
            $("#coinSelectorButton").css("opacity", "1");
            $("#coinSelectorButton").addClass("desktopGameButtonHover");
            $("#coinSelectorButton").removeClass("button-desktop-bet-button-black");
            $("#coinSelectorButton").addClass("button-desktop-bet-button");
            $("#coinSelectorButton").css("pointer-events", "auto");
        },
        update: function() {
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                $(element).css('width', BaseValues.DesktopButtonWidthScaled);
                $(element).css('height', BaseValues.DesktopButtonHeightScaled);
            }
            var elCount = Math.ceil(this._values.length / this._maxElementsPerColumn);
            var width = $(this._elements[this._values.length - 1]).outerWidth() * elCount + ((elCount + 1) * 7);
            $(this._elementsContainer).css('width', width + "px");
            this.setCaptionForMainButton();
            this.calculateTopMargin();
        },
        calculateTopMargin: function() {
            var buttonOffset = $('#coinSelectorButton').offset();
            var offsetLeft = buttonOffset.left - parseInt($(this._elements[0]).css('margin-left'));
            var offsetTop = buttonOffset.top - $(this._elementsContainer).height();
            $(this._elementsContainer).css('top', offsetTop - 7);
            $(this._elementsContainer).css('left', offsetLeft);
        },
        setLineSelectionPossibleTo: function(value) {
            if (this.lineSelectionPossible !== value) {
                this.lineSelectionPossible = value;
            }
        },
        getSelectedCoin: function() {
            return this.activeCoinValue;
        },
        isMaximumCoin: function() {
            return this.getBiggestCoinValue() === this.activeCoinValue;
        },
        getBiggestCoinValue: function() {
            return this._values[this._values.length - 1];
        },
        getSmallestCoinValue: function() {
            return this._values[0];
        },
        onDisplay: function() {
            var initialSize = BaseValues.DesktopButtonFontSize;
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                $(element).css("font-size", initialSize + "px");
            }
            var downScaleRatio = this.calculateRequiredDownscaleRatio();
            if (downScaleRatio >= 1) {
                return;
            }
            var desiredSize = initialSize * downScaleRatio;
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                $(element).css("font-size", desiredSize + "px");
            }
            this.setCaptionForMainButton();
        },
        calculateRequiredDownscaleRatio: function() {
            var downScaleRatio = 1;
            var availableWidth = BaseValues.DesktopButtonWidthScaled * 0.85;
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                var misMatchRatio = SpaceFiller.getRequiredDownScaleRatio(element, availableWidth);
                if (misMatchRatio < downScaleRatio) {
                    downScaleRatio = misMatchRatio;
                }
            }
            return downScaleRatio;
        },
        resize: function() {
            var desiredSize = BaseValues.DesktopButtonFontSize;
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                $(element).css("font-size", desiredSize + "px");
            }
            this.onDisplay();
        },
        hasSwitchedToMaxValue: function() {
            return (this.previousCoinValue !== this.activeCoinValue) && this.isMaximumCoin();
        }
    });
});

// ../private/de/adp/web/gui/settings/desktop/lineSelector.js 
ig.baked = true;
ig.module('de.adp.web.gui.settings.desktop.lineSelector').requires('de.adp.web.gui.settings.desktop.selector', "de.adp.web.base.baseValues").defines(function() {
    LineSelector = Selector.extend({
        _activeLines: 0,
        _elementsContainer: null,
        availableLineSets: null,
        lineCaptionSingle: "",
        lineCaptionMulti: "",
        _previousLines: 0,
        init: function(id, parentDiv, selectedCallback) {
            this.onElementChosen = this.onElementChosen.bind(this);
            this.show = this.show.bind(this);
            this.hide = this.hide.bind(this);
            this.parent(id, parentDiv, selectedCallback);
            this._elementsContainer = $("<div id='lineWrapper'></div>");
            $(this._parentDiv).prepend(this._elementsContainer);
            $("#lineSelectorButton").on(ig.touchEvents, this.show);
        },
        getActiveLines: function() {
            return this._activeLines;
        },
        setMaximumLines: function() {
            this._elements[0].trigger(ig.touchEvents);
        },
        increaseLines: function() {
            var button = this.findElementWithValue(this._activeLines);
            var idx = this._elements.indexOf(button) - 1;
            if (idx < 0) {
                idx = this._elements.length - 1;
            }
            this._elements[idx].trigger(ig.touchEvents);
        },
        findElementWithValue: function(value) {
            var idx = this._values.indexOf(value);
            if (idx !== -1) {
                return this._elements[this._elements.length - (idx + 1)];
            }
            return null;
        },
        setActiveLines: function(lineCnt) {
            var idx = this._values.indexOf(lineCnt);
            if (idx !== -1) {
                var idx = (this._elements.length - 1) - idx;
                this._elements[idx].trigger(ig.touchEvents);
            }
        },
        setLines: function(values) {
            this.availableLineSets = values;
            var l = values.length;
            ig.logger.log(Logger.LogLevel.INFO, "setting " + l + "Lines");
            for (var i = 0; i < l; i++) {
                this._values.push(values[i].wagerPositionIds.length);
            }
            this.createElements();
        },
        createElements: function() {
            for (var i = this._values.length - 1; i >= 0; i--) {
                var value = this._values[i];
                var el = $("<div id='btn_" + value + "' amount='" + value + "' class='selector-element button-desktop-black button-desktop-idle' ><p>" + value + "</p></div>");
                $(el).css('width', BaseValues.DesktopButtonWidthScaled + "px");
                $(el).css('height', BaseValues.DesktopButtonHeightScaled + "px");
                el.on(ig.touchEvents, this.onElementChosen);
                this._elements.push(el);
                $(this._elementsContainer).append(el);
            }
            this.hide();
            this._activeLines = this._values[this._values.length - 1];
            this._selectedElement = this._elements[0];
            if (this._activeLines > 1) {
                $("#selectedLineAmount").html(this._activeLines);
            } else {
                $("#selectedLineAmount").html(this._activeLines);
            }
            var elCount = Math.ceil(this._values.length / this._maxElementsPerColumn);
            var width = $(this._elements[0]).outerWidth() * elCount + ((elCount + 1) * 7);
            $(this._elementsContainer).css('width', width + "px");
            $(this._elementsContainer).addClass('container');
            this.calculateTopMargin();
            $(this._selectedElement).addClass("button-desktop-active");
        },
        onElementChosen: function(evt) {
            this._previousLines = this._activeLines;
            this._activeLines = parseInt($(evt.currentTarget).attr('amount'));
            if (this._selectedElement) {
                $(this._selectedElement).removeClass("button-desktop-active");
                $(this._selectedElement).addClass("button-desktop-idle");
            }
            $(evt.currentTarget).removeClass("button-desktop-idle");
            $(evt.currentTarget).addClass("button-desktop-active");
            if (this._activeLines > 1) {
                $("#selectedLineAmount").html(this._activeLines);
            } else {
                $("#selectedLineAmount").html(this._activeLines);
            }
            $("#selectedLineAmount").css("font-size", $('#stake-meter').css('font-size'));
            ig.system.fitTextInto($("#selectedLineAmount"));
            ig.system.fitTextIntoWidth($("#selectedLineAmount"));
            this._selectedElement = $(evt.currentTarget);
            if (typeof this._chosenCallback === "function") {
                this._chosenCallback();
                this.hide();
            }
        },
        translate: function(resProv) {
            this.lineCaptionSingle = resProv.getString("LINE").toUpperCase();
            this.lineCaptionMulti = resProv.getString("LINES").toUpperCase();
        },
        disableUnaffordableLines: function(depotValueSplitByCoinValue) {
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                if ($(element).attr('amount') > depotValueSplitByCoinValue) {
                    $(element).css('opacity', '0.4');
                    $(element).off(ig.touchEvents, this.onElementChosen);
                } else {
                    $(element).css('opacity', '1');
                }
            }
        },
        show: function() {
            if (this._isVisible) {
                return;
            }
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            this._isVisible = true;
            $(".selector-dark-background").css("display", "block");
            $(".selector-dark-background").css("z-index", "8");
            $(this._elementsContainer).css("display", "");
            $("#lineSelectorButton").removeClass('button-desktop-black');
            $("#lineSelectorButton").addClass('button-desktop-red');
            $("#lineSelectorButton").off(ig.touchEvents, this.show);
            $("#lineSelectorButton").on(ig.touchEvents, this.hide);
        },
        hide: function() {
            if (!this._isVisible) {
                return;
            }
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            this._isVisible = false;
            $(".selector-dark-background").css("display", "none");
            $(this._elementsContainer).css("display", "none");
            $("#lineSelectorButton").removeClass('button-desktop-red');
            $("#lineSelectorButton").addClass('button-desktop-black');
            $("#lineSelectorButton").off(ig.touchEvents, this.hide);
            $("#lineSelectorButton").on(ig.touchEvents, this.show);
        },
        disable: function() {
            $("#lineSelectorButton").off(ig.touchEvents, this.show);
            $("#lineSelectorButton").removeClass('button-desktop-black');
            $("#lineSelectorButton").addClass('button-desktop-red');
            $("#lineSelectorButton").css("opacity", "0.75");
            $("#lineSelectorButton").css("pointer-events", "none");
            $("#lineSelectorButton").removeClass("desktopGameButtonHover");
        },
        enable: function() {
            $("#lineSelectorButton").removeClass('button-desktop-red');
            $("#lineSelectorButton").addClass('button-desktop-black');
            $("#lineSelectorButton").on(ig.touchEvents, this.show);
            $("#lineSelectorButton").css("opacity", "1");
            $("#lineSelectorButton").css("pointer-events", "auto");
            $("#lineSelectorButton").addClass("desktopGameButtonHover");
        },
        update: function() {
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                $(element).css('width', BaseValues.DesktopButtonWidthScaled);
                $(element).css('height', BaseValues.DesktopButtonHeightScaled);
            }
            var elCount = Math.ceil(this._values.length / this._maxElementsPerColumn);
            var width = $(this._elements[this._values.length - 1]).outerWidth() * elCount + ((elCount + 1) * 7);
            $(this._elementsContainer).css('width', width + "px");
            $("#selectedLineAmount").css("font-size", $('#stake-meter').css('font-size'));
            ig.system.fitTextInto($("#selectedLineAmount"));
            ig.system.fitTextIntoWidth($("#selectedLineAmount"));
            this.calculateTopMargin();
        },
        calculateTopMargin: function() {
            var buttonOffset = $('#lineSelectorButton').offset();
            var offsetLeft = buttonOffset.left - parseInt($(this._elements[0]).css('margin-left'));
            var offsetTop = buttonOffset.top - $(this._elementsContainer).height();
            $(this._elementsContainer).css('top', offsetTop - 7);
            $(this._elementsContainer).css('left', offsetLeft);
        },
        isMaximumLines: function() {
            return this._activeLines === this._values[this._values.length - 1];
        },
        hasSwitchedToMaxValue: function() {
            return (this._previousLines !== this._activeLines) && this.isMaximumLines();
        }
    });
});

// ../private/de/adp/web/gui/settings/desktop/autoSpinSelector.js 
ig.baked = true;
ig.module("de.adp.web.gui.settings.desktop.autoSpinSelector").requires("de.adp.web.gui.settings.desktop.selector", "de.adp.web.controller.gameActionIDs", "de.adp.web.base.baseValues").defines(function() {
    AutoSpinSelector = Selector.extend({
        activeAutoSpinCount: 0,
        autoSpinCaption: "",
        initalFontSize: 0,
        showCallback: {},
        showExpertAutoplay: {},
        hideExpertAutoplay: {},
        enabled: true,
        visible: true,
        menuVisible: false,
        init: function(id, parentDiv, selectedCallback, hideExpertAutoplay, showExpertAutoplay) {
            this.onElementChosen = this.onElementChosen.bind(this);
            this.sendToggleNotification = this.sendToggleNotification.bind(this);
            this.showAutoplay = this.showAutoplay.bind(this);
            this.hideAutoplay = this.hideAutoplay.bind(this);
            this.parent(id, parentDiv, selectedCallback);
            this.showExpertAutoplay = showExpertAutoplay;
            this.hideExpertAutoplay = hideExpertAutoplay;
            this._elementsContainer = $("<div id='autoSpinWrapper'><div style='width:100%;text-align: center;font-size: 3em' id='autospin-caption'>AUTOSTARTS</div></div>");
            $(this._parentDiv).prepend(this._elementsContainer);
            $("#autospinSelectorButton").on(ig.touchEvents, this.sendToggleNotification);
        },
        sendToggleNotification: function() {
            ig.game.facade.sendNotification(GameActionIDs.TOGGLE_AUTOPLAY_MENU, this);
        },
        setValues: function(pvalues, startValue) {
            if (Array.isArray(pvalues)) {
                var nValues = [0];
                var values = this.parseStringArrayToIntArray(pvalues);
                this._values = values;
            }
            this.createElements();
            this.updateOnValue(parseInt(startValue));
        },
        increaseStep: function() {
            var button = this.findElementWithValue(this.activeAutoSpinCount);
            var idx = this._elements.indexOf(button) - 1;
            if (idx < 0) {
                idx = this._elements.length - 1;
            }
            this._elements[idx].trigger(ig.touchEvents);
        },
        findElementWithValue: function(value) {
            var idx = this._values.indexOf(value);
            if (idx !== -1) {
                return this._elements[this._elements.length - (idx + 1)];
            }
            return null;
        },
        findElementWithValue: function(value) {
            var idx = this._values.indexOf(value);
            if (idx !== -1) {
                return this._elements[this._elements.length - (idx + 1)];
            }
            return null;
        },
        parseStringArrayToIntArray: function(strings) {
            var integers = [];
            for (var i = 0; i <= strings.length - 1; i++) {
                integers.push(parseInt(strings[i], 10));
            }
            return integers;
        },
        createElements: function() {
            for (var i = this._values.length - 1; i >= 0; i--) {
                var value = parseInt(this._values[i]);
                var el;
                if (value === -1) {
                    el = $("<div id='btn_" + value + "' amount='" + value + "' class='selector-element button-desktop-black button-desktop-idle'><p style='font-size: 3em;line-height: 0px'>&infin;</p></div>");
                } else {
                    el = $("<div id='btn_" + value + "' amount='" + value + "' class='selector-element button-desktop-black button-desktop-idle'><p>" +
                        value + "</p></div>");
                }
                $(el).css('width', BaseValues.DesktopButtonWidthScaled + "px");
                $(el).css('height', BaseValues.DesktopButtonHeightScaled + "px");
                el.on(ig.touchEvents, this.onElementChosen);
                this._elements.push(el);
                $(this._elementsContainer).append(el);
            }
            $(this._elements[this._values.length - 1]).removeClass("button-desktop-idle");
            $(this._elements[this._values.length - 1]).addClass("button-desktop-active");
            this._selectedElement = this._elements[this._values.length - 1];
            var elCount = Math.ceil(this._values.length / this._maxElementsPerColumn);
            var width = $(this._elements[this._values.length - 1]).outerWidth() * elCount + ((elCount + 1) * 7);
            $(this._elementsContainer).css('width', width + "px");
            $('#autoSpinWrapper').offset({
                left: $('#autoSpinWrapper').offset().left + ($('#autoSpinSelectorContainer').offset().left - $('#autoSpinWrapper').offset().left - 7)
            });
            this.hideAutoplay();
        },
        onElementChosen: function(evt) {
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            this.activeAutoSpinCount = parseInt($(evt.currentTarget).attr('amount'));
            this.updateOnValue(this.activeAutoSpinCount);
        },
        translate: function(resProv) {
            this.autoSpinCaption = resProv.getString("autostart").toUpperCase();
            $('#autospin-caption').html(this.autoSpinCaption);
            if (this.mustShowInfinitySymbol()) {
                $("#selectedAutospinAmount").html("<span style='font-size: 2em'>&infin;</span>");
            } else {
                if (this.activeAutoSpinCount < 0) {
                    $("#selectedAutospinAmount").html("");
                } else {
                    $("#selectedAutospinAmount").html(this.activeAutoSpinCount);
                }
            }
            $("#selectedAutospinAmount").css("font-size", $('#stake-meter').css('font-size'));
        },
        update: function() {
            for (var i = 0; i < this._elements.length; i++) {
                var element = this._elements[i];
                $(element).css('width', BaseValues.DesktopButtonWidthScaled);
                $(element).css('height', BaseValues.DesktopButtonHeightScaled);
            }
            var elCount = Math.ceil(this._values.length / this._maxElementsPerColumn);
            var width = $(this._elements[this._values.length - 1]).outerWidth() * elCount + ((elCount + 1) * 7);
            $("#selectedAutospinAmount").css("font-size", $('#stake-meter').css('font-size'));
            $(this._elementsContainer).css('width', width);
        },
        mustShowInfinitySymbol: function() {
            return this.activeAutoSpinCount < 0 && this._values.length > 1;
        },
        updateOnValue: function(newValue, silently) {
            this.activeAutoSpinCount = newValue;
            if (this.mustShowInfinitySymbol()) {
                $("#selectedAutospinAmount").html("<span style='font-size: 2em'>&infin;</span>");
            } else {
                if (this.activeAutoSpinCount < 0) {
                    $("#selectedAutospinAmount").html("");
                } else {
                    $("#selectedAutospinAmount").html(this.activeAutoSpinCount);
                }
            }
            $(this._selectedElement).removeClass("button-desktop-active");
            $(this._selectedElement).addClass("button-desktop-idle");
            if (this.activeAutoSpinCount !== 0) {
                this._selectedElement = this.findElementWithValue(newValue);
                $('#autospinSelectorButton').removeClass('button-desktop-autospinamount-button');
                if (this._values.length <= 1) {
                    $('#autospinSelectorButton').addClass('button-desktop-autoSpinStart');
                } else {
                    $('#autospinSelectorButton').addClass('button-desktop-green');
                }
            } else {
                this._selectedElement = this._elements[this._values.length - 1];
                if (this._values.length <= 1) {
                    $('#autospinSelectorButton').removeClass('button-desktop-autoSpinStart');
                } else {
                    $('#autospinSelectorButton').removeClass('button-desktop-green');
                }
                $('#autospinSelectorButton').addClass('button-desktop-autospinamount-button');
            }
            $(this._selectedElement).removeClass("button-desktop-idle");
            $(this._selectedElement).addClass("button-desktop-active");
            if (typeof this._chosenCallback === "function" && !silently) {
                this._chosenCallback(this.activeAutoSpinCount);
            }
        },
        disable: function() {
            if (!this.enabled) {
                return;
            }
            this.hideExpertAutoplay();
            $("#autospinSelectorButton").off(ig.touchEvents, this.showAutoplay);
            $("#autospinSelectorButton").css("opacity", "0.75");
            this.enabled = false;
        },
        enable: function() {
            if (this.enabled) {
                return;
            }
            $("#autospinSelectorButton").on(ig.touchEvents, this.showAutoplay);
            $("#autospinSelectorButton").css("opacity", "");
            this.enabled = true;
        },
        calculateTopMargin: function() {
            this.showExpertAutoplay();
            var buttonOffset = $('#autospinSelectorButton').offset();
            var offsetTop = buttonOffset.top - $(this._elementsContainer).height();
            this.hideExpertAutoplay();
            $(this._elementsContainer).css('top', offsetTop);
        },
        showAutoplay: function() {
            if (this._values.length <= 1) {
                ig.game.facade.sendNotification(GameActionIDs.START_AUTOPLAY, this);
                return;
            }
            if (this.visible) {
                return;
            }
            this.menuVisible = true;
            this.showExpertAutoplay();
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            this.visible = true;
        },
        hideAutoplay: function() {
            if (this._values.length <= 1) {
                return;
            }
            if (!this.visible) {
                return;
            }
            this.menuVisible = false;
            this.hideExpertAutoplay();
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            this.visible = false;
        },
        showButton: function() {
            "use strict";
            $("#autoSpinSelectorContainer").css('display', 'inline-block');
        },
        hideButton: function() {
            "use strict";
            $("#autoSpinSelectorContainer").css('display', 'none');
        },
        reenableButton: function() {
            "use strict";
            $("#autospinSelectorButton").off(ig.touchEvents, this.hideAutoplay);
            $("#autospinSelectorButton").on(ig.touchEvents, this.showAutoplay);
        }
    });
});

// ../private/de/adp/web/autoplay/conditionViews/elements/conditionCheckBox.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.elements.conditionCheckBox").requires("impact.impact").defines(function() {
    ConditionCheckBox = ig.Class.extend({
        _self: {},
        _flipSwitch: {},
        _id: "",
        _labelText: "",
        _activationCallback: undefined,
        _currentValue: false,
        _callback: null,
        init: function(labelText, changeCallback) {
            this.onCheckBoxChange = this.onCheckBoxChange.bind(this);
            this._labelText = labelText;
            this._id = labelText + "_flipswitch";
            this._callback = changeCallback;
            this._flipSwitch = $('<input type="checkbox" id="' + this._id + '" data-role="flipswitch">');
            this._self = $("<div class='checkbox-group ui-block-a'></div>");
            this._self.append(this._flipSwitch);
            $(this._flipSwitch).on('change', this.onCheckBoxChange);
        },
        setActiveAndDisable: function() {
            $(this._flipSwitch).attr('checked', 'checked').flipswitch('refresh').flipswitch('disable');
        },
        setInactiveAndEnable: function() {
            $(this._flipSwitch).removeAttr('checked').flipswitch('refresh').flipswitch('enable');
        },
        enhanceElements: function() {
            $(this._flipSwitch).flipswitch({
                wrapperClass: "condition-checkbox"
            });
        },
        getCheckBox: function() {
            return this._self;
        },
        onCheckBoxChange: function(evt) {
            this._currentValue = evt.target.checked;
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            if (this._callback !== undefined) {
                this._callback(evt.target.checked);
            }
        },
        scale: function(scaleFactor) {
            "use strict";
            $(this._self).css('transform', 'scale(' + scaleFactor + ')');
        },
        enable: function() {
            $(this._flipSwitch).removeAttr('checked').flipswitch('refresh').flipswitch('enable');
        },
        disable: function() {
            $(this._flipSwitch).removeAttr('checked').flipswitch('refresh').flipswitch('disable');
        },
        show: function() {
            $(this._self).css('visibility', 'visible');
        },
        hide: function() {
            $(this._self).css('visibility', 'hidden');
        }
    });
});

// ../private/de/adp/web/autoplay/conditionViews/elements/conditionView.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.elements.conditionView").requires("impact.impact", "de.adp.web.autoplay.conditionViews.elements.conditionCheckBox").defines(function() {
    ConditionView = ig.Class.extend({
        _name: "Condition",
        _self: {},
        _checkBox: {},
        _activationCallback: null,
        _enabled: false,
        init: function(name, callback) {
            this._name = name;
            this.onCheckBoxChange = this.onCheckBoxChange.bind(this);
            this._activationCallback = callback || null;
            this.createContainer();
            this.createCheckBox();
        },
        createContainer: function() {
            this._self = $("<div id='" + this._name + "' class='condition-group ui-grid-b' style='font-size:16px'><p id='" + this._name + "_caption' class='expert-condition-caption'></p></div>");
        },
        enhanceElements: function() {
            this._checkBox.enhanceElements();
        },
        createCheckBox: function() {
            this._checkBox = new ConditionCheckBox(this._name, this.onCheckBoxChange);
            $(this._self).append(this._checkBox.getCheckBox());
        },
        onCheckBoxChange: function(checked) {
            this._enabled = checked;
            if (this._activationCallback !== null) {
                this._activationCallback(this._enabled);
            }
        },
        getSelf: function() {
            return this._self;
        },
        setCaption: function(caption) {
            $("#" + this._name + "_caption").html(caption);
        },
        setActive: function() {
            this._checkBox.setActiveAndDisable();
        },
        setInactive: function() {
            this._checkBox.setInactiveAndEnable();
        },
        getMenuEntry: function() {
            return this._self;
        },
        refresh: function() {
            "use strict";
        },
        reset: function() {
            "use strict";
        },
        getHeight: function() {
            "use strict";
            return $(this._self).height();
        },
        resize: function(scaleFactor) {
            "use strict";
            if (ig.ua.mobile) {
                $("#" + this._name).css("font-size", 11 + "px");
            }
        },
        enable: function() {
            this._checkBox.enable();
        },
        disable: function() {
            this._checkBox.disable();
        },
        hideCheckbox: function() {
            this._checkBox.hide();
        },
        showCheckbox: function() {
            this._checkBox.show();
        }
    });
});

// ../private/de/adp/web/autoplay/conditionViews/elements/conditionSlider.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.elements.conditionSlider").requires("impact.impact").defines(function() {
    ConditionSlider = ig.Class.extend({
        _id: "",
        _min: 0,
        _max: 100,
        _steps: 1,
        _values: [],
        _self: {},
        _activationCallback: null,
        _minusBtn: {},
        _plusBtn: {},
        _slider: {},
        _sliderHandle: {},
        _currentSliderIndex: 0,
        init: function(name, values, changeCallback) {
            this._id = name;
            this._max = values.length - 1;
            this._values = values;
            this._callback = changeCallback || null;
            this.onMinus = this.onMinus.bind(this);
            this.onPlus = this.onPlus.bind(this);
            this.onSlideChange = this.onSlideChange.bind(this);
            this.createSlider();
            this.attachListeners();
        },
        createSlider: function() {
            var sliderWrapper = $("<div class='slidergroup ui-block-b ui-grid-b visible-overflow' style='float: right'>"),
                minusButtonContainer = $("<div class='ui-block-a'></div>"),
                plusButtonContainer = $('<div class="ui-block-c"></div>'),
                sliderContainer = $('<div class="ui-block-b"></div>');
            this._slider = $('<input data-highlight="true" type="range" name="' + this._id + '_slider" id="' + this._id + '_slider" value="0" min="' + this._min + '" max="' + this._max + '" step="' + this._steps + '">');
            this._minusBtn = $('<input type="button" id="' + this._id + '_minusbtn" value="–"/>');
            this._plusBtn = $('<input type="button" id="' + this._id + '_plusbtn" value="+"/>');
            sliderContainer.append(this._slider);
            minusButtonContainer.append(this._minusBtn);
            plusButtonContainer.append(this._plusBtn);
            $(sliderWrapper).append(minusButtonContainer);
            $(sliderWrapper).append(sliderContainer);
            $(sliderWrapper).append(plusButtonContainer);
            this._sliderHandle = $(this._slider).closest(".ui-slider").find(".ui-slider-handle");
            $(this._sliderHandle);
            this._self = sliderWrapper;
        },
        attachListeners: function() {
            $(this._minusBtn).on(ig.touchEvents, this.onMinus);
            $(this._plusBtn).on(ig.touchEvents, this.onPlus);
            $(this._slider).on('change', this.onSlideChange);
        },
        enhanceElements: function() {
            $(this._slider).slider();
            $(this._minusBtn).button({
                inline: true
            });
            $(this._plusBtn).button({
                inline: true
            });
            this._callback(this.getSelectedValue());
            $(this._slider).closest(".ui-slider").find(".ui-slider-handle").addClass('slider-handle-adp');
        },
        enable: function() {
            $(this._minusBtn).button('enable');
            $(this._plusBtn).button('enable');
            $(this._slider).slider('enable');
        },
        disable: function() {
            $(this._minusBtn).button('disable');
            $(this._plusBtn).button('disable');
            $(this._slider).slider('disable');
        },
        getSlider: function() {
            return this._self;
        },
        getSelectedValue: function() {
            var val = this._values[$(this._slider).val()];
            if (val === null || val === undefined) {
                val = this._values[0];
            }
            if (val === null || val === undefined) {
                val = 0;
            }
            return currencyFormatter.getMoneyString(val);
        },
        onMinus: function(event) {
            if (this._currentSliderIndex > 0) {
                this._currentSliderIndex -= 1;
            } else {
                this._currentSliderIndex = this._values.length - 1;
            }
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            this.refresh();
            if (this._callback !== null) {
                this._callback(this.getSelectedValue());
                $("#" + this._id + "selectedAmount").html(this.getSelectedValue());
            }
        },
        onPlus: function(event) {
            if (this._currentSliderIndex < this._values.length - 1) {
                this._currentSliderIndex += 1;
            } else {
                this._currentSliderIndex = 0;
            }
            ig.game.casino.soundPlayer.playEffect('SFX_SettingsButton');
            this.refresh();
            if (this._callback !== null) {
                this._callback(this._values[this._currentSliderIndex]);
                $("#" + this._id + "selectedAmount").html(this.getSelectedValue());
            }
        },
        refresh: function() {
            $(this._slider).val(this._currentSliderIndex);
            $(this._slider).slider('refresh');
            $("#" + this._id + "selectedAmount").html(this.getSelectedValue());
        },
        onSlideChange: function(event) {
            this._currentSliderIndex = parseInt(event.target.value);
            if (this._callback !== null) {
                this._callback(this.getSelectedValue());
                $("#" + this._id + "selectedAmount").html(this.getSelectedValue());
            }
        },
        updateSliderValues: function(newValues) {
            "use strict";
            this._values = newValues;
            this._max = this._values.length - 1;
            $(this._slider).attr('max', this._max);
            this.refresh();
        },
        setToLowestValue: function() {
            "use strict";
            this._currentSliderIndex = 0;
            this.refresh();
        },
        setToValue: function(value) {
            "use strict";
            if (parseFloat(value) <= parseFloat(this._values[0])) {
                this._currentSliderIndex = 0;
                this.refresh();
                if (this._callback !== null) {
                    this._callback(this.getSelectedValue());
                    $("#" + this._id + "selectedAmount").html(this.getSelectedValue());
                }
                return;
            }
            if (parseFloat(value) >= parseFloat(this._values[this._values.length - 1])) {
                this._currentSliderIndex = this._values.length - 1;
                this.refresh();
                if (this._callback !== null) {
                    this._callback(this.getSelectedValue());
                    $("#" + this._id + "selectedAmount").html(this.getSelectedValue());
                }
                return;
            }
            var newIndex = this._values.indexOf(value);
            if (newIndex < 0) {
                var prevVal = 0,
                    nextVal = 0,
                    i;
                for (i = 0; i < this._values.length - 1; i++) {
                    prevVal = parseFloat(this._values[i]), nextVal = parseFloat(this._values[i + 1]);
                    if (prevVal <= parseFloat(value) && parseFloat(value) < nextVal) {
                        newIndex = i;
                        break;
                    } else {
                        newIndex = this._values.length - 1;
                    }
                }
            }
            this._currentSliderIndex = newIndex;
            this.refresh();
            if (this._callback !== null) {
                this._callback(this.getSelectedValue());
                $("#" + this._id + "selectedAmount").html(this.getSelectedValue());
            }
        },
        scale: function(scaleFactor) {
            "use strict";
            $(this._self).css('transform', 'scale(' + scaleFactor + ')');
        }
    });
});

// ../private/de/adp/web/autoplay/conditionViews/elements/conditionViewWithSlider.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.elements.conditionViewWithSlider").requires("impact.impact", "de.adp.web.autoplay.conditionViews.elements.conditionCheckBox", "de.adp.web.autoplay.conditionViews.elements.conditionSlider").defines(function() {
    ConditionViewWithSlider = ig.Class.extend({
        _name: "Condition",
        _self: {},
        _checkBox: {},
        _slider: {},
        _activationCallback: null,
        _valueCallback: null,
        _enabled: false,
        init: function(name, values, activationCallBack, valueCallBack) {
            this.onCheckBoxChange = this.onCheckBoxChange.bind(this);
            this.onSliderChange = this.onSliderChange.bind(this);
            this._name = name;
            this._activationCallback = activationCallBack || null;
            this._valueCallback = valueCallBack || null;
            this.createContainer();
            this.createCheckBox();
            this.createSlider(values);
        },
        enhanceElements: function() {
            this._slider.enhanceElements();
            this._checkBox.enhanceElements();
            this._slider.disable();
        },
        setActive: function() {
            this._slider.enable();
            this._checkBox.setActiveAndDisable();
        },
        setInactive: function() {
            this._slider.disable();
            this._checkBox.setInactiveAndEnable();
        },
        createContainer: function() {
            this._self = $("<div id='" + this._name + "' class='condition-group ui-grid-b' style='font-size:16px'><p id='" + this._name + "_caption' class='expert-condition-caption'></p><div id='" + this._name + "selectedAmount' class='expert-condition-amount' style='text-align: right;font-weight:bold'></div></div></div>");
        },
        createCheckBox: function() {
            this._checkBox = new ConditionCheckBox(this._name, this.onCheckBoxChange);
            $(this._self).append(this._checkBox.getCheckBox());
        },
        createSlider: function(values) {
            this._slider = new ConditionSlider(this._name, values, this.onSliderChange);
            $(this._self).append(this._slider.getSlider());
        },
        onCheckBoxChange: function(checked) {
            this._enabled = checked;
            if (checked) {
                this._slider.enable();
            } else {
                this._slider.disable();
            }
            this._activationCallback(this._enabled);
        },
        onSliderChange: function(evt) {
            if (this._valueCallback !== null) {
                var val = this._slider.getSelectedValue();
                this._valueCallback(val);
            }
        },
        getMenuEntry: function() {
            return this._self;
        },
        getSlider: function() {
            "use strict";
            return this._slider;
        },
        setCaption: function(caption) {
            $('#' + this._name + "_caption").html(caption);
        },
        updateSliderValues: function(newValues) {
            "use strict";
            this._slider.updateSliderValues(newValues);
        },
        refresh: function() {
            "use strict";
            this._slider.refresh();
        },
        reset: function() {
            "use strict";
            this._slider.setToLowestValue();
            this.onSliderChange();
        },
        getHeight: function() {
            "use strict";
            return $(this._self).height();
        },
        resize: function(scaleFactor) {
            "use strict";
            if (ig.ua.mobile) {
                $("#" + this._name).css("font-size", 11 + "px");
            }
        },
        getCurrentSliderValue: function() {
            return this._slider.getSelectedValue();
        },
        enable: function() {
            this._checkBox.enable();
            this._slider.enable();
        },
        disable: function() {
            this._checkBox.disable();
            this._slider.disable();
        },
        hideCheckbox: function() {
            this._checkBox.hide();
        },
        showCheckbox: function() {
            this._checkBox.show();
        }
    });
});

// ../private/de/adp/web/autoplay/conditionViews/basicAbortCondition.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.basicAbortCondition").requires("impact.impact", "de.adp.web.autoplay.conditionViews.elements.conditionView", "de.adp.web.autoplay.conditionViews.elements.conditionViewWithSlider").defines(function() {
    BasicAbortCondition = ig.Class.extend({
        _name: "",
        _isMandatory: false,
        _hasSlider: false,
        _currentValue: 0,
        _currentIdx: 0,
        _currentActive: false,
        _captionKey: "CAPTION_KEY",
        _changeCallback: null,
        _isRunning: false,
        conditionView: {},
        selectorContainer: {},
        _visualSteps: [10, 100, 200, 400, 800, 1600, 3200],
        init: function(name, captionKey, isMandatory, hasSlider) {
            this._name = name;
            this._isMandatory = !!isMandatory;
            this._hasSlider = !!hasSlider;
            this._captionKey = captionKey;
            this.onValueChange = this.onValueChange.bind(this);
            this.onActivationChange = this.onActivationChange.bind(this);
            this.createMenuEntry();
            if (this._isMandatory) {
                this.conditionView.hideCheckbox();
            }
        },
        registerChangecallback: function(callback) {
            this._changeCallback = callback;
        },
        createMenuEntry: function() {
            if (this._hasSlider) {
                this.conditionView = new ConditionViewWithSlider(this._name, this.getValues(), this.onActivationChange, this.onValueChange);
            } else {
                this.conditionView = new ConditionView(this._name, this.onActivationChange);
            }
            this.conditionView.enhanceElements();
            if (this._isMandatory) {
                this.conditionView.setActive();
                this._currentActive = this._isMandatory;
            } else {
                this.conditionView.setInactive();
            }
        },
        getView: function() {
            return this.conditionView.getMenuEntry();
        },
        getValues: function() {
            return this._visualSteps;
        },
        isReady: function() {
            if (this._hasSlider) {
                return this._currentActive && this._currentValue > -1;
            } else {
                return this._currentActive;
            }
        },
        isActive: function() {
            "use strict";
            return this._currentActive;
        },
        onValueChange: function(value) {
            this._currentIdx = this._visualSteps.indexOf(value);
            this._currentValue = value;
            if (this._changeCallback !== null) {
                this._changeCallback();
            }
        },
        onActivationChange: function(active) {
            this._currentActive = active;
            if (!this._isMandatory && this._hasSlider) {
                this.onValueChange(this.conditionView.getCurrentSliderValue());
            } else {
                if (this._changeCallback !== null) {
                    this._changeCallback();
                }
            }
        },
        showSelectorContainer: function() {},
        fulfilled: function(casino, facade) {},
        getHeight: function() {
            "use strict";
            return this.conditionView.getHeight();
        },
        translate: function(resProv) {
            var caption = resProv.getString(this._captionKey);
            if (this._isMandatory) {
                caption = caption + "*";
            }
            this.conditionView.setCaption(caption);
        },
        onAutplayStarted: function() {
            this._isRunning = true;
        },
        onAutplayStopped: function() {
            this._isRunning = false;
        },
        reset: function() {
            "use strict";
            this.conditionView.reset();
            this._isRunning = false;
        },
        resizeView: function(scaleFactor) {
            "use strict";
            this.conditionView.resize(scaleFactor);
        },
        enable: function() {},
        disable: function() {}
    });
});

// ../private/de/adp/web/autoplay/conditionViews/abortAtWinCondition.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.abortAtWinCondition").requires("de.adp.web.autoplay.conditionViews.basicAbortCondition").defines(function() {
    AbortAtWinCondition = BasicAbortCondition.extend({
        fulfilled: function(casino) {
            if (casino.networkProvider.getLastResponse().gameResult.winnings.length > 0) {
                return true;
            }
        }
    });
});

// ../private/de/adp/web/autoplay/conditionViews/stepRules/basicRule.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.stepRules.basicRule").requires("impact.impact").defines(function() {
    BasicRule = ig.Class.extend({
        _lowerBoundary: 0,
        _upperBoundary: 0,
        stepPackSizesTill_Inf: [40, 20, 14, 9, 8, 6, 3],
        stepPackSizesTill_390: [50, 20, 14, 9, 7],
        stepPackSizesTill_230: [60, 20, 14, 6],
        stepPackSizesTill_160: [70, 20, 10],
        stepPackSizesTill_120: [80, 20],
        stepPackSizesTill_100: [100],
        stepPackStepSizes: [1, 2, 5, 10, 20, 50, 100],
        init: function() {},
        getValuesForSteps: function(minimalStepWidth, maxValue) {
            var steps = [];
            var stepPackIndex = 0;
            var stepPackSizes = this.getStepPackSizes(minimalStepWidth, maxValue);
            var stepBound = stepPackSizes[stepPackIndex];
            var stepsize = this.stepPackStepSizes[stepPackIndex];
            var curStep = 0;
            while (curStep < maxValue) {
                for (var i = 0; i < stepBound; i++) {
                    curStep = curStep + minimalStepWidth * stepsize;
                    if (curStep >= maxValue) {
                        steps.push(maxValue);
                        break;
                    }
                    steps.push(curStep);
                }
                stepPackIndex++;
                stepBound = stepPackSizes[stepPackIndex];
                if (stepBound == undefined) {
                    break;
                }
                stepsize = this.stepPackStepSizes[stepPackIndex];
            }
            return steps;
        },
        getStepPackSizes: function(minValue, maxValue) {
            var maxMultiplier = maxValue / minValue;
            if (maxMultiplier > 390) {
                return this.stepPackSizesTill_Inf;
            }
            if (maxMultiplier > 230) {
                return this.stepPackSizesTill_390;
            }
            if (maxMultiplier > 160) {
                return this.stepPackSizesTill_230;
            }
            if (maxMultiplier > 120) {
                return this.stepPackSizesTill_160;
            }
            if (maxMultiplier > 100) {
                return this.stepPackSizesTill_120;
            }
            return this.stepPackSizesTill_100;
        }
    });
});

// ../private/de/adp/web/autoplay/conditionViews/totalLossCondition.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.totalLossCondition").requires("impact.impact", "de.adp.web.autoplay.conditionViews.basicAbortCondition", "de.adp.web.autoplay.conditionViews.stepRules.basicRule").defines(function() {
    TotalLossCondition = BasicAbortCondition.extend({
        _facade: null,
        _depotAtStart: 0,
        _steps: [],
        _visualSteps: [],
        _upperStepCountLimit: 100,
        _rangeLimit: 1,
        _linearStepsPossible: true,
        _changedSelf: false,
        _stepCreationRule: null,
        init: function(facade) {
            this._facade = facade;
            var isMandatory = this._facade.casino.getCasinoConfiguration("AUTOPLAY_LOSSLIMIT_MANDATORY");
            this._stepCreationRule = new BasicRule();
            this.parent("totalLossCondition", "at_total_loss_of", isMandatory, true);
            var range = this._facade.casino.getCasinoConfiguration("LOSSLIMITRANGE_PERCENTAGE");
            this._rangeLimit = range / 100;
            this.updateSteps();
            this._facade.registerForNotificationInterest("BET_CHANGED", this);
            this._facade.registerForNotificationInterest("AUTOSPIN_AMOUNT_CHANGED", this);
        },
        onValueChange: function(value) {
            this._currentIdx = this._visualSteps.indexOf(value);
            if (this._currentIdx !== -1) {
                this._currentValue = this._steps[this._currentIdx];
            } else {
                this._currentValue = 0;
            }
            this._changedSelf = true;
            if (this._changeCallback !== null) {
                this._changeCallback();
            }
        },
        fulfilled: function(casino, facade) {
            if (this._facade.currentGameMode === 'FREE_GAME') {
                return false;
            }
            return (this._depotAtStart - this._facade.casino.depotProvider.getDepotBalance()) >= this._currentValue;
        },
        handleNotification: function(notificatio) {
            if (this._isRunning) {
                return;
            }
            if (notificatio.name === "AUTOSPIN_AMOUNT_CHANGED") {
                if (this._changedSelf) {
                    this._changedSelf = false;
                    return;
                }
            }
            this.updateSteps(null);
            this.updateView();
        },
        onAutplayStarted: function() {
            this._isRunning = true;
            this._depotAtStart = this._facade.casino.depotProvider.getDepotBalance();
        },
        createRange: function() {
            var lowerLimit = this.calculateLowerLimit();
            var upperLimit = this.calculateUpperLimit(lowerLimit, this._rangeLimit);
            var linearStepCount = Math.ceil(upperLimit / lowerLimit);
            var maxStepCount = 0;
            if (linearStepCount <= 100) {
                this._linearStepsPossible = true;
                maxStepCount = linearStepCount;
            } else {
                this._linearStepsPossible = false;
                maxStepCount = this.calculateRequiredStepCount(lowerLimit, upperLimit);
            }
            var steps = this._steps;
            steps.length = 0;
            var curVal = 0;
            var prevVal = 0;
            steps = this._stepCreationRule.getValuesForSteps(lowerLimit, upperLimit);
            return steps;
        },
        calculateRequiredStepCount: function(lowerLimit, upperLimit) {
            var rangeRatio = upperLimit / lowerLimit;
            var linearStepCount = Math.ceil(rangeRatio);
            if (linearStepCount)
                var log = Math.log(rangeRatio) / Math.log(10);
            var stepCount = Math.floor(log * 10);
            if (stepCount > this._upperStepCountLimit) {
                return this._upperStepCountLimit;
            }
            return stepCount;
        },
        calculateLowerLimit: function() {
            var lowerLimit = 1;
            try {
                lowerLimit = this._facade.getTotalStake();
            } catch (e) {}
            return lowerLimit;
        },
        calculateUpperLimit: function(lowerLimit, rangeLimit) {
            var upperLimit = 10000;
            var remRounds = this._facade.autoPlay._remainingAutospins;
            var depot = this._facade.casino.depotProvider.getDepotBalance();
            if (remRounds > 0) {
                upperLimit = lowerLimit * remRounds;
            } else {
                upperLimit = depot;
            }
            var croppedUpperLimit = depot * rangeLimit;
            if (croppedUpperLimit <= upperLimit) {
                upperLimit = croppedUpperLimit;
            }
            return Math.floor(upperLimit);
        },
        getDiscreteValueOutOfRange: function(lowerLimit, upperLimit, currIdx, maxIdx, prevVal) {
            if (currIdx == maxIdx) {
                return upperLimit;
            }
            if (currIdx == 0) {
                return lowerLimit;
            }
            var progress = (currIdx / maxIdx);
            var quadProgress = progress * progress;
            var totalDifference = upperLimit - lowerLimit;
            var pickedValue = totalDifference * quadProgress;
            pickedValue = Math.floor(pickedValue) + lowerLimit;
            var roundedValue = this.roundValue(pickedValue, prevVal);
            return roundedValue;
        },
        getLinearValueOutOfRange: function(lowerLimit, upperLimit, currIdx, maxIdx, prevVal) {
            if (currIdx === maxIdx) {
                return upperLimit;
            }
            if (currIdx === 0) {
                return lowerLimit;
            }
            var pickedValue = currIdx * lowerLimit;
            return pickedValue;
        },
        roundValue: function(pickedValue, previousValue) {
            var roundedValue = pickedValue;
            var limit = 10;
            while (roundedValue > limit) {
                roundedValue = Math.floor(roundedValue / (limit)) * limit;
                limit = limit * 10;
            }
            var i = 0;
            while (previousValue >= roundedValue) {
                limit = limit * 0.1;
                if (parseInt(String(previousValue).charAt(i)) >= parseInt(String(roundedValue).charAt(i))) {
                    roundedValue = Math.floor(pickedValue / (limit)) * limit;
                }
                i++;
                if (i >= String(previousValue).length) {
                    break;
                }
            }
            return roundedValue;
        },
        updateSteps: function(steps) {
            this._steps = this.createRange();
            this.formatSteps();
            this.conditionView.updateSliderValues(this._steps);
            this.updateView();
        },
        updateView: function() {
            if (this._currentValue > -1) {
                this.conditionView.getSlider().setToValue(this._currentValue);
            }
        },
        formatSteps: function() {
            this._visualSteps.length = 0;
            for (var i = 0; i < this._steps.length; i++) {
                this._visualSteps.push(currencyFormatter.getMoneyString(this._steps[i]));
            }
        }
    });
});

// ../private/de/adp/web/autoplay/conditionViews/singleSpinWinAmountCondition.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.singleSpinWinAmountCondition").requires("impact.impact", "de.adp.web.autoplay.conditionViews.basicAbortCondition", "de.adp.web.autoplay.conditionViews.stepRules.basicRule").defines(function() {
    SingleSpinWinAmountCondition = BasicAbortCondition.extend({
        _facade: null,
        _steps: [],
        _upperStepCountLimit: 50,
        _rangeLimit: 1,
        _stepCreationRule: null,
        init: function(facade) {
            this._facade = facade;
            var isMandatory = this._facade.casino.getCasinoConfiguration("AUTOPLAY_WINLIMIT_MANDATORY");
            this.parent("totalWinCondition", "at_min_win_of", isMandatory, true);
            this._stepCreationRule = new BasicRule();
            var range = this._facade.casino.getCasinoConfiguration("WINLIMITRANGE_PERCENTAGE");
            this._rangeLimit = range / 100;
            this.updateSteps();
            this._facade.registerForNotificationInterest("BET_CHANGED", this);
        },
        onValueChange: function(value) {
            var idx = this._visualSteps.indexOf(value);
            if (idx !== -1) {
                this._currentValue = this._steps[idx];
            } else {
                this._currentValue = 0;
            }
            if (this._changeCallback != null) {
                this._changeCallback();
            }
        },
        fulfilled: function(curRound, casino) {
            var resp = this._facade.casino.networkProvider.getLastResponse();
            if (resp == null) {
                return false;
            }
            return resp.gameResult.totalWinAmount() >= this._currentValue;
        },
        handleNotification: function(notificatio) {
            if (this._isRunning) {
                return;
            }
            this.updateSteps(null);
            this.updateView();
        },
        onAutplayStarted: function() {},
        createRange: function() {
            var lowerLimit = this.calculateLowerLimit();
            var upperLimit = this.calculateUpperLimit(lowerLimit, this._rangeLimit);
            var maxStepCount = this.calculateRequiredStepCount(lowerLimit, upperLimit);
            var steps = this._steps;
            steps.length = 0;
            steps = this._stepCreationRule.getValuesForSteps(lowerLimit, upperLimit);
            return steps;
        },
        calculateRequiredStepCount: function(lowerLimit, upperLimit) {
            var rangeRatio = upperLimit / lowerLimit;
            var log = Math.log(rangeRatio) / Math.log(10);
            var stepCount = Math.floor(log * 10);
            if (stepCount > this._upperStepCountLimit) {
                return this._upperStepCountLimit;
            }
            return stepCount;
        },
        calculateLowerLimit: function() {
            var lowerLimit = 1;
            try {
                lowerLimit = this._facade.getTotalStake();
            } catch (e) {}
            return lowerLimit;
        },
        calculateUpperLimit: function(lowerLimit, rangeLimit) {
            var upperLimit = lowerLimit * 1000;
            return Math.floor(upperLimit * rangeLimit);
        },
        getDiscreteValueOutOfRange: function(lowerLimit, upperLimit, currIdx, maxIdx, prevVal) {
            if (currIdx == maxIdx) {
                return upperLimit;
            }
            if (currIdx == 0) {
                return lowerLimit;
            }
            var progress = (currIdx / maxIdx);
            var quadProgress = progress * progress;
            var totalDifference = upperLimit - lowerLimit;
            var pickedValue = totalDifference * quadProgress;
            pickedValue = Math.floor(pickedValue) + lowerLimit;
            var roundedValue = this.roundValue(pickedValue, prevVal);
            return roundedValue;
        },
        roundValue: function(pickedValue, previousValue) {
            var roundedValue = pickedValue;
            var limit = 10;
            while (roundedValue > limit) {
                roundedValue = Math.floor(roundedValue / (limit)) * limit;
                limit = limit * 10;
            }
            var i = 0;
            while (previousValue >= roundedValue) {
                limit = limit * 0.1;
                if (parseInt(String(previousValue).charAt(i)) >= parseInt(String(roundedValue).charAt(i))) {
                    roundedValue = Math.floor(pickedValue / (limit)) * limit;
                }
                i++;
                if (i >= String(previousValue).length) {
                    break;
                }
            }
            return roundedValue;
        },
        updateSteps: function(steps) {
            this._steps = this.createRange();
            this.formatSteps();
            this.conditionView.updateSliderValues(this._steps);
            this.updateView();
        },
        updateView: function() {
            if (this._currentValue > -1) {
                this.conditionView.getSlider().setToValue(this._currentValue);
            }
        },
        formatSteps: function() {
            this._visualSteps.length = 0;
            for (var i = 0; i < this._steps.length; i++) {
                this._visualSteps.push(currencyFormatter.getMoneyString(this._steps[i]));
            }
        }
    });
});

// ../private/de/adp/terminal/terminalGUI.js 
ig.baked = true;
ig.module('de.adp.terminal.terminalGUI').requires('impact.impact', 'de.adp.web.paytable.paytableIDs').defines(function() {
    TerminalGUI = ig.Class.extend({
        facade: null,
        container: null,
        depotLabel: null,
        depotMeter: null,
        betLabel: null,
        betMeter: null,
        winLabel: null,
        winMeter: null,
        currentScaleFactor: 1,
        winTestVisible: false,
        outputTFs: [],
        init: function(facade, container) {
            this.facade = facade;
            this.container = $(container);
            $("body").css("overflow", "hidden");
            this.initWinTest();
            this.initLogging();
            this.createContainer();
            this.createFrame();
            this.reattachExpertView();
            this.createBottomBar();
            this.createMeterBackgrounds();
            this.createDepotDisplay();
            this.createBetDisplay();
            this.createWinDisplay();
            this.reattachAutoSpinButton();
            this.facade.casino.resourceProvider.registerTranslatableObject(this);
        },
        log: function(message) {
            var outputTF = null;
            if (this.outputTFs.length == 0) {
                outputTF = new TextBox(0, 0, 1000, 14);
            } else {
                var lastTF = this.outputTFs[this.outputTFs.length - 1];
                outputTF = new TextBox(0, lastTF.pos.y + 14, 500, 14);
            }
            outputTF.setTextFormat(12, "Arial", "normal", "#FFFFFF", "left", "top");
            outputTF.useSharperCanvas = false;
            this.outputLayer.addChild(outputTF);
            this.outputTFs.push(outputTF);
            outputTF.setText(message);
            if (outputTF.pos.y > 500) {
                this.moveAllLogsUp();
            }
        },
        showLogs: function() {
            this.showLog = true;
            this.outputLayer.visible = true;
        },
        hideLogs: function() {
            this.showLog = false;
            this.outputLayer.visible = false;
        },
        moveAllLogsUp: function() {
            var tf = null;
            for (var i = 0; i < this.outputTFs.length; i++) {
                tf = this.outputTFs[i];
                tf.pos.y = tf.pos.y - 14;
                if (tf.pos.y < -14) {
                    this.content.removeChild(tf);
                    this.outputTFs.shift();
                }
            }
        },
        initWinTest: function() {
            ig.input.bind(ig.KEY.W, 'winTest');
            this.wintest = $("<iframe id='terminal-wintest'></iframe>");
            var url = this.facade.getURL();
            var portIdx = url.indexOf(":8080");
            url = url.slice(0, portIdx + 6);
            this.wintest.attr("src", url + "adp-wintest");
            this.container.append(this.wintest);
            this.hideWinTest();
        },
        initLogging: function() {
            ig.input.bind(ig.KEY.L, 'log');
        },
        reattachAutoSpinButton: function() {
            this.autoSpin = $("#autoSpinSelectorContainer");
            this.autoSpin.css("position", "absolute");
            this.autoSpin.css("left", "893px");
            this.autoSpin.css("top", "584px");
            this.autoSpin.css("margin-left", "0px");
            this.container.append(this.autoSpin);
            this.autoSpinLabel = $("<div id='tautospin-label' class='terminal-label'>AUTO START</div>");
            this.container.append(this.autoSpinLabel);
        },
        reattachExpertView: function() {
            if (this.facade.autoPlay._conditions.length <= 0) {
                $(".expertautoplay-container").css("background-color", "transparent");
            }
        },
        createContainer: function() {
            var gui = $("<div id='terminal-gui'></div>");
            this.container.append(gui);
            this.container = gui;
        },
        createFrame: function() {
            var frame = $("<div id='terminal-frame' class='terminal-frame-bg'></div>");
            this.container.append(frame);
        },
        createBottomBar: function() {
            var bar = $("<div id='terminal-bar' class='terminal-bar-bg'></div>");
            this.container.append(bar);
        },
        createMeterBackgrounds: function() {
            var meter = $("<div id='terminal-meter' class='terminal-meter-bg'></div>");
            this.container.append(meter);
        },
        createDepotDisplay: function() {
            this.depotLabel = $("<div id='tdepot-label' class='terminal-label'>Guthaben</div>");
            this.depotMeter = $("<div id='tdepot-meter' class='terminal-meter'>0,00 EUR</div>");
            this.container.append(this.depotMeter);
            this.container.append(this.depotLabel);
        },
        createWinDisplay: function() {
            this.winLabel = $("<div id='twin-label' class='terminal-label'>Gewinn</div>");
            this.winMeter = $("<div id='twin-meter' class='terminal-meter'>0,00 EUR</div>");
            this.container.append(this.winMeter);
            this.container.append(this.winLabel);
        },
        createBetDisplay: function() {
            this.betLabel = $("<div id='tbet-label' class='terminal-label'>Einsatz</div>");
            this.betMeter = $("<div id='tbet-meter' class='terminal-meter'>0,00 EUR</div>");
            this.container.append(this.betMeter);
            this.container.append(this.betLabel);
        },
        setWin: function(win) {
            this.winMeter.html(win);
            this.arrangeMeterSizes();
        },
        setStake: function(stake) {
            this.betMeter.html(stake);
            this.arrangeMeterSizes();
        },
        setDepot: function(depot) {
            this.depotMeter.html(depot);
            this.arrangeMeterSizes();
        },
        arrangeMeterSizes: function() {
            $(".terminal-meter").css("font-size", "24px");
            var winSpace = 140;
            var depotSpace = winSpace;
            var betSpace = 90;
            var depotWidth = this.depotMeter.outerWidth();
            var winWidth = this.winMeter.outerWidth();
            var betWidth = this.betMeter.outerWidth();
            var betScale = betSpace / betWidth;
            var depotScale = depotSpace / depotWidth;
            var winScale = winSpace / winWidth;
            var scaleFac = Math.min(betScale, winScale, depotScale);
            if (scaleFac > 1) {
                scaleFac = 1;
            }
            var newFontSize = 24 * scaleFac;
            $(".terminal-meter").css("font-size", newFontSize + "px");
            var textHeight = this.betMeter.outerHeight();
            var availableHeight = 37;
            var yOffset = (availableHeight - textHeight) * 0.5;
            $(".terminal-meter").css("top", (585 + yOffset) + "px");
        },
        resize: function() {
            var canvasHeight = ig.system.gameHeight;
            var scaleRatioContainer = this.currentScaleFactor = canvasHeight / 530;
            var leftOffsetContainer = (ig.system.stageWidth - (1227 * scaleRatioContainer)) * 0.5;
            var topOffsetContainer = -2 * scaleRatioContainer;
            this.container.css("left", leftOffsetContainer + 'px');
            this.container.css("top", topOffsetContainer + 'px');
            this.container.css("transform", "scale(" + scaleRatioContainer + ")");
            $('#autoSpinSelectorContainer').css('width', "46px");
            $('#autoSpinSelectorContainer').css('height', "46px");
            $('#selectedAutospinAmount').css('font-size', "15px");
            $("#autospin-caption").css('font-size', '2em');
            var autoSpin = this.facade.autoPlay._autoSpinSelector;
            var btnWidth = 46 * this.currentScaleFactor;
            var fntSize = 15 * this.currentScaleFactor;
            for (var i = 0; i < autoSpin._elements.length; i++) {
                var element = autoSpin._elements[i];
                $(element).css('width', btnWidth + "px");
                $(element).css('height', btnWidth + "px");
                $(element).css('font-size', fntSize + "px");
            }
            var elCount = Math.ceil(autoSpin._values.length / autoSpin._maxElementsPerColumn);
            var width = $(autoSpin._elements[autoSpin._values.length - 1]).outerWidth() * elCount + ((elCount + 1) * 7);
            $(autoSpin._elementsContainer).css('width', width);
            this.facade.autoPlay.calculateOffset();
            this.toggleExpertAutoPlay(true);
            var conditionsHeight = $(".condition-selector").height() + 2 * BaseValues.DesktopButtonFontSize;
            var selectorHeight = $("#autoSpinWrapper").height();
            var height = conditionsHeight > selectorHeight ? conditionsHeight : selectorHeight;
            var offsetTop = (557 * scaleRatioContainer + topOffsetContainer) - height;
            $(".expertautoplay-container").css('top', offsetTop);
            $(".condition-selector").css('width', '45%');
            $(".condition-selector").css('margin-left', '20%');
            this.toggleExpertAutoPlay(false);
        },
        toggleExpertAutoPlay: function(show) {
            if (show) {
                $(".expertautoplay-container").css('display', '');
            } else {
                $(".expertautoplay-container").css('display', 'none');
            }
        },
        translate: function(resourceProvider) {
            $(this.depotLabel).html(resourceProvider.getString("depot_label"));
            $(this.betLabel).html(resourceProvider.getString("stake_label"));
            $(this.winLabel).html(resourceProvider.getString("winnings_label"));
            $(this.autoSpinLabel).html(resourceProvider.getString("autostart"));
        },
        showWinTest: function() {
            this.winTestVisible = true;
            this.wintest.css("display", "block");
        },
        hideWinTest: function() {
            this.winTestVisible = false;
            this.wintest.css("display", "none");
        },
        toggleWinTest: function() {
            if (this.winTestVisible) {
                this.hideWinTest();
            } else {
                this.showWinTest();
            }
        },
        showLog: function() {
            this.logVisible = true;
            this.facade.sendNotification(PaytableIDs.SHOW_LOG);
        },
        hideLog: function() {
            this.logVisible = false;
            this.facade.sendNotification(PaytableIDs.HIDE_LOG);
        },
        toggleLog: function() {
            if (this.logVisible) {
                this.hideLog();
            } else {
                this.showLog();
            }
        }
    });
});

// ../private/de/adp/web/controller/switchExternalPaytableAppearanceCommand.js 
ig.baked = true;
ig.module("de.adp.web.controller.switchExternalPaytableAppearanceCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    SwitchExternalPaytableAppearanceCommand = GameCommand.extend({
        facade: null,
        init: function(facade) {
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notifivation) {
            var dto = notifivation.getBody();
            this.sendToPaytable(dto);
        },
        sendToPaytable: function(data) {
            var sender = Intercom.getInstance();
            var json = JSON.stringify(data);
            sender.emit(PaytableIDs.SWITCH_EXTERNAL_PAYTABLE, json);
        }
    });
});

// ../private/de/adp/terminal/logLayer.js 
ig.baked = true;
ig.module('de.adp.terminal.logLayer').requires('impact.impact', "impact.node", "de.adp.web.gui.elements.textBox").defines(function() {
    LogLayer = ig.Node.extend({
        outputTFs: [],
        gameInfoTF: null,
        init: function(facade, container) {
            this.outputLayer = new ig.Node(0, 0);
            this.addChild(this.outputLayer);
            this.gameInfoTF = new TextBox(0, 20, 920, 14);
            this.gameInfoTF.setTextFormat(12, "Arial", "normal", "#FFFFFF", "right", "top");
            this.outputLayer.addChild(this.gameInfoTF);
            if (typeof gameinformation !== "undefined") {
                this.gameInfoTF.setText("Frameworkversion: " + gameinformation.frameworkversion + ", Gameversion: " + gameinformation.gameclientversion);
            }
            this.hideLogs();
        },
        draw: function() {
            if (this.showLog) {
                var ctx = ig.system.context;
                ctx.save();
                ctx.fillStyle = 'rgba(0,0,0,0.7)';
                ctx.fillRect(0, 0, 1500, 1000);
                ctx.restore();
                this.parent();
            }
        },
        log: function(message) {
            var outputTF = null;
            if (this.outputTFs.length == 0) {
                outputTF = new TextBox(0, 0, 1500, 14);
            } else {
                var lastTF = this.outputTFs[this.outputTFs.length - 1];
                outputTF = new TextBox(0, lastTF.pos.y + 14, 500, 14);
            }
            outputTF.setTextFormat(12, "Arial", "normal", "#FFFFFF", "left", "top");
            outputTF.useSharperCanvas = false;
            this.outputLayer.addChild(outputTF);
            this.outputTFs.push(outputTF);
            outputTF.setText(message);
            if (outputTF.pos.y > 500) {
                this.moveAllLogsUp();
            }
        },
        showLogs: function() {
            this.showLog = true;
            this.outputLayer.visible = true;
        },
        hideLogs: function() {
            this.showLog = false;
            this.outputLayer.visible = false;
        },
        moveAllLogsUp: function() {
            var tf = null;
            for (var i = 0; i < this.outputTFs.length; i++) {
                tf = this.outputTFs[i];
                tf.pos.y = tf.pos.y - 14;
                if (tf.pos.y < -14) {
                    this.outputLayer.removeChild(tf);
                    this.outputTFs.shift();
                }
            }
        }
    });
});

// ../private/de/adp/web/paytable/external/healthTimer.js 
ig.baked = true;
ig.module("de.adp.web.paytable.external.healthTimer").requires("impact.impact", "de.adp.web.utils.logger").defines(function() {
    HealthTimer = ig.Class.extend({});
    HealthTimer.timer = null;
    HealthTimer.delay = 60000;
    HealthTimer.casino = null;
    HealthTimer.game = null;
    HealthTimer.failureCallback = null;
    HealthTimer.reset = function() {
        if (HealthTimer.timer !== null) {
            HealthTimer.clear();
        }
        HealthTimer.timer = setTimeout(HealthTimer.onTimeout, HealthTimer.delay);
        ig.logger.log(Logger.LogLevel.DEBUG, "PaytableHealth " + HealthTimer.timer + " is started.");
    };
    HealthTimer.onTimeout = function() {
        ig.logger.log("Health " + HealthTimer.timer + " timed out");
        HealthTimer.clear();
        HealthTimer.failureCallback();
    };
    HealthTimer.clear = function() {
        clearTimeout(HealthTimer.timer);
        ig.logger.log(Logger.LogLevel.DEBUG, "Health " + HealthTimer.timer + " cleared.");
        HealthTimer.timer = null;
    };
});

// ../private/de/adp/web/turbospin/commands/activateTurboSpinsCommand.js 
ig.baked = true;
ig.module("de.adp.web.turbospin.commands.activateTurboSpinsCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    ActivateTurboSpinsCommand = GameCommand.extend({
        execute: function() {
            "use strict";
            $("#turboSpinButton").removeClass("desktopGameMenu-turboSpinInactive");
            $("#turboSpinButton").addClass("desktopGameMenu-turboSpinActive");
            this.facade.turboSpinHandler.activate();
        }
    });
});

// ../private/de/adp/web/turbospin/commands/deactivateTurboSpinsCommand.js 
ig.baked = true;
ig.module("de.adp.web.turbospin.commands.deactivateTurboSpinsCommand").requires("de.adp.web.controller.gameCommand").defines(function() {
    DeactivateTurboSpinsCommand = GameCommand.extend({
        execute: function() {
            "use strict";
            $("#turboSpinButton").removeClass("desktopGameMenu-turboSpinActive");
            $("#turboSpinButton").addClass("desktopGameMenu-turboSpinInactive");
            this.facade.turboSpinHandler.deactivate();
        }
    });
});

// ../private/de/adp/web/turbospin/turboSpinHandler.js 
ig.baked = true;
ig.module('de.adp.web.turbospin.turboSpinHandler').requires('impact.impact', "de.adp.web.turbospin.commands.activateTurboSpinsCommand", "de.adp.web.turbospin.commands.deactivateTurboSpinsCommand").defines(function() {
    TurboSpinHandler = ig.Class.extend({
        facade: null,
        skipCounter: 0,
        skipLimitToActivate: 3,
        isActive: false,
        isSkipInProgress: false,
        neverAskAgain: false,
        init: function(facade) {
            this.facade = facade;
            this.registerCommands();
            this.bindFunctions();
        },
        registerCommands: function() {
            var activateCommand = new ActivateTurboSpinsCommand(this.facade);
            var deactivateCommand = new DeactivateTurboSpinsCommand(this.facade);
            this.facade.registerCommand("ACTIVATE_TURBOSPINS", activateCommand);
            this.facade.registerCommand("DEACTIVATE_TURBOSPINS", deactivateCommand);
        },
        bindFunctions: function() {
            this.turboSpinConfirmed = this.turboSpinConfirmed.bind(this);
            this.turboSpinDeclined = this.turboSpinDeclined.bind(this);
            this.disableSkipCounterIncrementation = this.disableSkipCounterIncrementation.bind(this);
            this.enableSkipCounterIncrementation = this.enableSkipCounterIncrementation.bind(this);
        },
        showTurboSpinPopUp: function() {
            if (this.isTurboAllowed()) {
                this.facade.pauseGame();
                this.facade.isBlockedByPopUp = true;
                $("#turbospin-pop-up-yes").on(ig.touchEvents, this.turboSpinConfirmed);
                $("#turbospin-pop-up-no").on(ig.touchEvents, this.turboSpinDeclined);
                $("#turbospinDialog").click();
            }
        },
        turboSpinConfirmed: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            $("#turbospin-pop-up-yes").off(ig.touchEvents, this.turboSpinConfirmed);
            $("#turbospin-pop-up-no").off(ig.touchEvents, this.turboSpinDeclined);
            $("#turbospin-pop-up").popup("close");
            this.facade.isBlockedByPopUp = false;
            this.facade.resumeGame();
            this.facade.sendNotification("ACTIVATE_TURBOSPINS");
        },
        turboSpinDeclined: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.neverAskAgain = true;
            $("#turbospin-pop-up-yes").off(ig.touchEvents, this.turboSpinConfirmed);
            $("#turbospin-pop-up-no").off(ig.touchEvents, this.turboSpinDeclined);
            $("#turbospin-pop-up").popup("close");
            this.facade.isBlockedByPopUp = false;
            this.facade.resumeGame();
            this.skipCounter = 999;
        },
        activate: function() {
            this.isActive = true;
        },
        deactivate: function() {
            this.isActive = false;
            this.skipCounter = 0;
        },
        incrementSkipCounter: function() {
            if (!this.isSkipInProgress && !this.neverAskAgain) {
                this.skipCounter++;
                if (this.skipCounter === this.skipLimitToActivate && !this.isActive) {
                    this.showTurboSpinPopUp();
                } else {
                    this.disableSkipCounterIncrementation();
                }
            }
        },
        setSkipInProgress: function(val) {
            if (!this.isSkipInProgress && !val) {
                this.resetSkipCounter();
            }
            this.isSkipInProgress = val;
        },
        resetSkipCounter: function() {
            this.skipCounter = 0;
        },
        disableSkipCounterIncrementation: function() {
            this.isSkipInProgress = true;
        },
        enableSkipCounterIncrementation: function() {
            this.isSkipInProgress = false;
        },
        performTurboSpin: function() {
            if (this.isTurboAllowed()) {
                this.facade.sendNotification(GameActionIDs.SKIP);
            }
        },
        isTurboAllowed: function() {
            return this.facade.isTurboAllowed();
        }
    });
});

// ../private/de/adp/web/gui/gameFacade.js 
ig.baked = true;
ig.module('de.adp.web.gui.gameFacade').requires('impact.impact', 'de.adp.web.casino.edictCasino', 'de.adp.web.gui.gameGui', 'de.adp.web.input.keyboardInputHandler', 'de.adp.web.input.keyboardToGameActionTranslator', 'de.adp.web.gui.elements.button', 'de.adp.web.gui.elements.clock', 'de.adp.web.controller.playCommand', 'de.adp.web.controller.gameActionIDs', "de.adp.web.controller.resizeCommand", 'de.adp.web.controller.autoSpinAmountChangedCommand', 'de.adp.web.controller.toggleFullscreenCommand', 'de.adp.web.controller.toggleSoundCommand', 'de.adp.web.controller.enableSoundCommand', 'de.adp.web.controller.disableSoundCommand', 'de.adp.web.controller.freegame.switchToFreeCommand', 'de.adp.web.controller.freegame.retriggerFreegameCommand', 'de.adp.web.controller.freegame.switchToNormalCommand', 'de.adp.web.controller.freegame.switchToFreeFinishedCommand', 'de.adp.web.controller.freegame.switchToNormalFinishedCommand', 'de.adp.web.controller.freegame.resumeToFreeCommand', 'de.adp.web.controller.gameFlow.proceedGameCommand', 'de.adp.web.controller.gameFlow.startNewRoundCommand', 'de.adp.web.controller.gameFlow.skipAllReelsCommand', 'de.adp.web.controller.gameFlow.delayNewRoundCommand', 'de.adp.web.controller.closeOpenMenuCommand', 'de.adp.web.controller.updatePaytableCommand', 'de.adp.web.controller.logToPaytableCommand', 'de.adp.web.controller.showLogInPaytableCommand', 'de.adp.web.controller.hideLogInPaytableCommand', 'de.adp.web.controller.updatePaytableInitDataCommand', 'de.adp.web.notifications.notification', 'de.adp.web.controller.collectCommand', 'de.adp.web.controller.collectAndSpinCommand', 'de.adp.web.controller.updateButtonsCommand', 'de.adp.web.autoplay.expertAutoplay', 'de.adp.web.paytable.paytable', 'de.adp.web.paytable.paytableIDs', 'de.adp.web.addonGame.riskLadder.riskLadderGui', 'de.adp.web.addonGame.riskCards.riskCardGuiCanvas', 'de.adp.web.addonGame.riskLadder.controller.startRiskLadderCommand', 'de.adp.web.addonGame.riskLadder.controller.resumeRiskLadderCommand', 'de.adp.web.addonGame.riskCards.controller.switchToRiskCardsCommand', 'de.adp.web.addonGame.riskCards.controller.resumeRiskCardsCommand', 'de.adp.web.addonGame.riskCards.controller.stopRiskCardsCommand', 'de.adp.web.autoplay.controller.proceedAutoPlayCommand', 'de.adp.web.autoplay.controller.stopAutoPlayCommand', 'de.adp.web.autoplay.controller.pauseAutoPlayCommand', 'de.adp.web.autoplay.controller.toggleAutoPlayMenuCommand', 'de.adp.web.controller.wager.betChangeCommand', 'de.adp.web.controller.wager.raiseBetToMaxCommand', 'de.adp.web.controller.wager.raiseBetCommand', 'de.adp.web.controller.wager.raiseLinesCommand', 'de.adp.web.controller.gameFlow.resumeGameCommand', "de.adp.web.controller.enableHardwareControlsCommand", "de.adp.web.controller.disableHardwareControlsCommand", "de.adp.web.controller.closeGameCommand", "de.adp.web.autoplay.controller.startAutoPlayCommand", "de.adp.web.autoplay.controller.increaseAutoplayStepsCommand", 'de.adp.web.dtos.response', 'de.adp.web.autoplay.fakeAutoplay', 'de.adp.web.utils.randomGenerator', 'de.adp.web.gui.settings.desktop.coinSelector', 'de.adp.web.gui.settings.desktop.lineSelector', 'de.adp.web.utils.inactivityTimer', 'de.adp.web.gui.settings.desktop.autoSpinSelector', "de.adp.web.autoplay.conditionViews.abortAtWinCondition", "de.adp.web.autoplay.conditionViews.totalLossCondition", "de.adp.web.autoplay.conditionViews.singleSpinWinAmountCondition", 'de.adp.web.input.hardwareButtonToGameActionTranslator', "de.adp.terminal.terminalConnector", "de.adp.terminal.terminalGUI", "de.adp.web.controller.switchExternalPaytableAppearanceCommand", "de.adp.terminal.logLayer", "de.adp.web.paytable.external.healthTimer", 'de.adp.web.turbospin.turboSpinHandler').defines(function() {
    GameFacade = ig.Class.extend({
        root: null,
        casino: null,
        lastResponse: null,
        gameGui: null,
        addOnGames: {},
        coinStepper: null,
        lineStepper: null,
        autoPlay: null,
        animationsInProgress: false,
        activeAddonGame: null,
        commands: null,
        notificationInterests: null,
        addOnGamesProvider: null,
        currentGameMode: "NORMAL",
        currentGameRoundPhase: "REQUESTING_RESPONSE",
        collectTimeout: null,
        collectTimeoutPaused: false,
        clock: null,
        paused: false,
        expertView: null,
        spaceBarActive: false,
        settingsButton: {},
        inputHandler: null,
        turboSpinHandler: null,
        initResponse: null,
        init: function(casino, root) {
            this.bindFunctionsToClass();
            this.casino = casino;
            this.initResponse = this.casino.networkProvider.lastResult;
            this.casino.resourceProvider.translateHTMLTags();
            this.root = root;
            this.commands = {};
            this.inputHandler = this.createInputHandler(this.createInputTranslator());
            this.turboSpinHandler = this.createTurboSpinHandler();
            this.notificationInterests = {};
            this.gameGui = this.createGameGui();
            this.gameGui.setFacade(this);
            if (this.casino.getCasinoConfiguration("ENABLE_AUTOPLAY") === true) {
                this.autoPlay = this.createAutoPlay(casino);
                if (this.casino.getCasinoConfiguration("SHOW_AUTOPLAY_CONTROL") === false) {
                    $("#autoSpinSelectorContainer").remove();
                }
            } else {
                this.autoPlay = new FakeAutoplay(this, casino);
            }
            this.casino.resourceProvider.registerTranslatableObject(this.autoPlay);
            this.addOnGamesProvider = new AddonGamesProvider(this);
            this.createCommands();
            this.registerAddonGames();
            this.createButtons();
            this.createSettings();
            if (this.casino.getCasinoConfiguration('AUTOPLAY_EXPERTMODE')) {
                this.createAutoplayConditions();
                this.createGameSpecificAutoplayConditions();
            }
            if (ig.ua.terminal) {
                this.setUpForTerminal();
                this.casino.displayProvider.terminalGUI = this.terminalGUI;
            }
            InactivityTimer.game = this;
            InactivityTimer.delay = this.casino.getCasinoConfiguration("GAME_TIMEOUT_IN_SECONDS") * 1000;
            InactivityTimer.descisionTime = 60000;
            InactivityTimer.casino = this.casino;
            InactivityTimer.game = this;
            InactivityTimer.reset();
            let coinValues = this.cropCoinsIfNecessary(this.casino.networkProvider.lastResult.coins());
            this.coinStepper.setCoins(coinValues);
            let activeCoin = this.cropActiveCoinIfNecessary(this.coinStepper.activeCoinValue);
            this.casino.displayProvider.updateBetSumDisplay(activeCoin);
            this.lineStepper.setLines(this.casino.networkProvider.lastResult.wagerPositionSets());
            this.inputHandler.lineChangePossible = (this.lineStepper.availableLineSets.length > 1);
            if (this.lineStepper.availableLineSets.length > 1) {
                this.coinStepper.setLineSelectionPossibleTo(true);
                this.coinStepper.translate(this.casino.resourceProvider);
            } else if (this.lineStepper.availableLineSets.length === 1) {
                $("#lineSelectorButton").css('visibility', 'hidden');
                $("#lineSelectorContainer").css('display', 'none');
            }
            this.setInitialWager();
            this.initalBetSetting(this.lineStepper.getActiveLines());
            this.gameGui.initializePaytableWithSmallestStake();
            this.gameGui.initializePaytableWithBiggestStake();
            this.casino.displayProvider.setWinSumDisplayTo(0);
            $("#audioActive").on('change', this.handleLoadAudio);
            if (this.casino.getCasinoConfiguration("SHOW_TIME_DISPLAY")) {
                this.clock = new Clock("clock-desktop desktopGameMenu-clock");
                $(".clock-area").append(this.clock.getView());
            } else {
                $("#clockWrapper").hide();
            }
            this.casino.displayProvider.showWinZone(false);
            this.setInitialResultData(this.casino.networkProvider.lastResult);
            $("#main").on(ig.system.touchEvents, this.onActivity);
            if (this.isJackpotEnabled()) {}
        },
        cropCoinsIfNecessary: function(coins) {
            if (this.casino.getMaxAllowedBetSize() <= 0) {
                return coins;
            }
            let croppedCoins = [];
            let maxAllowedCoinSize = this.getMaxAllowedCoinSize();
            for (let i = 0; i < coins.length; i++) {
                if (coins[i] <= maxAllowedCoinSize) {
                    croppedCoins.push(coins[i]);
                }
            }
            return croppedCoins;
        },
        cropActiveCoinIfNecessary: function(coin) {
            if (this.casino.getMaxAllowedBetSize() <= 0) {
                return coin;
            }
            if (coin > this.getMaxAllowedCoinSize()) {
                return this.coinStepper.getBiggestCoinValue();
            }
        },
        getMaxAllowedCoinSize() {
            let maxAllowedCoinSize = this.casino.getMaxAllowedBetSize();
            let numberOfSelectableLines = this.casino.networkProvider.lastResult.wagerPositionSets().length;
            if (numberOfSelectableLines > 1) {
                maxAllowedCoinSize = maxAllowedCoinSize / numberOfSelectableLines;
            }
            return maxAllowedCoinSize;
        },
        isJackpotEnabled: function() {
            return false;
        },
        setInitialWager: function() {
            var betParams = this.casino.networkProvider.lastResult.getClientSettings();
            var coinValue = -1;
            var lineValue = -1;
            if (betParams) {
                coinValue = betParams.coin;
                lineValue = betParams.countOfActiveWagerPositions;
            }
            if (coinValue > 0) {
                this.coinStepper.setSelectedCoin(coinValue);
            }
            if (lineValue > 0) {
                this.lineStepper.setActiveLines(lineValue);
            }
        },
        setUpForTerminal: function() {
            this.terminalConnector = new TerminalConnector(this);
            this.terminalConnector.broadcastGameStart("adp_" + this.getGameId());
            this.terminalConnector.broadCastOpen2ndScreen(this.getURL() + "paytable.html");
            this.terminalGUI = new TerminalGUI(this, "#main");
            this.gameGui.registerResizableObject(this.terminalGUI);
            this.createTerminalCommands();
            ig.logger.facade = this;
            this.logLayer = new LogLayer();
            this.gameGui.sceneManager.getActiveScene().addChild(this.logLayer);
            HealthTimer.failureCallback = this.onExternalPaytableConnectionLost;
        },
        createInputHandler: function(translator) {
            return new KeyboardInputHandler(this, translator);
        },
        createTurboSpinHandler: function() {
            return new TurboSpinHandler(this);
        },
        isTurboAllowed: function() {
            return SpinDelayTimer.getMinimalSpinDuration(this.casino, this) <= 200 && this.casino.getCasinoConfiguration("ENABLE_QUICKSPIN") && this.casino.getCasinoConfiguration("ENABLE_SKIP_REELSPIN");
        },
        createInputTranslator: function() {
            if (ig.ua.terminal) {
                return new HardwareButtonToGameActionTranslator();
            }
            return new KeyboardToGameActionTranslator();
        },
        createAutoPlay: function(casino) {
            return new ExpertAutoplay(this, casino);
        },
        getURL: function() {
            var url = window.location.href;
            return url.replace("index-mobile.html", "");
        },
        onActivity: function() {
            InactivityTimer.reset();
        },
        zoom: 1,
        bindFunctionsToClass: function() {
            this.onActivity = this.onActivity.bind(this);
            this.onPlayButtonPressed = this.onPlayButtonPressed.bind(this);
            this.onSkipButtonPressed = this.onSkipButtonPressed.bind(this);
            this.onCollectButtonPressed = this.onCollectButtonPressed.bind(this);
            this.onCollectAndSpinButtonPressed = this.onCollectAndSpinButtonPressed.bind(this);
            this.handleLoadAudio = this.handleLoadAudio.bind(this);
            this.audioLoadedSuccessful = this.audioLoadedSuccessful.bind(this);
            this.handleBetChange = this.handleBetChange.bind(this);
            this.resumeGame = this.resumeGame.bind(this);
            this.raiseBetToMax = this.raiseBetToMax.bind(this);
            this.hideOpenSelectors = this.hideOpenSelectors.bind(this);
            this.sendDataToExternalPaytable = this.sendDataToExternalPaytable.bind(this);
            this.paytableHealthCheck = this.paytableHealthCheck.bind(this);
            this.onExternalPaytableConnectionLost = this.onExternalPaytableConnectionLost.bind(this);
            this.preventScaling = this.preventScaling.bind(this);
            $(window).resize(this.preventScaling);
        },
        preventScaling: function() {
            var zoomNew = document.documentElement.clientWidth / window.innerWidth;
            if (this.zoom != zoomNew) {
                this.zoom = zoomNew;
                $(window).css("transform", "scale(1)");
            }
        },
        setInitialResultData: function(response) {
            if (!(response instanceof InitResponse)) {
                this.lastResponse = new ActionResponse(response);
            } else {
                this.lastResponse = response;
            }
            this.sendNotification("BET_CHANGED", true);
            this.animationsInProgress = true;
            this.casino.displayProvider.updateDepotDisplay(this.casino.depotProvider.getDepotBalanceForDisplay(), this.casino.depotProvider.getLimitedDepotBalance());
            this.gameGui.setInitialResult(this.lastResponse, this.lastResponse.nextGameFlowName);
            if (ig.ua.terminal) {
                this.sendDataToExternalPaytable();
            }
        },
        draw: function() {
            this.gameGui.draw();
            if (this.getActiveAddonGame() !== undefined && this.getActiveAddonGame() !== null && this.getActiveAddonGame().isUsingCanvas()) {
                this.getActiveAddonGame().draw();
            }
        },
        update: function() {
            if (!this.paused) {
                if (this.clock !== null) {
                    this.clock.update();
                }
                this.gameGui.update();
                if (this.getActiveAddonGame() !== undefined && this.getActiveAddonGame() !== null) {
                    this.getActiveAddonGame().update();
                }
                this.inputHandler.update();
            } else {
                var paytableVisible = false;
                if (this.gameGui.paytable) {
                    paytableVisible = this.gameGui.paytable.visible;
                }
                if (paytableVisible && this.currentGameRoundPhase == "PLACE_BETS") {
                    this.inputHandler.update();
                }
            }
            if (ig.input.pressed('skipReel')) {
                document.getElementById("canvas").focus();
            }
            if (ig.ua.terminal && ig.input.pressed('winTest')) {
                this.terminalGUI.toggleWinTest();
            }
            if (ig.ua.terminal && ig.input.pressed('log')) {
                this.terminalGUI.toggleLog();
            }
        },
        isSafeToPressKey: function() {
            "use strict";
            return false;
        },
        registerAddonGames: function() {
            var riskCards = {};
            riskCards = new RiskCardGuiCanvas(this.casino, this);
            this.addOnGames[riskCards.GAME_ID] = riskCards;
            var riskLadder = new RLGui("riskladder-container", "riskChoice", this, this.casino);
            this.gameGui.registerResizableObject(riskLadder);
            riskLadder.deactivate();
            this.addOnGames[riskLadder.GAME_ID] = riskLadder;
            this.registerCutomAddonGames();
        },
        registerCutomAddonGames: function() {},
        getActiveAddonGame: function() {
            return this.addOnGames[this.activeAddonGame];
        },
        hardwareControlsEnabled: function() {
            "use strict";
            return this.spaceBarActive;
        },
        createGameGui: function() {
            throw "Needs to be implemented by Subclass";
        },
        getGameId: function() {
            throw "getGameId: Implement this so it returns the id of the game";
        },
        createSettings: function() {
            this.lineStepper = new LineSelector("linePicker", "#main", this.handleBetChange);
            $("#lineSelectorButton").on(ig.touchEvents, this.hideOpenSelectors);
            this.coinStepper = new CoinSelector("coinPicker", "#main", this.handleBetChange);
            this.gameGui.registerResizableObject(this.coinStepper);
            $("#coinSelectorButton").on(ig.touchEvents, this.hideOpenSelectors);
            $('#maxBetButton').on(ig.touchEvents, this.raiseBetToMax);
            if (ig.ua.mobile) {
                this.settingsButton = new Button("settings", "settings", this.openMobileSettings);
                $("#support-game-controls").append(this.settingsButton);
            }
        },
        createAutoplayConditions: function() {
            if (this.casino.getCasinoConfiguration("AUTOPLAY_LOSSLIMIT_ENABLED")) {
                var atLossCondition = new TotalLossCondition(this);
                this.autoPlay.registerAbortCondition(atLossCondition);
                this.casino.resourceProvider.registerTranslatableObject(atLossCondition);
            }
            if (this.casino.getCasinoConfiguration("AUTOPLAY_WINLIMIT_ENABLED")) {
                var atWinCondition = new SingleSpinWinAmountCondition(this);
                this.autoPlay.registerAbortCondition(atWinCondition);
                this.casino.resourceProvider.registerTranslatableObject(atWinCondition);
            }
        },
        createGameSpecificAutoplayConditions: function() {},
        openMobileSettings: function() {
            $("#mobile-menu").panel('open');
        },
        autoplayConfigurationOpen: function() {
            "use strict";
            return $('.expertautoplay-container').css('display') !== 'none';
        },
        hideOpenSelectors: function() {
            if (this.coinStepper !== null && $('#coinWrapper').css('display') !== 'none') {
                this.coinStepper.hide();
            }
            if (this.autoPlay !== null && $('#autoSpinWrapper').css('display') !== 'none') {
                this.autoPlay.getAutoSpinSelector().hideAutoplay();
            }
            if (this.lineStepper !== null && $('#lineWrapper').css('display') !== 'none') {
                this.lineStepper.hide();
            }
            if ($('#volumeWrapper').css('display') !== 'none') {
                this.gameGui.hideVolumeSlider();
            }
        },
        initalBetSetting: function() {
            this.gameGui.updateLineContainer(this.lineStepper.getActiveLines());
        },
        raiseBetToMax: function() {
            this.sendNotification("RAISE_BET_TO_MAX");
        },
        hoverTouchUnstick: function() {
            if ('ontouchstart' in document.documentElement) {
                for (var sheetI = document.styleSheets.length - 1; sheetI >= 0; sheetI--) {
                    var sheet = document.styleSheets[sheetI];
                    if (sheet.cssRules) {
                        for (var ruleI = sheet.cssRules.length - 1; ruleI >= 0; ruleI--) {
                            var rule = sheet.cssRules[ruleI];
                            if (rule.selectorText) {
                                rule.selectorText = rule.selectorText.replace(":hover", ":active");
                            }
                        }
                    }
                }
            }
        },
        handleBetChange: function() {
            this.sendNotification("BET_CHANGED", true);
        },
        createButtons: function() {
            var playBtn, collectBtn, skipBtn, collectAndSpinBtn, placeHolderBtn;
            if (ig.ua.mobile) {
                playBtn = new Button("PLAY", "PLAY", this.onPlayButtonPressed);
                skipBtn = new Button("SKIP", "PLAY", this.onSkipButtonPressed);
                collectAndSpinBtn = new Button("COLLECT_AND_SPIN", "PLAY", this.onCollectAndSpinButtonPressed);
                collectBtn = new Button("FINISH_GAME", "FINISH_GAME", this.onCollectButtonPressed);
            } else {
                playBtn = new Button("PLAY", "button-desktop button-desktop-idle button-desktop-play", this.onPlayButtonPressed, "ButtonCaption_PLAY");
                collectAndSpinBtn = new Button("COLLECT_AND_SPIN", "button-desktop button-desktop-idle button-desktop-play", this.onCollectAndSpinButtonPressed, "ButtonCaption_PLAY");
                skipBtn = new Button("SKIP", "button-desktop button-desktop-idle button-desktop-play", this.onSkipButtonPressed, "ButtonCaption_PLAY");
                collectBtn = new Button("FINISH_GAME", "button-desktop button-desktop-idle button-desktop-collect", this.onCollectButtonPressed, "ButtonCaption_COLLECT");
                placeHolderBtn = new Button("PLACE_HOLDER", "button-desktop button-desktop-idle button-desktop-play", this.onPlayButtonPressed, "ButtonCaption_PLAY");
                placeHolderBtn.disable();
                placeHolderBtn._view.css("visibility", "hidden");
                this.casino.buttonProvider.registerButton(placeHolderBtn);
            }
            this.casino.buttonProvider.registerButton(collectAndSpinBtn);
            this.casino.buttonProvider.registerButton(collectBtn);
            this.casino.buttonProvider.registerButton(playBtn);
            this.casino.buttonProvider.registerButton(skipBtn);
        },
        createCommands: function() {
            var proceedGameCommand = new ProceedGameCommand(this);
            var startNewRoundCommand = new StartNewRoundCommand(this);
            var resumeGameCommand = new ResumeGameCommand(this);
            var playCommand = new PlayCommand(this);
            var skipAllReelsCommand = new SkipAllReelsCommand(this);
            var collectCommand = new CollectCommand(this);
            var collectAndSpinCommand = new CollectAndSpinCommand(this);
            var freegameSwitchCommand = new SwitchToFreeCommand(this);
            var freegameExitCommand = new SwitchToNormalCommand(this);
            var freegameSwitchFinishedCommand = new SwitchToFreeFinishedCommand(this);
            var freegameExitFinishedCommand = new SwitchToNormalFinishedCommand(this);
            var retriggerFreegamesCommand = new RetriggerFreegameCommand(this);
            var resumeFreegamesCommand = new ResumeToFreeCommand(this);
            var proceedAutoPlayCommand = new ProceedAutoplayCommand(this);
            var stopAutoPlayCommand = new StopAutoplayCommand(this);
            var startAutoPlayCommand = new StartAutoplayCommand(this);
            var pauseAutoPlayCommand = new PauseAutoplayCommand(this);
            var toggleAutoPlayMenuCommand = new ToggleAutoPlayMenuCommand(this);
            var switchToRiskLadder = new StartRiskLadderCommand(this);
            var switchToRiskCards = new SwitchToRiskCardsCommand(this);
            var resumeRiskLadder = new ResumeRiskLadderCommand(this);
            var resumeRiskCards = new ResumeRiskCardsCommand(this);
            var updateButtonsCommand = new UpdateButtonsCommand(this);
            var autoSpinsChangedCommand = new AutoSpinAmountChangedCommand(this);
            var increaseAutoplayStepsCommand = new IncreaseAutoplayStepsCommand(this);
            var delayNewRoundCommand = new DelayNewRoundCommand(this);
            var betChangeCommand = new BetChangeCommand(this, this.gameGui);
            var raiseBetToMaxCommand = new RaiseBetToMaxCommand(this, this.gameGui);
            var raiseBetCommand = new RaiseBetCommand(this);
            var raiseLinesCommand = new RaiseLinesCommand(this);
            var gameSizeChanged = new ResizeCommand(this);
            var toggleFullScreenCommand = new ToggleFullscreenCommand(this);
            var toggleSoundCommand = new ToggleSoundCommand(this);
            var enableSoundCommand = new EnableSoundCommand(this);
            var disableSoundCommand = new DisableSoundCommand(this);
            var closeGameCommand = new CloseGameCommand(this);
            var closeOpenMenus = new CloseOpenMenuCommand(this);
            this.registerCommand("BET_CHANGED", betChangeCommand);
            this.registerCommand(GameActionIDs.RAISE_BET_TO_MAX, raiseBetToMaxCommand);
            this.registerCommand(GameActionIDs.RAISE_BET, raiseBetCommand);
            this.registerCommand(GameActionIDs.RAISE_LINES, raiseLinesCommand);
            this.registerCommand("GAME_SIZE_CHANGED", gameSizeChanged);
            this.registerCommand('CLOSE_ALL_OPEN_MENUS', closeOpenMenus);
            this.registerCommand(GameActionIDs.PLAY, playCommand);
            this.registerCommand(GameActionIDs.SKIP, skipAllReelsCommand);
            this.registerCommand(GameActionIDs.COLLECT, collectCommand);
            this.registerCommand(GameActionIDs.COLLECT_AND_SPIN, collectAndSpinCommand);
            this.registerCommand(GameActionIDs.TOGGLE_FULLSCREEN, toggleFullScreenCommand);
            this.registerCommand(GameActionIDs.TOGGLE_SOUND, toggleSoundCommand);
            this.registerCommand(GameActionIDs.ENABLE_SOUND, enableSoundCommand);
            this.registerCommand(GameActionIDs.DISABLE_SOUND, disableSoundCommand);
            this.registerCommand(GameActionIDs.TOGGLE_AUTOPLAY_MENU, toggleAutoPlayMenuCommand);
            this.registerCommand(GameActionIDs.CLOSE_GAME, closeGameCommand);
            this.registerCommand(LadderActionIDs.LAUNCH_LADDER, switchToRiskLadder);
            this.registerCommand("RESUME_RISKLADDER", resumeRiskLadder);
            this.registerCommand(BlackredActionIDs.LAUNCH_BLACKRED, switchToRiskCards);
            this.registerCommand("RESUME_RISKCARDS", resumeRiskCards);
            this.registerCommand("FREEGAME_DETECTED", freegameSwitchCommand);
            this.registerCommand("FREEGAME_RETRIGGER_DETECTED", retriggerFreegamesCommand);
            this.registerCommand("FREEGAME_END_DETECTED", freegameExitCommand);
            this.registerCommand("UNFINISHED_FREEGAME_DETECTED", resumeFreegamesCommand);
            this.registerCommand("SWITCH_TO_FREEGAME_ANIMATED", freegameSwitchFinishedCommand);
            this.registerCommand("EXIT_FREEGAME_ANIMATED", freegameExitFinishedCommand);
            this.registerCommand("RESULT_ANIMATION_FINISHED", proceedGameCommand);
            this.registerCommand("GAME_ROUND_FINISHED", startNewRoundCommand);
            this.registerCommand("MUST_DELAY_SPIN_BUTTON", delayNewRoundCommand);
            this.registerCommand("RESUME_RESULT_DETECTED", resumeGameCommand);
            this.registerCommand("UPDATE_BUTTONS", updateButtonsCommand);
            this.registerCommand("AUTOSPIN_AMOUNT_CHANGED", autoSpinsChangedCommand);
            this.registerCommand("PROCEED_AUTOPLAY", proceedAutoPlayCommand);
            this.registerCommand(GameActionIDs.STOP_AUTOPLAY, stopAutoPlayCommand);
            this.registerCommand(GameActionIDs.PAUSE_AUTOPLAY, pauseAutoPlayCommand);
            this.registerCommand(GameActionIDs.START_AUTOPLAY, startAutoPlayCommand);
            this.registerCommand(GameActionIDs.INCREASE_AUTOSPINS, increaseAutoplayStepsCommand);
            var disableHardwareControlsCommand = new DisableHardwareControlsCommand(this);
            var enableHardwareControlCommand = new EnableHardwareControlsCommand(this);
            this.registerCommand("DISABLE_HARDWARE_KEYS", disableHardwareControlsCommand);
            this.registerCommand("ENABLE_HARDWARE_KEYS", enableHardwareControlCommand);
        },
        createTerminalCommands: function() {
            var updatePaytable = new UpdatePaytableCommand(this);
            var switchPaytable = new SwitchExternalPaytableAppearanceCommand(this);
            var initiatePaytable = new UpdatePaytableInitDataCommand(this);
            var log = new LogToPaytableCommand(this);
            var showLog = new ShowLogInPaytableCommand(this);
            var hideLog = new HideLogInPaytableCommand(this);
            this.registerCommand(PaytableIDs.NOTIFICATION_UPDATE_PAYTABLE, updatePaytable);
            this.registerCommand(PaytableIDs.NOTIFICATION_SWITCH_APPEARANCE, switchPaytable);
            this.registerCommand(PaytableIDs.NOTIFICATION_INITIATE_PAYTABLE, initiatePaytable);
            this.registerCommand(PaytableIDs.LOG_TO_EXTERNAL_PAYTABLE, log);
            this.registerCommand(PaytableIDs.SHOW_LOG, showLog);
            this.registerCommand(PaytableIDs.HIDE_LOG, hideLog);
            this.updatePaytable = this.updatePaytable.bind(this);
            var interCom = Intercom.getInstance();
            interCom.on(PaytableIDs.DATA_FROM_EXTERNAL_PAYTABLE, this.updatePaytable);
            interCom.on(PaytableIDs.HEARTBEAT, this.paytableHealthCheck);
        },
        updatePaytable: function() {
            this.sendDataToExternalPaytable();
        },
        onPlayButtonPressed: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.sendNotification(GameActionIDs.PLAY);
        },
        onSkipButtonPressed: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.sendNotification(GameActionIDs.SKIP);
        },
        onCollectButtonPressed: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.sendNotification(GameActionIDs.COLLECT, true);
        },
        onCollectAndSpinButtonPressed: function(evt) {
            if (evt !== null && evt !== undefined) {
                evt.preventDefault();
            }
            this.sendNotification(GameActionIDs.COLLECT_AND_SPIN, true);
        },
        registerAutoPlayConditions: function() {},
        registerCommand: function(notificationName, command) {
            if (typeof(command) !== "undefined") {
                this.commands[notificationName] = command;
            }
        },
        removeCommand: function(notificationName) {
            delete this.commands[notificationName];
        },
        startChooseAddonGames: function(addonGamesToChoose) {
            this.sendNotification("UPDATE_BUTTONS");
        },
        stopAutoCollectTimer: function() {
            if (this.collectTimeout !== null) {
                clearTimeout(this.collectTimeout);
                this.collectTimeout = null;
            }
        },
        startGameFlow: function() {
            this.updatePaytable();
            if (this.lastResponse.responseType === "RECONSTRUCTION") {
                this.sendNotification("RESUME_RESULT_DETECTED", this.lastResponse);
                return;
            }
            $("#main").click();
            this.coinStepper.setCaptionForMainButton();
            this.gameGui.startGameFlow();
        },
        setResult: function(result, nextGameRoundPhase) {
            this.lastResponse = new ActionResponse(result);
            this.animationsInProgress = true;
            this.gameGui.setResult(this.lastResponse, this.lastResponse.nextGameFlowName);
            if (this.turboSpinHandler.isActive) {
                this.turboSpinHandler.performTurboSpin();
            }
        },
        setActiveAddonGame: function(addonGameId) {
            if (this.activeAddonGame === null) {
                this.activeAddonGame = addonGameId;
                if (!ig.ua.mobile) {
                    $('#autoSpinSelectorContainer').hide();
                } else {
                    $('#autoSpinSelectorContainer').css('visibility', 'hidden');
                }
            } else if (addonGameId === null) {
                this.gameGui.onAddonGameFinsih(this.activeAddonGame);
                this.activeAddonGame = addonGameId;
                if (!ig.ua.mobile) {
                    $('#autoSpinSelectorContainer').show();
                } else {
                    $('#autoSpinSelectorContainer').css('visibility', '');
                }
            } else {
                throw "Only one active addon game possible";
            }
        },
        onGameFinish: function(result) {
            this.lastResponse = new ActionResponse(result);
            this.gameGui.onGameFinish();
        },
        handleLoadAudio: function() {
            this.casino.soundPlayer.startLoadSound();
            this.casino.soundPlayer.toggleSound();
        },
        audioLoadedSuccessful: function() {
            ig.logger.log(Logger.LogLevel.INFO, "Soundfile loaded successful. Overwrite this method to do some crazy sound stuff");
        },
        pauseGame: function() {
            this.paused = true;
            this.gameGui.pauseGame();
            this.disableAutospinSelector();
            this.casino.buttonProvider.hideAllButtons();
            this.casino.soundPlayer.pauseAllAmbient();
            if (this.collectTimeout !== null) {
                this.stopAutoCollectTimer();
                this.collectTimeoutPaused = true;
            }
            if (this.getActiveAddonGame() !== undefined && this.getActiveAddonGame() !== null) {
                this.getActiveAddonGame().pauseGame();
            }
            this.inputHandler.pause();
        },
        resumeGame: function() {
            this.inputHandler.resume();
            this.paused = false;
            this.gameGui.resumeGame();
            if (this.collectTimeoutPaused) {
                this.collectTimeoutPaused = false;
                this.startChooseAddonGames([]);
            } else {
                this.sendNotification("UPDATE_BUTTONS");
            }
            if (this.getActiveAddonGame() !== undefined && this.getActiveAddonGame() !== null) {
                this.getActiveAddonGame().resumeGame();
            }
            this.casino.soundPlayer.resumeAmbientSound();
        },
        winAnimationFinished: function() {
            this.animationsInProgress = false;
        },
        sendNotification: function(notificationName, body) {
            var notification = new Notification(notificationName, body);
            if (typeof(notification) !== "undefined") {
                var command = this.commands[notificationName];
                if (typeof command !== "undefined") {
                    command.execute(notification);
                }
            }
            var listeners = this.notificationInterests[notificationName];
            if (typeof(listeners) !== "undefined" && Array.isArray(listeners)) {
                for (var i = 0; i < listeners.length; i++) {
                    listeners[i].handleNotification(notification);
                }
            }
        },
        registerForNotificationInterest: function(notificationName, listener) {
            var listeners = this.notificationInterests[notificationName];
            if (typeof(listeners) === "undefined" || !Array.isArray(listeners)) {
                this.notificationInterests[notificationName] = [];
                listeners = this.notificationInterests[notificationName];
            }
            if (listeners.indexOf(listener) === -1) {
                listeners.push(listener);
            }
        },
        removeFromNotificationInterest: function(notificationName, listener) {
            var listeners = this.notificationInterests[notificationName];
            if (typeof(listeners) !== "undefined" && Array.isArray(listeners)) {
                if (listeners.indexOf(listener) === -1) {
                    listeners.push(listener);
                }
            }
        },
        setCurrentGameRoundPhase: function(newPhase) {
            this.currentGameRoundPhase = newPhase;
            this.sendNotification("UPDATE_BUTTONS");
            if (ig.ua.terminal) {
                this.terminalConnector.sendStateToTerminal();
            }
        },
        enableBetting: function() {
            if (this.casino.betChangeEnabled()) {
                this.coinStepper.enable();
            } else {
                $("#coinSelectorButton").css('visibility', 'hidden');
            }
            if (this.lineStepper.availableLineSets.length > 1 && this.casino.lineChangeEnabled()) {
                this.lineStepper.enable();
            } else {
                $("#lineSelectorButton").css('visibility', 'hidden');
            }
            if (this.casino.maxBetEnabled()) {
                $("#maxBetButton").css("visibility", "visible");
                $("#maxBetButton").on(ig.touchEvents, this.raiseBetToMax);
                $("#maxBetButton").removeClass('button-desktop-deactivated');
                $("#maxBetButton").css("pointer-events", "auto");
            } else {
                $("#maxBetButton").css("visibility", "hidden");
            }
            if (this.casino.lineChangeEnabled() && this.casino.betChangeEnabled() && this.casino.maxBetEnabled())
                this.inputHandler.bindBetButtons();
        },
        disableBetting: function() {
            this.coinStepper.disable();
            if (this.lineStepper !== null) {
                this.lineStepper.disable();
            }
            $("#maxBetButton").off(ig.touchEvents);
            $("#maxBetButton").addClass('button-desktop-deactivated');
            $("#maxBetButton").css("pointer-events", "none");
            this.inputHandler.unbindBetButtons();
        },
        disableAutospinSelector: function() {
            this.autoPlay.getAutoSpinSelector().hideButton();
            this.inputHandler.unbindAutoplayButtons();
        },
        enableAutospinSelector: function() {
            this.inputHandler.bindAutoplayButtons();
            this.autoPlay.getAutoSpinSelector().showButton();
        },
        getTotalStake: function() {
            if (this.lineStepper.availableLineSets.length > 1) {
                return this.coinStepper.activeCoinValue * this.lineStepper.getActiveLines();
            } else {
                return this.coinStepper.activeCoinValue;
            }
        },
        getStakePerLine: function() {
            if (this.lineStepper.availableLineSets.length > 1) {
                return this.coinStepper.activeCoinValue;
            } else {
                return this.coinStepper.activeCoinValue / this.lineStepper.getActiveLines();
            }
        },
        getBiggestStake: function() {
            if (this.lineStepper.availableLineSets.length > 1) {
                return this.coinStepper.getBiggestCoinValue() * this.lineStepper.getActiveLines();
            } else {
                return this.coinStepper.getBiggestCoinValue();
            }
        },
        getBiggestStakePerLine: function() {
            if (this.lineStepper.availableLineSets.length > 1) {
                return this.coinStepper.getBiggestCoinValue();
            } else {
                return this.coinStepper.getBiggestCoinValue() / this.lineStepper.getActiveLines();
            }
        },
        getLowestStake: function() {
            if (this.lineStepper.availableLineSets.length > 1) {
                return this.coinStepper.getSmallestCoinValue() * this.lineStepper.getActiveLines();
            } else {
                return this.coinStepper.getSmallestCoinValue();
            }
        },
        getLowestStakePerLine: function() {
            if (this.lineStepper.availableLineSets.length > 1) {
                return this.coinStepper.getSmallestCoinValue();
            } else {
                return this.coinStepper.getSmallestCoinValue() / this.lineStepper.getActiveLines();
            }
        },
        showWinAnimation: function(show) {
            this.gameGui.showWinAnimation(show);
        },
        onGameSizeChanged: function() {
            this.sendNotification("GAME_SIZE_CHANGED");
        },
        hideSideBarMenu: function() {
            "use strict";
            $('#mobile-menu-container').css('display', 'none');
        },
        showSideBarMenu: function() {
            "use strict";
            $('#mobile-menu-container').css('display', '');
        },
        sendDataToExternalPaytable: function() {},
        paytableHealthCheck: function() {
            HealthTimer.reset();
        },
        onExternalPaytableConnectionLost: function() {
            this.terminalConnector.broadCastOpen2ndScreen(this.getURL() + "paytable.html");
        },
        isPaytableAllowed: function() {
            return this.activeAddonGame == null;
        },
        isHelpAllowed: function() {
            return this.activeAddonGame == null;
        },
        getMaxWinMultiplier: function() {
            return 0;
        },
        getRTP: function() {
            return "0";
        },
        getWinProbability: function() {
            return "1:1";
        },
        showRTP: function() {
            if (this.casino.mustShowRTP()) {
                let rtpCap = this.casino.resourceProvider.getString("rtp");
                let maxWinCap = this.casino.resourceProvider.getString("max_win_propability");
                let winProp = this.formatWinProbability(this.getWinProbability());
                this.casino.displayProvider.showMessage(rtpCap + ": " + this.getRTP() + "   " + maxWinCap + ": " + winProp);
            }
        },
        formatWinProbability: function(winProbability) {
            let seperator = currencyFormatter.currencyOptions.thousandSeparator;
            let to = this.casino.resourceProvider.getString("propability_seperator");
            let val = currencyFormatter.fillInThousandSeparators(winProbability + "", seperator);
            if (this.casino.portal.getLocale() === "de") {
                to = " zu ";
            }
            return "1" + to + val;
        },
        getMinimalGameRunDurationToReachAverageGameRunDuration(averageGameRunDuration) {
            return this.casino.getCasinoConfiguration("MINIMAL_GAMERUN_DURATION");
        }
    });
});

// ../private/client/controller/customPlayForFreeCommand.js 
ig.baked = true;
ig.module('client.controller.customPlayForFreeCommand').requires('impact.impact', 'de.adp.web.data.requestBuilder').defines(function() {
    CustomPlayForFreeCommand = ig.Class.extend({
        facade: null,
        reqBuilder: null,
        init: function(facade) {
            this.reqBuilder = new RequestBuilder();
            this.resultRecieved = this.resultRecieved.bind(this);
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            this.facade.setCurrentGameRoundPhase("REQUESTING_RESPONSE");
            this.facade.gameGui.winAnimation.clean();
            var requestString = this.reqBuilder.createRequestStringWithParams(0, 0, {
                SELECTED_SYMBOL: this.facade.gameGui.SELECTED_SYMBOL
            });
            this.facade.gameGui.lineContainer.showAllLines(false, true);
            this.facade.casino.networkProvider.send(requestString, this.resultRecieved);
        },
        resultRecieved: function(resultData) {
            this.facade.setCurrentGameRoundPhase("ANIMATING_RESPONSE");
            if (typeof resultData === "string") {
                var parsedData = JSON.parse(resultData);
                this.facade.setResult(parsedData);
            } else {
                this.facade.setResult(resultData);
            }
        }
    });
});

// ../private/client/controller/customSwitchToFreeFinishedCommand.js 
ig.baked = true;
ig.module('client.controller.customSwitchToFreeFinishedCommand').requires('impact.impact', 'client.controller.customPlayForFreeCommand').defines(function() {
    CustomSwitchToFreeFinishedCommand = ig.Class.extend({
        facade: null,
        init: function(facade) {
            this.execute = this.execute.bind(this);
            if (typeof(facade) !== "undefined") {
                this.facade = facade;
            } else {
                throw "Facade is not initialized";
            }
        },
        execute: function(notification) {
            this.facade.removeCommand("PLAY");
            var command = new CustomPlayForFreeCommand(this.facade);
            this.facade.registerCommand("PLAY", command);
            this.facade.currentGameMode = "FREE_GAME";
            this.facade.sendNotification("RESULT_ANIMATION_FINISHED", this.facade.lastResponse);
        }
    });
});
jQuery.expr[':'].regex = function(elem, index, match) {
    var matchParams = match[3].split(','),
        validLabels = /^(data|css):/,
        attr = {
            method: matchParams[0].match(validLabels) ? matchParams[0].split(':')[0] : 'attr',
            property: matchParams.shift().replace(validLabels, '')
        },
        regexFlags = 'ig',
        regex = new RegExp(matchParams.join('').replace(/^s+|s+$/g, ''), regexFlags);
    return regex.test(jQuery(elem)[attr.method](attr.property));
};

// ../private/de/adp/web/autoplay/conditionViews/freegameCondition.js 
ig.baked = true;
ig.module("de.adp.web.autoplay.conditionViews.freegameCondition").requires("impact.impact", "de.adp.web.autoplay.conditionViews.basicAbortCondition").defines(function() {
    FreeGameCondition = BasicAbortCondition.extend({
        facade: null,
        init: function(facade, localeKey) {
            if (localeKey == null || localeKey == undefined) {
                localeKey = "at_next_freegames";
            }
            this.facade = facade;
            var isMan = facade.casino.getCasinoConfiguration("AUTOPLAY_FREESPINS_MANDATORY");
            this.parent("atFreegames", localeKey, isMan, false);
        },
        fulfilled: function(casino) {
            var resp = this.facade.casino.networkProvider.getLastResponse();
            if (resp.gameResult !== undefined && resp.gameResult._wonFreegames > 0) {
                return true;
            }
            return false;
        }
    });
});

// ../private/de/adp/web/gui/freeGameGui.js 
ig.baked = true;
ig.module('de.adp.web.gui.freeGameGui').requires('impact.impact', 'de.adp.web.payline.lineContainer', 'de.adp.web.reel.reelContainer', 'de.adp.web.symbol.symbol', 'de.adp.web.data.winnings', 'de.adp.web.payline.winLine', 'de.adp.web.gui.freegame.basicFreegameDisplay', 'de.adp.web.gui.freegame.basicFreegameCounter', 'de.adp.web.gui.freegame.basicSummaryDisplay', 'de.adp.web.payline.winLine', 'de.adp.web.gui.gameGui', "de.adp.web.autoplay.conditionViews.freegameCondition", 'impact.sceneManager').defines(function() {
    FreeGameGui = GameGui.extend({
        freegameDisplay: null,
        freegameCounter: null,
        freegameLineContainer: null,
        standardLineContainer: null,
        summaryDisplay: null,
        retriggerFreeGameDisplay: null,
        switchInAnimation: null,
        switchOutAnimation: null,
        retriggerAnimation: null,
        guiIsInFreeMode: false,
        init: function(casino) {
            this.parent(casino);
            this.freegameLineContainer = this.createFreegameLineContainer();
            this.switchAppearanceToFreegameFinished = this.switchAppearanceToFreegameFinished.bind(this);
            this.switchAppearanceToFreegameMode = this.switchAppearanceToFreegameMode.bind(this);
            this.switchAppearanceToNormalFinished = this.switchAppearanceToNormalFinished.bind(this);
            this.switchAppearanceToNormalMode = this.switchAppearanceToNormalMode.bind(this);
        },
        createFreegameDisplay: function() {
            return null;
        },
        createRetriggerFreegameDisplay: function() {
            return null;
        },
        createFreegameCounter: function() {
            throw "No freegame counter created in gameGui.";
        },
        createFreegameLineContainer: function() {
            "use strict";
            return this.lineContainer;
        },
        createSummaryDisplay: function() {
            return null;
        },
        createSwitchInAnimation: function() {
            throw "No switchInAnimation created in gameGui.";
        },
        createSwitchOutAnimation: function() {
            throw "No switchOutAnimation counter created in gameGui.";
        },
        createRetriggerAnimation: function() {
            throw "No retriggerAnimation created in gameGui.";
        },
        switchAppearanceToFreegameMode: function(triggerResponse, withAnimation) {
            this.guiIsInFreeMode = true;
            if (this.switchInAnimation === null) {
                this.switchInAnimation = this.createSwitchInAnimation();
                this.registerPausableObject(this.switchInAnimation);
            }
            this.switchInAnimation.callback = this.switchAppearanceToFreegameFinished;
            if (!withAnimation) {
                this.freegameCounter.showAvailableGames(this.facade.lastResponse.gameResult.freeGamesTotal);
            } else {
                this.freegameCounter.showAvailableGames(this.facade.lastResponse.gameResult.totalWonFreegames());
            }
            this.freegameCounter.showPlayedGames(1);
            if (withAnimation) {
                this.switchInAnimation.switchWithAnimation(triggerResponse);
            } else {
                this.switchInAnimation.switchImmediatly(triggerResponse);
            }
            var lcIndex = this.sceneManager.getActiveScene().getIndexOfChild(this.lineContainer);
            this.sceneManager.getActiveScene().removeChild(this.lineContainer);
            this.sceneManager.getActiveScene().addChildAt(this.freegameLineContainer, lcIndex);
            this.freegameLineContainer.showAllLines(false, true);
            this.winAnimation.addLineAndReelContainer(this.getActiveLineContainer(triggerResponse), this.reelContainer);
            this.paytable.switchToFree();
        },
        switchAppearanceToFreegameFinished: function() {
            this.facade.sendNotification("SWITCH_TO_FREEGAME_ANIMATED", this.facade.lastResponse);
        },
        switchAppearanceToNormalMode: function(triggerResponse, withAnimation) {
            this.guiIsInFreeMode = false;
            if (this.switchOutAnimation === null) {
                this.switchOutAnimation = this.createSwitchOutAnimation();
                this.registerPausableObject(this.switchOutAnimation);
            }
            this.switchOutAnimation.callback = this.switchAppearanceToNormalFinished;
            if (withAnimation) {
                this.switchOutAnimation.switchWithAnimation(triggerResponse);
            } else {
                this.switchOutAnimation.switchImmediatly(triggerResponse);
            }
            var lcIndex = this.sceneManager.getActiveScene().getIndexOfChild(this.freegameLineContainer);
            this.sceneManager.getActiveScene().removeChild(this.freegameLineContainer);
            this.sceneManager.getActiveScene().addChildAt(this.lineContainer, lcIndex);
            this.winAnimation.addLineAndReelContainer(this.getActiveLineContainer(triggerResponse), this.reelContainer);
            this.paytable.switchToNormal();
        },
        switchAppearanceToNormalFinished: function() {
            this.facade.sendNotification("EXIT_FREEGAME_ANIMATED", this.casino.networkProvider.getLastResponse());
        },
        getFreegameCounter: function() {
            if (this.freegameCounter === null) {
                this.freegameCounter = this.createFreegameCounter();
            }
            return this.freegameCounter;
        },
        getFreegameDisplay: function() {
            if (this.freegameDisplay === null) {
                this.freegameDisplay = this.createFreegameDisplay();
            }
            return this.freegameDisplay;
        },
        getSummaryDisplay: function() {
            if (this.summaryDisplay === null) {
                this.summaryDisplay = this.createSummaryDisplay();
            }
            return this.summaryDisplay;
        },
        getRetriggerFreegameDisplay: function() {
            if (this.retriggerFreegameDisplay === null) {
                this.retriggerFreegameDisplay = this.createRetriggerFreegameDisplay();
            }
            return this.retriggerFreegameDisplay;
        },
        onResultReceived: function(data, isReconstruction) {
            this.parent(data, isReconstruction);
            if (this.gameResult.freeGameRound > 0) {
                if (this.gameResult.totalWonFreegames() <= 0) {
                    this.freegameCounter.showAvailableGames(this.gameResult.freeGamesTotal);
                }
                this.freegameCounter.showPlayedGames(this.gameResult.freeGameRound);
            }
        },
        getMinimalSymbolCount: function() {
            if (this.facade.currentGameMode === "FREE_GAME") {
                return 0;
            }
            return this.parent();
        },
        getActiveLineContainer: function(response) {
            if (response === undefined) {
                response = this.casino.networkProvider.getLastResponse();
            }
            if (this.isInFreegameMode(response) && this.guiIsInFreeMode) {
                return this.freegameLineContainer;
            }
            return this.lineContainer;
        },
        isInFreegameMode: function(response) {
            var freegame = false;
            if (response.gameResult.freeGamesTotal > 0 || response.gameResult._wonFreegames > 0) {
                freegame = true;
            }
            if (response.gameResult.freeGamesTotal === 0 && response.gameResult._wonFreegames > 0) {
                freegame = false;
            }
            if (response.gameResult.freeGameRound >= response.gameResult.freeGamesTotal && response.gameResult._wonFreegames <= 0 && response.gameResult.freeGameRound > 0) {
                freegame = false;
            }
            return freegame;
        }
    });
});



// ../private/de/adp/web/gui/filters/outlineTextFilter.js 
ig.baked = true;
ig.module("de.adp.web.gui.filters.outlineTextFilter").requires("de.adp.web.gui.filters.textFilter").defines(function() {
    OutlineTextFilter = TextFilter.extend({
        _lineWidth: 1,
        _color: '#000',
        init: function(lineWidth, color) {
            this._lineWidth = lineWidth >= 0 ? lineWidth : 1;
            this._color = color || '#000';
        },
        apply: function(context, text, x, y, isSharper) {
            context.save();
            if (isSharper) {
                context.shadowBlur = this._lineWidth * ig.system.stageScale * 1.5;
                context.shadowColor = this._color;
                context.lineWidth = this._lineWidth * ig.system.stageScale;
            } else {
                context.lineWidth = this._lineWidth;
            }
            context.lineJoin = 'round'
            context.strokeStyle = this._color;
            context.strokeText(text, x, y);
            context.restore();
        },
        getAddedWidth: function(scaleFactor) {
            return this._lineWidth * scaleFactor;
        },
        getAddedHeight: function(scaleFactor) {
            return this._lineWidth * scaleFactor;
        },
    });
});

// ../private/de/adp/web/animation/adpWinNumber.js 
ig.baked = true;
ig.module('de.adp.web.animation.adpWinNumber').requires('impact.node', 'de.adp.web.gui.elements.textBox', 'de.adp.web.gui.filters.outlineTextFilter').defines(function() {
    AdpWinNumber = ig.Node.extend({
        ELEMENT_ID: "winNumber",
        START_Y: 200,
        MOVEMENT_SPEED: 10,
        font: null,
        text: "",
        visible: false,
        side: "left",
        fadeInIncrement: 0,
        fadeOutDecrement: 0,
        init: function(text, line, side, casino, settings) {
            this.text = casino.resourceProvider.getString("LINE") + " " + line.lineId + ": " + text;
            var textHeight = 26;
            this.textBox = new TextBox(0, 0, ig.system.realWidth, textHeight);
            this.textBox.setTextFormat(24, "Helvetica", "bold", "#ffff00", "center");
            this.textBox.addTextFilter(new OutlineTextFilter(3, '#000'));
            this.textBox.alpha = 0;
            if (line.lineId === 0) {
                this.text = "SCATTER: " + text;
            }
            this.textBox.setText(this.text);
            var y = Math.floor(ig.system.height - textHeight * 1.5);
            this.parent(0, y, settings);
            this.addChild(this.textBox);
        },
        setColor: function(color) {
            this.textBox.setTextFormat(24, "Helvetica", "bold", color, "center");
        },
        setTextFormat: function(formatString) {},
        update: function() {
            var newAlpha;
            if (!this.visible) {
                this.textBox.alpha = 0;
                return;
            }
            if (this.fadeInIncrement > 0) {
                newAlpha = this.textBox.alpha + this.fadeInIncrement;
                if (newAlpha >= 1) {
                    newAlpha = 1;
                    this.fadeInIncrement = 0;
                }
                this.textBox.setAlpha(newAlpha);
            } else if (this.fadeOutDecrement > 0) {
                newAlpha = this.textBox.alpha - this.fadeOutDecrement;
                if (newAlpha <= 0) {
                    this.fadeOutDecrement = 0;
                    newAlpha = 0;
                    this.visible = false;
                }
                this.textBox.setAlpha(newAlpha);
            } else {
                this.textBox.setAlpha(1);
            }
        },
        draw: function() {
            if (this.visible) {
                if (this.textBox._text !== this.text) {
                    this.textBox.setText(this.text);
                }
                this.textBox.draw();
            }
        },
        fadeIn: function(increment) {
            this.visible = true;
            this.textBox.isDirty = true;
            if (increment === undefined) {
                increment = 0.1;
            }
            this.fadeOutDecrement = 0;
            this.fadeInIncrement = increment;
        },
        fadeOut: function(decrement) {
            this.visible = false;
            this.textBox.hide();
            this.alpha = 0;
            if (decrement === undefined) {
                decrement = 0.1;
            }
            this.fadeInIncrement = 0;
            this.fadeOutDecrement = decrement;
        }
    });
});

// ../private/de/adp/web/utils/timer.js 
ig.baked = true;
ig.module("de.adp.web.utils.timer").requires("impact.impact").defines(function() {
    Timer = ig.Class.extend({
        timerId: 0,
        startTime: null,
        remainingTime: null,
        callback: null,
        isRunning: false,
        isPaused: false,
        init: function(callback, delay) {
            this.remainingTime = delay;
            this.callback = callback;
            this.finished = this.finished.bind(this);
            this.resume();
        },
        pause: function() {
            window.clearTimeout(this.timerId);
            this.isPaused = true;
            this.isRunning = false;
            this.remainingTime -= ig.system.now() - this.startTime;
        },
        resume: function() {
            this.isPaused = false;
            this.isRunning = true;
            this.startTime = ig.system.now();
            window.clearTimeout(this.timerId);
            this.timerId = window.setTimeout(this.finished, this.remainingTime);
        },
        finished: function() {
            window.clearTimeout(this.timerId);
            this.isRunning = false;
            this.isPaused = false;
            this.callback();
        },
        abort: function() {
            window.clearTimeout(this.timerId);
            this.isRunning = false;
            this.isPaused = false;
        }
    });
});

// ../private/de/adp/web/payline/standardWinAnimation.js 
ig.baked = true;
ig.module('de.adp.web.payline.standardWinAnimation').requires('impact.impact', 'de.adp.web.animation.adpWinNumber', 'de.adp.web.payline.winLine', 'de.adp.web.utils.timer', 'impact.node').defines(function() {
    StandardWinAnimation = ig.Node.extend({
        ANIMATING_LINES: "animating lines",
        ANIMATING_SUMMARY: "animating summary",
        ANIMATION_IDLE: "animation idling",
        ANIMATION_START_UP: "doing stuff before",
        ANIMATION_BELL: "doing the bell",
        state: "",
        playingSummarySound: "",
        ambientSoundDuringPresentationPossible: false,
        _idleLineWinCycleLength: 1000,
        availableSymbols: [],
        addWinCallback: undefined,
        finishCallback: undefined,
        darkeningLayer: null,
        lineGfxLayer: null,
        animationLayer: null,
        summary: false,
        animating: false,
        finished: false,
        casino: null,
        timeSinceAnimationStarted: 0,
        animationStartTime: 0,
        totalDurationInMilliseconds: 0,
        minimumAnimationLengthInMilliseconds: 500,
        singleAnimationLengthInMilliseconds: 0,
        winLines: [],
        registeredSounds: [],
        summarySounds: [],
        bellSounds: [],
        animations: [],
        highlights: [],
        currentAnimationIndex: 0,
        winNumber: null,
        runningAnimations: [],
        visible: false,
        lineContainer: null,
        reelContainer: null,
        pos: {
            x: 0,
            y: 0
        },
        offset: {
            x: 0,
            y: 0
        },
        x: 0,
        y: 0,
        gameResult: null,
        actionResponse: null,
        bellTimer: null,
        init: function(addWinCallback, finishCallback) {
            this.bellSoundFinished = this.bellSoundFinished.bind(this);
            this.addWinCallback = addWinCallback;
            this.finishCallback = finishCallback;
            this.lineGfxLayer = new ig.Node();
            this.lineGfxLayer.isRoot = true;
            this.animationLayer = new ig.Node();
            this.animationLayer.isRoot = true;
            this.lineGfxLayer.setPosition(0, 0);
            this.animationLayer.setPosition(0, 0);
        },
        addLineAndReelContainer: function(lineContainer, reelContainer) {
            this.lineContainer = lineContainer;
            this.reelContainer = reelContainer;
        },
        setAvailableSymbols: function(symbols) {
            this.availableSymbols = symbols;
        },
        buildWinningLines: function(response) {
            this.gameResult = response.gameResult;
            this.actionResponse = response;
            var wins = [];
            for (var i = 0; i < this.gameResult.winnings.length; i++) {
                var win = this.gameResult.winnings[i];
                if (!this.isWinLine(win)) {
                    continue;
                }
                var lineAni = new WinLine(this.casino);
                this.highlights.push(win.highlight);
                wins.push(win);
                var lineGfx = this.lineContainer.getWinLineById(win.lineId);
                lineAni.addLineGfx(lineGfx);
                lineAni.winSum = win.winSum;
                this.lineGfxLayer.addChild(lineAni.getLine());
                if (win.items.length > 0 && win.items !== undefined && win.items !== null) {
                    for (var e = 0; e < win.items.length; e++) {
                        var winItem = win.items[e];
                        var position = winItem.point;
                        var reel = this.reelContainer.getReelById(position.x);
                        var symbol = reel.getSymbolAtRow(position.y);
                        var winSymbol = this.getMostValuableAnimationForPosition(position, symbol);
                        winSymbol.pos.x = reel.position().x;
                        winSymbol.pos.y = symbol.pos.y + reel.position().y;
                        lineAni.addSymbol(winSymbol);
                        var border = lineGfx.getBorder().getClone();
                        border.pos.x = winSymbol.pos.x;
                        border.pos.y = winSymbol.pos.y;
                        lineAni.addBorder(border);
                    }
                    lineAni.addLineResult(win);
                    this.addLineAnimation(lineAni, win);
                }
            }
        },
        handleScatterWin: function(win) {},
        getMostValuableAnimationForPosition: function(position, symbol) {
            var curMaxValue = 0;
            var maxLineResult = null;
            var lineResult = null;
            var item = null;
            var maxItemID = 0;
            var lineCnt = this.gameResult.winnings.length;
            for (var i = 0; i < lineCnt; i++) {
                lineResult = this.gameResult.winnings[i];
                if (lineResult.winSum >= curMaxValue) {
                    var symCnt = lineResult.items.length;
                    for (var j = 0; j < symCnt; j++) {
                        item = lineResult.items[j];
                        if ((item.point.y === position.y) && (item.point.x === position.x)) {
                            curMaxValue = lineResult.winSum;
                            maxLineResult = lineResult;
                            maxItemID = item.symbolID;
                        }
                    }
                }
            }
            var animation = this.availableSymbols[symbol.getId()].getWinAnimation(maxLineResult, this.gameResult, position);
            return animation;
        },
        hideAnimationsUnderneathPosition: function(position, animationindex) {
            for (var i = 0; i < this.animations.length; i++) {
                if (i === animationindex) {
                    continue;
                }
                this.animations[i].symbols[position.x].visible = false;
            }
        },
        addLineAnimation: function(lineAnimation, winLine) {
            if (lineAnimation !== null && lineAnimation !== undefined) {
                this.animations.push(lineAnimation);
            }
            if (winLine !== null && winLine !== undefined) {
                this.winLines.push(winLine);
            }
        },
        skipAnimation: function() {
            if (this.finished || !this.isSkippingAllowed()) {
                return;
            }
            if (this.minimumAnimationLengthInMilliseconds < this.timeSinceAnimationStarted) {
                if (this.currentAnimationIndex < this.animations.length && !this.summary) {
                    this.casino.soundPlayer.stopAllEffects();
                    this.nextAnimation();
                } else if (this.currentAnimationIndex >= this.animations.length && !this.summary) {
                    this.startSummaryAnimation();
                }
                if (this.summary) {
                    this.singleAnimationLengthInMilliseconds = 0;
                    this.casino.soundPlayer.stopEffect(this.playingSummarySound);
                }
            }
        },
        isSkippingAllowed: function() {
            let averageGameRunDuration = this.casino.getCasinoConfiguration("AVERAGE_GAMERUN_DURATION");
            return averageGameRunDuration < 200;
        },
        addCasino: function(casino) {
            this.casino = casino || null;
        },
        draw: function() {
            if (this.visible) {
                this.lineGfxLayer.draw();
                for (var i = 0; i < this.runningAnimations.length; i++) {
                    this.runningAnimations[i].draw();
                }
                this.animationLayer.draw();
            }
        },
        update: function() {
            if (this.visible) {
                var now = ig.system.now();
                if (ig.input.pressed('skipReel') && !this.finished) {
                    this.skipAnimation();
                }
                switch (this.state) {
                    case this.ANIMATING_LINES:
                        this.timeSinceAnimationStarted = now - this.animationStartTime;
                        if (this.currentAnimationIndex < this.animations.length && this.timeSinceAnimationStarted >= this.singleAnimationLengthInMilliseconds) {
                            this.nextAnimation();
                        } else if (this.currentAnimationIndex >= this.animations.length) {
                            this.state = this.ANIMATING_SUMMARY;
                            this.startSummaryAnimation();
                        }
                        break;
                    case this.ANIMATING_SUMMARY:
                        this.timeSinceAnimationStarted = now - this.animationStartTime;
                        if (this.timeSinceAnimationStarted >= this.singleAnimationLengthInMilliseconds) {
                            this.state = this.ANIMATION_IDLE;
                            if (this.runningAnimations.length === 1) {
                                this.runningAnimations[this.currentAnimationIndex].showWinAmount(true);
                            }
                            if (!this.ambientSoundDuringPresentationPossible) {
                                this.casino.soundPlayer.resumeAmbientSound();
                            }
                            this.finishCallback();
                        }
                        break;
                    case this.ANIMATION_IDLE:
                        if (this.runningAnimations.length > 1) {
                            this.handleIdleUpdate();
                        }
                        break;
                    case this.ANIMATION_START_UP:
                        break;
                    case this.ANIMATION_BELL:
                        break;
                    default:
                }
                for (var h = 0; h < this.runningAnimations.length; h++) {
                    this.runningAnimations[h].update();
                    this.lineGfxLayer.update();
                }
                this.animationLayer.update();
            }
        },
        enableLine: function(line) {
            line.showLine(true);
            line.showWinAmount(true);
        },
        disableLine: function(line) {
            line.showLine(false);
            line.showWinAmount(false);
        },
        handleIdleUpdate: function() {
            var now = ig.system.now();
            if (this.timeSinceAnimationStarted > this._idleLineWinCycleLength) {
                this.timeSinceAnimationStarted = 0;
                this.animationStartTime = now;
                this.showNexWinLineAmount();
            }
            this.timeSinceAnimationStarted = now - this.animationStartTime;
        },
        showNexWinLineAmount: function() {
            this.runningAnimations[this.currentAnimationIndex].showWinAmount(false);
            this.currentAnimationIndex++;
            if (this.currentAnimationIndex >= this.animations.length) {
                this.currentAnimationIndex = 0;
            }
            this.runningAnimations[this.currentAnimationIndex].showWinAmount(true);
        },
        beginAnimation: function(darkeningLayer) {
            if (typeof darkeningLayer !== "undefined" && darkeningLayer !== null) {
                this.darkeningLayer = darkeningLayer;
            }
            if (this.isBellSoundNecessary()) {
                let snd = this.determineBellSound(this.gameResult, this.lineContainer.numberOfActiveLines);
                if (snd !== null) {
                    this.casino.soundPlayer.pauseAllAmbient();
                    this.state = this.ANIMATION_BELL;
                    this.bellTimer = new Timer(this.bellSoundFinished, this.casino.soundPlayer.getSoundLengthInMilliSeconds(snd.sndID));
                    this.casino.soundPlayer.playEffect(snd.sndID);
                    return;
                }
            }
            this.startAnimation(darkeningLayer);
        },
        bellSoundFinished: function() {
            if (this.bellTimer) {
                this.bellTimer.abort();
                this.bellTimer = null;
            }
            this.startAnimation();
            if (this.ambientSoundDuringPresentationPossible) {
                this.casino.soundPlayer.resumeAmbientSound();
            }
        },
        startAnimation: function() {
            if (this.animations.length > 0) {
                if (typeof this.darkeningLayer !== "undefined" && this.darkeningLayer !== null) {
                    this.darkeningLayer.visible = true;
                }
                this.finished = false;
                this.cleanAnimation();
                this.totalDurationInMilliseconds = Math.floor((this._idleLineWinCycleLength * 1.5)) * this.animations.length;
                this.visible = true;
                this.timeSinceAnimationStarted = 0;
                this.currentAnimationIndex = 0;
                this.runningAnimations.length = 0;
                this.runningAnimations[0] = this.animations[0];
                this.runningAnimations[0].showLine(true);
                this.runningAnimations[0].showWinAmount(true);
                var snd = null;
                if (this.summarySounds.length !== 0 && this.animations.length === 1) {
                    snd = this.determineSummarySound(this.gameResult, this.lineContainer.numberOfActiveLines);
                } else {
                    snd = this.determineSound(this.gameResult, this.runningAnimations[0].lineGfx.lineId, this.currentAnimationIndex + 1);
                }
                this.adjustAnimationLengthToSoundLength(snd);
                if (snd !== null) {
                    if (!this.ambientSoundDuringPresentationPossible) {
                        this.casino.soundPlayer.pauseAllAmbient();
                    }
                    this.casino.soundPlayer.playEffect(snd.sndID, false);
                }
                this.casino.displayProvider.showWinZone(true);
                this.addWinCallback(this.runningAnimations[0].winSum);
                this.animationStartTime = ig.system.now();
                this.animating = true;
                this.state = this.ANIMATING_LINES;
            } else {
                this.finishCallback();
            }
        },
        nextAnimation: function() {
            this.currentAnimationIndex++;
            if (this.currentAnimationIndex < this.animations.length) {
                this.timeSinceAnimationStarted = 0;
                this.animationStartTime = ig.system.now();
                this.disableLine(this.runningAnimations[0]);
                this.runningAnimations[0] = this.animations[this.currentAnimationIndex];
                this.enableLine(this.runningAnimations[0]);
                var snd = this.determineSound(this.gameResult, this.runningAnimations[0].lineGfx.lineId, this.currentAnimationIndex + 1);
                this.adjustAnimationLengthToSoundLength(snd);
                if (snd !== null) {
                    if (!this.ambientSoundDuringPresentationPossible) {
                        this.casino.soundPlayer.pauseAllAmbient();
                    }
                    this.casino.soundPlayer.playEffect(snd.sndID, false);
                }
                this.addWinCallback(this.runningAnimations[0].winSum);
            }
        },
        checkForDuplicateAnimations: function(animation, index) {
            for (var i = 0; i < index; i++) {
                this.animations[i].checkForDuplicateSymbolAtPosition(animation);
            }
        },
        startSummaryAnimation: function() {
            for (var i = 0; i < this.animations.length; i++) {
                this.runningAnimations[i] = this.animations[i];
                this.runningAnimations[i].showLine(true);
                this.runningAnimations[i].showWinAmount(false);
                this.checkForDuplicateAnimations(this.runningAnimations[i], i);
            }
            if (this.animations.length > 1) {
                var snd = this.determineSummarySound(this.gameResult, this.lineContainer.numberOfActiveLines);
                if (snd === null) {
                    this.singleAnimationLengthInMilliseconds = 1000;
                } else {
                    this.playingSummarySound = snd.sndID;
                    this.singleAnimationLengthInMilliseconds = this.casino.soundPlayer.getSoundLengthInMilliSeconds(snd.sndID);
                    this.casino.soundPlayer.playEffect(snd.sndID, false);
                }
            } else {
                this.singleAnimationLengthInMilliseconds = 666;
            }
            this.currentAnimationIndex = this.runningAnimations.length - 1;
            this.idling = true;
            this.summary = true;
            this.timeSinceAnimationStarted = 0;
            this.animationStartTime = ig.system.now();
        },
        adjustAnimationLengthToSoundLength: function(sound) {
            if (this.casino.soundPlayer.soundOn && this.casino.soundPlayer.ready) {
                this.singleAnimationLengthInMilliseconds = this.casino.soundPlayer.getSoundLengthInMilliSeconds(sound.sndID);
                if (this.singleAnimationLengthInMilliseconds < this.minimumAnimationLengthInMilliseconds) {
                    this.singleAnimationLengthInMilliseconds = this.minimumAnimationLengthInMilliseconds;
                }
            } else {
                this.singleAnimationLengthInMilliseconds = Math.floor(this.totalDurationInMilliseconds / this.animations.length);
            }
        },
        addWinSound: function(sound) {
            this.registeredSounds.push(sound);
        },
        addSummarySound: function(sound) {
            this.summarySounds.push(sound);
        },
        addBellSound: function(sound) {
            this.bellSounds.push(sound);
        },
        cleanAnimation: function() {
            this.resetAllSymbolAnimations();
            for (var i = 0; i < this.runningAnimations.length; i++) {
                this.runningAnimations[i].showLine(false);
                this.runningAnimations[i].showWinAmount(false);
            }
        },
        clean: function() {
            this.cleanAnimation();
            if (this.darkeningLayer !== null) {
                this.darkeningLayer.visible = false;
            }
            for (var i = 0; i < this.animations.length; i++) {
                this.animations[i].kill();
            }
            this.state = "";
            var activeLines = this.lineGfxLayer.children.length;
            for (var j = 0; j < activeLines; j++) {
                var child = this.lineGfxLayer.getChildAt(this.lineGfxLayer.children.length - 1);
                var idx = child.lineID;
                if (idx != undefined) {
                    this.lineContainer.addChildAt(child, idx);
                } else {
                    this.lineContainer.addChild(child);
                }
            }
            this.lineGfxLayer.removeAllChildren();
            this.resortLines();
            this.lineContainer.showAllLines(false, true);
            this.currentAnimationIndex = 0;
            this.animations.length = 0;
            this.runningAnimations.length = 0;
            this.winLines.length = 0;
            this.timeSinceAnimationStarted = 0;
            this.animating = false;
            this.visible = false;
            this.summary = false;
        },
        resetAllSymbolAnimations: function() {
            var currAnimation;
            var currSymbol;
            for (var i = 0; i < this.animations.length; i++) {
                currAnimation = this.animations[i];
                for (var j = 0; j < currAnimation.symbols.length; j++) {
                    currSymbol = currAnimation.symbols[j];
                    currSymbol.currentAnim.rewind();
                }
            }
        },
        resortLines: function() {
            var length = this.lineContainer.lines.length;
            for (var i = 0; i < length; i++) {
                var line = this.lineContainer.lines[i];
                line.reattachLine();
                this.lineContainer.addChild(line);
            }
        },
        determineSound: function(result, lineId, animationIndex) {
            if (this.casino.soundPlayer.soundOn && this.casino.soundPlayer.ready) {
                for (var i = 0; i < this.registeredSounds.length; i++) {
                    var snd = this.registeredSounds[i];
                    if (snd.fulfilled(result, lineId, animationIndex)) {
                        return {
                            "sndID": snd.getSndId(),
                            "sheetId": snd.getSheetId()
                        };
                    }
                }
                console.log("Error: No Sound Found matching the criteria");
                return null;
            } else {
                return null;
            }
        },
        determineSummarySound: function(result, numberOfActiveLines) {
            if (this.casino.soundPlayer.soundOn && this.casino.soundPlayer.ready) {
                for (var i = 0; i < this.summarySounds.length; i++) {
                    var snd = this.summarySounds[i];
                    if (snd.fulfilled(result, numberOfActiveLines)) {
                        return {
                            "sndID": snd.getSndId(),
                            "sheetId": snd.getSheetId()
                        };
                    }
                }
                console.log("Error: No Sound Found matching the criteria");
                return null;
            } else {
                return null;
            }
        },
        determineBellSound: function(result, numberofActiveLines) {
            if (this.casino.soundPlayer.soundOn && this.casino.soundPlayer.ready) {
                for (var i = 0; i < this.bellSounds.length; i++) {
                    var snd = this.bellSounds[i];
                    if (snd.fulfilled(result, numberofActiveLines)) {
                        return {
                            "sndID": snd.getSndId(),
                            "sheetId": snd.getSheetId()
                        };
                    }
                }
                console.log("Error: No Sound Found matching the criteria");
                return null;
            } else {
                return null;
            }
        },
        isWinLine: function(win) {
            return win.evalId !== null && win.lineId !== null && win.evalId !== undefined && win.lineId !== undefined;
        },
        isBellSoundNecessary: function() {
            return this.animations.length > 0 && this.bellSounds.length > 0;
        },
        showAnimation: function(show) {
            this.visible = show;
            for (var i = 0; i < this.runningAnimations.length; i++) {
                this.runningAnimations[i].showLine(show);
                if (i === this.currentAnimationIndex) {
                    this.runningAnimations[i].showWinAmount(show);
                } else {
                    this.runningAnimations[i].showWinAmount(false);
                }
            }
        },
        pause: function() {
            this.pauseStartedAt = ig.system.now();
            this.pausedTime = 0;
            this.isPaused = true;
            if (this.bellTimer) {
                this.bellTimer.pause();
            }
        },
        resume: function() {
            if (this.bellTimer) {
                this.bellTimer.resume();
            }
            if (!this.isPaused) {
                this.pauseStartedAt = ig.system.now();
            }
            this.pausedTime = ig.system.now() - this.pauseStartedAt;
            this.animationStartTime += this.pausedTime;
            this.isPaused = false;
        }
    });
});


// ../private/de/adp/web/payline/lineNumber.js 
ig.baked = true;
ig.module('de.adp.web.payline.lineNumber').requires('impact.node', 'impact.image').defines(function() {
    LineNumber = ig.Node.extend({
        displayParent: null,
        IDLE: 0,
        HIGHLIGHT: 1,
        DISABLED: 2,
        pathToGfx: "",
        numberGfx: null,
        pos: {
            x: 0,
            y: 0
        },
        offset: {
            x: 0,
            y: 0
        },
        drawTile: {
            x: 0,
            y: 0
        },
        size: {
            width: 0,
            height: 0
        },
        tileId: 0,
        visible: false,
        curState: 0,
        init: function(id, pathToGfx, targetX, targetY, width, height, sourceX, sourceY) {
            this.pathToGfx = pathToGfx;
            this.pos.x = targetX;
            this.pos.y = targetY;
            this.drawTile.x = sourceX || 0;
            this.drawTile.y = sourceY || 0;
            this.size.width = width;
            this.size.height = height;
            this.tileId = id;
            this.numberGfx = new ig.Image(this.pathToGfx);
        },
        showNumber: function() {
            this.visible = true;
        },
        hideNumber: function() {
            this.visible = false;
        },
        draw: function() {
            if (this.pathToGfx !== "") {
                if (this.numberGfx.width > this.size.width) {
                    switch (this.curState) {
                        case this.IDLE:
                            this.numberGfx.draw(this.pos.x + this.offset.x, this.pos.y + this.offset.y, this.drawTile.x, this.drawTile.y, this.size.width, this.size.height);
                            break;
                        case this.HIGHLIGHT:
                            this.numberGfx.draw(this.pos.x + this.offset.x, this.pos.y + this.offset.y, this.drawTile.x + 2 * this.size.width, this.drawTile.y, this.size.width, this.size.height);
                            break;
                        case this.DISABLED:
                            this.numberGfx.draw(this.pos.x + this.offset.x, this.pos.y + this.offset.y, this.drawTile.x + this.size.width, this.drawTile.y, this.size.width, this.size.height);
                            break;
                        default:
                            break;
                    }
                } else {
                    this.numberGfx.draw(this.pos.x + this.offset.x, this.pos.y + this.offset.y, this.drawTile.x, this.drawTile.y, this.size.width, this.size.height);
                }
            }
        },
        update: function() {},
        setState: function(state) {
            this.curState = state;
        }
    });
    LineNumber.IDLE = 0;
    LineNumber.HIGHLIGHT = 1;
    LineNumber.DISABLED = 2;
});

// ../private/de/adp/web/sound/trigger/abstractSound.js 
ig.baked = true;
ig.module("de.adp.web.sound.trigger.abstractSound").requires("impact.impact").defines(function() {
    AbstractSound = ig.Class.extend({
        sndId: "",
        sheetId: "",
        init: function(sndId, sheetId) {
            this.getSheetId = this.getSheetId.bind(this);
            this.getSndId = this.getSndId.bind(this);
            this.sndId = sndId;
            this.sheetId = sheetId;
        },
        fulfilled: function(result, lineId) {},
        getSndId: function() {
            return this.sndId;
        },
        getSheetId: function() {
            return this.sheetId;
        }
    });
});

// ../private/de/adp/web/sound/trigger/oddsDependendSound.js 
ig.baked = true;
ig.module("de.adp.web.sound.trigger.oddsDependendSound").requires("de.adp.web.sound.trigger.abstractSound").defines(function() {
    OddsDependendSound = AbstractSound.extend({
        odds: 0,
        init: function(sndId, lessOrEqual) {
            this.odds = lessOrEqual || Number.MAX_VALUE;
            this.parent(sndId);
        },
        fulfilled: function(result, numberOfActiveLines) {
            var calcOdds = 0;
            var wins = result.winnings;
            for (var i = 0; i < wins.length; i++) {
                calcOdds += wins[i].winFactor / numberOfActiveLines;
            }
            if (calcOdds <= this.odds) {
                return true;
            }
            return false;
        }
    });
});

// ../private/de/adp/web/sound/trigger/winOrderSound.js 
ig.baked = true;
ig.module("de.adp.web.sound.trigger.winOrderSound").requires('de.adp.web.sound.trigger.abstractSound').defines(function() {
    WinOrderSound = AbstractSound.extend({
        order: 0,
        init: function(sndID, order) {
            this.parent(sndID);
            this.order = order;
        },
        fulfilled: function(result, lineId, animationIndex) {
            var size = 0;
            for (var i = 0; i < result.winnings.length; i++) {
                if (result.winnings[i].lineId === lineId) {
                    size = result.winnings[i].items.length;
                }
            }
            if (animationIndex === this.order && size > 1) {
                return true;
            }
            return false;
        }
    });
});

// ../private/de/adp/web/sound/trigger/teaserSound.js 
ig.baked = true;
ig.module("de.adp.web.sound.trigger.teaserSound").requires('de.adp.web.sound.trigger.abstractSound').defines(function() {
    TeaserSound = AbstractSound.extend({
        occurence: 0,
        symbolID: 0,
        init: function(sndID, symbolID, occurence) {
            this.parent(sndID);
            this.occurence = occurence;
            this.symbolID = symbolID;
        },
        fulfilled: function(result, reelID) {
            var reel = result.reels[reelID];
            if (reel.teaser !== undefined && reel.teaser.id === this.symbolID && reel.teaser.occur === this.occurence) {
                return true;
            }
            return false;
        }
    });
});

// ../private/de/adp/web/sound/trigger/suspenseSound.js 
ig.baked = true;
ig.module("de.adp.web.sound.trigger.suspenseSound").requires("de.adp.web.sound.trigger.abstractSound").defines(function() {
    SuspenseSound = AbstractSound.extend({
        _symbolID: 0,
        _sndID: "",
        _occurrence: "",
        init: function(sndID, symbolID, occurrence) {
            this.parent(sndID);
            this._occurence = occurrence;
            this._symbolID = symbolID;
        },
        fulfilled: function(result, reelId) {
            var reel = result.reels[reelId];
            if (reel.teaser !== undefined && reel.teaser.id === this._symbolID && reel.teaser.occur === this._occurence) {
                return true;
            }
            return false;
        }
    });
});


// ../private/de/adp/web/border/border.js 
ig.baked = true;
ig.module('de.adp.web.border.border').requires('impact.impact', 'impact.image', 'impact.node').defines(function() {
    Border = ig.Node.extend({
        gfx: null,
        gfxPath: null,
        pos: {
            x: 0,
            y: 0
        },
        myPool: [],
        init: function(gfxPath, pool) {
            this.visible = true;
            this.gfxPath = gfxPath;
            this.gfx = new ig.Image(gfxPath);
            this.addChild(this.gfx);
            if (pool !== null && pool !== undefined) {
                this.myPool = pool;
            }
        },
        update: function() {},
        getClone: function() {
            var clone;
            if (this.myPool.length > 0) {
                clone = this.myPool.pop();
                clone.pos.x = this.pos.x;
                clone.pos.y = this.pos.y;
            } else {
                clone = new Border(this.gfxPath, this.myPool);
            }
            return clone;
        },
        dispose: function() {
            this.pos.x = 0;
            this.pos.y = 0;
            if (this.displayParent !== null && this.displayParent !== undefined) {
                this.displayParent.removeChild(this);
            }
            this.myPool.push(this);
        }
    });
});



// ../private/de/adp/web/gui/freegame/switching/simpleSwitchAnimation.js 
ig.baked = true;
ig.module('de.adp.web.gui.freegame.switching.simpleSwitchAnimation').requires('impact.impact', 'impact.entity').defines(function() {
    SimpleSwitchAnimation = ig.Entity.extend({
        counter: null,
        background: null,
        display: null,
        callback: null,
        durationInMilliseconds: 90 * 33,
        gameGui: null,
        timeSinceAnimationStarted: null,
        animationStartTime: null,
        timeToDisplayCounter: 1,
        counterDisplayed: false,
        timeToDisplayFreegameDisplay: 1,
        freegameDisplayDisplayed: false,
        timeToHideFreegameDisplay: null,
        freegameDisplayHidden: false,
        timeToSwitchBackground: 1,
        backgroundSwitched: false,
        triggerResponse: null,
        isAnimating: false,
        isSkippingAllowed: false,
        init: function(mainGui, fgCounter, fgDisplay, fgBackground) {
            this.stopAnimation = this.stopAnimation.bind(this);
            this.gameGui = mainGui;
            if (this.gameGui === null || this.gameGui === undefined) {
                throw "Every switchAnimation needs a valid gameGui passed into its constructor!";
            }
            this.counter = fgCounter;
            this.display = fgDisplay;
            this.background = fgBackground;
        },
        switchWithAnimation: function(triggerResponse) {
            this.clean();
            this.gameGui.winAnimation.clean();
            this.triggerResponse = triggerResponse;
            this.animationStartTime = ig.system.now();
            if (this.timeToHideFreegameDisplay === null) {
                this.timeToHideFreegameDisplay = this.durationInMilliseconds;
            }
            this.isAnimating = true;
            this.gameGui.sceneManager.getActiveScene().addChild(this);
        },
        switchImmediatly: function(triggerResponse) {
            if (this.counter !== null) {
                this.counter.blendIn();
            }
            if (this.background !== null && this.gameGui !== null) {
                if (!this.background.isSwitched) {
                    $('#main').removeClass('frame-background');
                    $('#main').addClass('frame-background-free');
                    this.background.switchToFree();
                } else {
                    $('#main').removeClass('frame-background-free');
                    $('#main').addClass('frame-background');
                    this.background.switchToNormal();
                }
            }
        },
        stopAnimation: function() {
            this.isAnimating = false;
            this.gameGui.sceneManager.getActiveScene().removeChild(this);
            this.callback();
        },
        update: function() {
            if (!this.isAnimating) {
                return;
            }
            if (ig.input.pressed('skipReel') && this.isSkippingAllowed) {
                this.skipAnimation();
            } else {
                this.timeSinceAnimationStarted = ig.system.now() - this.animationStartTime;
            }
            this.parent();
        },
        skipAnimation: function() {
            this.timeSinceAnimationStarted = this.durationInMilliseconds;
            this.isSkippingAllowed = false;
        },
        clean: function() {
            this.timeSinceAnimationStarted = 0;
            this.counterDisplayed = false;
            this.freegameDisplayDisplayed = false;
            this.freegameDisplayHidden = false;
            this.backgroundSwitched = false;
            this.isSkippingAllowed = false;
        },
        pause: function() {
            this.pauseStartedAt = ig.system.now();
            this.pausedTime = 0;
            this.isPaused = true;
        },
        resume: function() {
            if (!this.isPaused) {
                this.pauseStartedAt = ig.system.now();
            }
            this.isPaused = false;
            this.pausedTime = ig.system.now() - this.pauseStartedAt;
            this.animationStartTime = this.animationStartTime + this.pausedTime;
            this.timeSinceAnimationStarted = ig.system.now() - this.animationStartTime;
            this.pausedTime = 1;
        }
    });
});

// ../private/de/adp/web/gui/freegame/switching/simpleRetriggerAnimation.js 
ig.baked = true;
ig.module('de.adp.web.gui.freegame.switching.simpleRetriggerAnimation').requires('impact.impact', 'de.adp.web.gui.freegame.switching.simpleSwitchAnimation', 'impact.entity').defines(function() {
    SimpleRetriggerAnimation = SimpleSwitchAnimation.extend({
        init: function(mainGui, fgCounter, fgDisplay, fgBackground) {
            this.parent(mainGui, fgCounter, fgDisplay, fgBackground);
        },
        switchImmediatly: function(triggerResponse) {
            if (this.counter !== null) {
                this.counter.blendIn();
            }
            if (this.background !== null && this.gameGui !== null) {
                this.background.switchToFree();
            }
        },
        update: function() {
            this.parent();
            if (this.timeSinceAnimationStarted >= this.timeToDisplayCounter && this.counter !== null && !this.counterDisplayed) {
                this.counter.showAvailableGames(this.triggerResponse.gameResult.freeGamesTotal + this.triggerResponse.gameResult.totalWonFreegames());
                this.counter.showPlayedGames(this.triggerResponse.gameResult.freeGameRound);
                this.counter.blendIn();
                this.counterDisplayed = true;
            }
            if (this.timeSinceAnimationStarted >= this.timeToDisplayFreegameDisplay && this.display !== null && !this.freegameDisplayDisplayed) {
                this.display.show(this.triggerResponse);
                this.display.blendIn();
                this.freegameDisplayDisplayed = true;
                this.isSkippingAllowed = true;
            }
            if (this.timeSinceAnimationStarted >= this.timeToHideFreegameDisplay && this.display !== null && !this.freegameDisplayHidden) {
                this.display.blendOut();
                this.isSkippingAllowed = false;
                this.freegameDisplayHidden = true;
            }
            if (this.timeSinceAnimationStarted >= this.durationInMilliseconds) {
                this.stopAnimation();
            }
        }
    });
});


// ../private/de/adp/web/gui/freegame/switching/simpleSwitchOutAnimation.js 
ig.baked = true;
ig.module('de.adp.web.gui.freegame.switching.simpleSwitchOutAnimation').requires('impact.impact', 'de.adp.web.gui.freegame.switching.simpleSwitchAnimation', 'impact.entity').defines(function() {
    SimpleSwitchOutAnimation = SimpleSwitchAnimation.extend({
        init: function(mainGui, fgCounter, fgDisplay, fgBackground) {
            this.parent(mainGui, fgCounter, fgDisplay, fgBackground);
        },
        switchImmediatly: function(triggerResponse) {
            if (this.counter !== null) {
                this.counter.blendOut(0);
            }
            if (this.background !== null && this.gameGui !== null) {
                $('#main').removeClass('frame-background-free');
                $('#main').addClass('frame-background');
                this.background.switchToNormal();
                this.switchTerminalElements();
            }
        },
        switchTerminalElements: function() {
            $('#terminal-frame').removeClass('terminal-frame-bg-free');
            $('#terminal-frame').addClass('terminal-frame-bg');
            $('#terminal-bar').removeClass('terminal-bar-bg-free');
            $('#terminal-bar').addClass('terminal-bar-bg');
            $('#terminal-meter').removeClass('terminal-meter-bg-free');
            $('#terminal-meter').addClass('terminal-meter-bg');
            this.gameGui.facade.sendNotification(PaytableIDs.NOTIFICATION_SWITCH_APPEARANCE, {
                gameMode: "BASEGAME"
            });
        },
        update: function() {
            this.parent();
            if (this.timeSinceAnimationStarted >= this.timeToDisplayCounter && this.counter !== null && !this.counterDisplayed) {
                this.counter.blendOut();
                this.counterDisplayed = true;
            }
            if (this.timeSinceAnimationStarted >= this.timeToDisplayFreegameDisplay && this.display !== null && !this.freegameDisplayDisplayed) {
                this.display.show(this.triggerResponse);
                this.display.blendIn();
                this.freegameDisplayDisplayed = true;
                this.isSkippingAllowed = true;
            }
            if (this.timeSinceAnimationStarted >= this.timeToHideFreegameDisplay && this.display !== null && !this.freegameDisplayHidden) {
                this.isSkippingAllowed = false;
                this.display.blendOut();
                this.freegameDisplayHidden = true;
            }
            if (this.timeSinceAnimationStarted >= this.timeToSwitchBackground && this.background !== null && this.gameGui !== null && !this.backgroundSwitched) {
                $('#main').removeClass('frame-background-free');
                $('#main').addClass('frame-background');
                this.background.switchToNormal();
                this.backgroundSwitched = true;
                this.switchTerminalElements();
            }
            if (this.timeSinceAnimationStarted >= this.durationInMilliseconds) {
                this.stopAnimation();
            }
        }
    });
});

// ../private/de/adp/web/paytable/elements/headerGroup.js 
ig.baked = true;
ig.module("de.adp.web.paytable.elements.headerGroup").requires("impact.impact").defines(function() {
    HeaderGroup = ig.Class.extend({
        _self: null,
        _bottomText: null,
        _topText: null,
        _image: null,
        imageUrl: "",
        imageStyles: {},
        topTextKey: "",
        topTextStyle: {},
        bottomTextKey: "",
        bottomTextStyle: {},
        topText: "",
        bottomText: "",
        parentElement: null,
        imageWidth: "",
        init: function(imageUrl, topTextKey, bottomTextKey, imageWidth) {
            this.imageUrl = imageUrl;
            this.topTextKey = topTextKey;
            this.bottomTextKey = bottomTextKey;
            this.imageWidth = imageWidth;
            if (this.imageWidth === undefined) {
                this.imageWidth = "70%";
            }
            this.createSelf();
        },
        createSelf: function() {
            this._bottomText = $("<p>" + this.bottomText + "</p>");
            this._topText = $("<p>" + this.topText + "</p>");
            this._image = $("<div><img src='" + this.imageUrl + "' style='width:" + this.imageWidth + "'/></div>");
            this._self = $("<div class='headerGroup'></div>");
            $(this._self).append(this._topText);
            $(this._self).append(this._image);
            $(this._self).append(this._bottomText);
        },
        getView: function() {
            return this._self;
        },
        addImage: function(imageUrl) {
            this.imageUrl = imageUrl;
            this.update();
        },
        addTopText: function(topText) {
            this.topText = topText;
            this.update();
        },
        addBottomText: function(bottomText) {
            this.bottomText = bottomText;
            this.update();
        },
        update: function() {
            this._bottomText = $("<p>" + this.bottomText + "</p>");
            this.addStyles("bottomText", this.bottomTextStyle);
            this._topText = $("<p>" + this.topText + "</p>");
            this.addStyles("topText", this.topTextStyle);
            this._image = $("<div><img src='" + this.imageUrl + "' style='width:" + this.imageWidth + "'/></div>");
            this.addStyles("image", this.imageStyles);
            $(this._self).empty();
            $(this._self).append(this._topText);
            $(this._self).append(this._image);
            $(this._self).append(this._bottomText);
        },
        addStyles: function(element, styles) {
            var isClass = (typeof styles !== "object" && typeof styles === "string") ? true : false;
            switch (element) {
                case "toptext":
                    if (isClass) {
                        $(this._topText).addClass(styles);
                    } else {
                        $(this._topText).css(styles);
                    }
                    this.topTextStyle = styles;
                    break;
                case "bottomtext":
                    if (isClass) {
                        $(this._bottomText).addClass(styles);
                    } else {
                        $(this._bottomText).css(styles);
                    }
                    this.bottomTextStyle = styles;
                    break;
                case "image":
                    if (isClass) {
                        $(this._image).addClass(styles);
                    } else {
                        $(this._image).css(styles);
                    }
                    this.imageStyles = styles;
                    break;
                default:
                    break;
            }
        },
        translate: function(resProv) {
            this.addTopText(resProv.getString(this.topTextKey));
            this.addBottomText(resProv.getString(this.bottomTextKey));
        }
    });
});


// ../private/de/adp/web/paytable/elements/payItem.js 
ig.baked = true;
ig.module('de.adp.web.paytable.elements.payItem').requires('impact.impact').defines(function() {
    PayItem = ig.Class.extend({
        _self: null,
        _amountClass: "",
        occurence: 0,
        symbolID: 0,
        dependsOnTotalStake: false,
        init: function(symbolId, occurence, dependsOnTotalStake) {
            if (occurence > 0) {
                this.occurence = occurence;
            }
            if (symbolId > 0) {
                this.symbolID = symbolId;
            }
            this.dependsOnTotalStake = dependsOnTotalStake || false;
            this.createSelf();
        },
        createSelf: function() {
            var html = "<div class='points-box' symbolId='" + this.symbolID + "' occurrence='" + this.occurence + "'><p class='points-box-occur'>" + this.occurence + "x </p><p class='points-box-value'><span  symbolid='" + this.symbolID + "' occurence='" + this.occurence + "' dependsOnTotalStake=" + this.dependsOnTotalStake + ">40</span></p></div>";
            this._self = $(html);
        },
        get: function() {
            if (this._self != null) {
                return this._self;
            }
        },
        setPayItemOccurence: function(amount) {
            $(this._self).removeClass(this._amountClass);
            switch (amount) {
                case 1:
                    this._amountClass = "points-box-one";
                    break;
                case 2:
                    this._amountClass = "points-box-two";
                    break;
                case 3:
                    this._amountClass = "points-box-three";
                    break;
                case 4:
                    this._amountClass = "points-box-four";
                    break;
                case 5:
                    this._amountClass = "points-box-five";
                    break;
                default:
                    this._amountClass = "points-box-one";
            }
            $(this._self).addClass(this._amountClass);
        },
        onDisplay: function() {}
    });
});

// ../private/de/adp/web/paytable/elements/canvasPayitem.js 
ig.baked = true;
ig.module("de.adp.web.paytable.elements.canvasPayitem").requires("impact.node", "de.adp.web.gui.elements.textBox").defines(function() {
    CanvasPayitem = ig.Node.extend({
        _occurrence: 0,
        _amount: 0,
        _amountTF: undefined,
        _currencyTF: undefined,
        isCurrencyFieldNeeded: false,
        currency: "",
        _width: 0,
        _filter: "",
        init: function(occurrence, textFormat, filter, width, height, x, y) {
            this._width = width;
            this.parent(x, y);
            this._occurrence = occurrence;
            this._amountTF = new TextBox(0, 0, width, height);
            this._currencyTF = new TextBox(0, 0, width, height);
            this._filter = filter;
            this.addChild(this._amountTF);
            this.addFilter(filter);
            this.setTextFormat(textFormat);
        },
        setAmount: function(amount, canCutOff) {
            var caption = currencyFormatter.getMoneyStringForCanvas(amount, canCutOff);
            this.currency = currencyFormatter.getCurrencySymbol();
            if (this.currency !== "" && currencyFormatter.currencyOptions.printedBefore && this._amountTF._textFormat.align === "right") {
                this.isCurrencyFieldNeeded = true;
                this._currencyTF.width = this._width;
                caption = caption.replace(this.currency, "");
                this.addChildAt(this._currencyTF, 0);
                this._currencyTF.setText(this.currency);
                this.readjustTextFieldToCurrencySign();
            } else {
                this.removeChild(this._currencyTF);
                this._amountTF._width = this._width;
                this._amountTF.pos.x = 0;
            }
            this._amountTF.setText(caption);
            if (this.isCurrencyFieldNeeded) {
                var scaleVal = this._amountTF.getScaleDownRatio();
                this._currencyTF.adjustTextSize(scaleVal);
                this.readjustTextFieldToCurrencySign();
                this._amountTF.setText(caption);
            }
        },
        readjustTextFieldToCurrencySign: function() {
            var currencyWidth = this._currencyTF.getTextWidth() + 4;
            if (currencyWidth < 0) {
                currencyWidth = 0;
            }
            this._currencyTF.width = currencyWidth;
            this._amountTF._width = this._width - currencyWidth;
            this._amountTF.pos.x = currencyWidth;
        },
        setTextFormat: function(textFormat) {
            this._amountTF.setTextFormat(textFormat.fontSize, textFormat.fontName, textFormat.fontStyle, textFormat.fontColor, textFormat.alignment, textFormat.verticalAlignment);
            this._currencyTF.setTextFormat(textFormat.fontSize, textFormat.fontName, textFormat.fontStyle, textFormat.fontColor, "left", textFormat.verticalAlignment);
        },
        addFilter: function(textFilter) {
            this._amountTF.addTextFilter(textFilter);
            this._currencyTF.addTextFilter(textFilter);
        },
        highlight: function() {},
        unlight: function() {},
        scaleFontsDown: function(val) {
            this._amountTF.adjustTextSize(val);
            this._currencyTF.adjustTextSize(val);
        },
        getScaleDownRatio: function() {
            if (!this.isCurrencyFieldNeeded) {
                return this._amountTF.getScaleDownRatio();
            }
            var textFac = this._amountTF.getScaleDownRatio();
            var curFac = this._currencyTF.getScaleDownRatio();
            var dif = textFac - curFac;
            var resultFac = curFac + 0.5 * dif;
            return resultFac;
        },
        hide: function() {
            this._amountTF.hide();
            this._currencyTF.hide();
        }
    });
});

// ../private/de/adp/web/paytable/elements/canvasPaygroup.js 
ig.baked = true;
ig.module("de.adp.web.paytable.elements.canvasPaygroup").requires("impact.node", "de.adp.web.paytable.elements.canvasPayitem").defines(function() {
    CanvasPaygroup = ig.Node.extend({
        _payGroupMembers: [],
        _payItems: [],
        dependsOnTotalStake: false,
        init: function(paygroupMemberIds, dependsOnTotalStake) {
            this._payGroupMembers = paygroupMemberIds;
            this.dependsOnTotalStake = !!dependsOnTotalStake;
        },
        addPayItem: function(payitem) {
            if (payitem instanceof CanvasPayitem) {
                this._payItems.push(payitem);
                this.addChild(payitem);
            }
        },
        getGroupMembers: function() {
            return this._payGroupMembers;
        },
        getPayItems: function() {
            return this._payItems;
        },
        getSmallestScaleDownRatio: function() {
            var minRatio = 1;
            var curRatio = 1;
            for (var i = 0; i < this._payItems.length; i++) {
                curRatio = this._payItems[i].getScaleDownRatio();
                if (curRatio < minRatio) {
                    minRatio = curRatio;
                }
            }
            return minRatio;
        },
        scaleFontsDown: function(val) {
            for (var i = 0; i < this._payItems.length; i++) {
                this._payItems[i].scaleFontsDown(val);
            }
        },
        onDisplay: function() {}
    });
});

// ../private/de/adp/web/symbol/trigger/symbolTrigger.js 
ig.baked = true;
ig.module("de.adp.web.symbol.trigger.symbolTrigger").requires("impact.impact").defines(function() {
    SymbolTrigger = ig.Class.extend({
        init: function() {},
        triggeredBy: function(lineResult, result) {}
    });
});

// ../private/de/adp/web/symbol/trigger/standardReelSymbolTrigger.js 
ig.baked = true;
ig.module("de.adp.web.symbol.trigger.standardReelSymbolTrigger").requires("de.adp.web.symbol.trigger.symbolTrigger").defines(function() {
    StandardReelSymbolTrigger = SymbolTrigger.extend({
        triggeredBy: function(lineResult, result) {
            return result.freeGameRound === 0 && lineResult === null;
        }
    });
});

// ../private/de/adp/web/symbol/trigger/freegameAnimationTrigger.js 
ig.baked = true;
ig.module("de.adp.web.symbol.trigger.freegameAnimationTrigger").requires("de.adp.web.symbol.trigger.symbolTrigger").defines(function() {
    FreegameAnimationTrigger = SymbolTrigger.extend({
        triggeredBy: function(lineResult, result) {
            return result.freeGameRound > 0;
        }
    });
});

// ../private/de/adp/web/symbol/trigger/occurrenceTrigger.js 
ig.baked = true;
ig.module("de.adp.web.symbol.trigger.occurrenceTrigger").requires("de.adp.web.symbol.trigger.symbolTrigger").defines(function() {
    OccurrenceTrigger = SymbolTrigger.extend({
        symbolID: 0,
        occurrences: [],
        init: function(symbolId, occurrences) {
            this.symbolID = symbolId;
            this.occurrences = occurrences;
        },
        triggeredBy: function(lineResult) {
            return this.occurrences.indexOf(lineResult.highlight.occurrence) !== -1;
        }
    });
});

// ../private/de/adp/web/symbol/trigger/freegameAndOccurrenceTrigger.js 
ig.baked = true;
ig.module("de.adp.web.symbol.trigger.freegameAndOccurrenceTrigger").requires("de.adp.web.symbol.trigger.occurrenceTrigger").defines(function() {
    FreegameAndOccurrenceTrigger = OccurrenceTrigger.extend({
        triggeredBy: function(lineResult, result) {
            return (this.occurrences.indexOf(lineResult.highlight.occurrence) !== -1 && result.freeGameRound > 0) ? true : false;
        }
    });
});

// ../private/de/adp/web/symbol/trigger/occurrenceAndPurityTrigger.js 
ig.baked = true;
ig.module("de.adp.web.symbol.trigger.occurrenceAndPurityTrigger").requires("de.adp.web.symbol.trigger.occurrenceTrigger").defines(function() {
    OccurenceAndPurityTrigger = OccurrenceTrigger.extend({
        triggeredByPurity: true,
        init: function(occurrences, triggeredByPurity) {
            this.occurrences = occurrences;
            this.triggeredByPurity = triggeredByPurity;
        },
        triggeredBy: function(lineResult) {
            if (this.triggeredByPurity && !this.isPure(lineResult)) {
                return false;
            }
            if (this.triggeredByPurity && this.isPure(lineResult)) {
                return this.parent(lineResult);
            }
            if (!this.triggeredByPurity && this.isPure(lineResult)) {
                return false;
            }
            if (!this.triggeredByPurity && !this.isPure(lineResult)) {
                return this.parent(lineResult);
            }
        },
        isPure: function(lineResult) {
            var curItem;
            var items = lineResult.items;
            for (var i = 0; i < items.length; i++) {
                curItem = items[i];
                if (curItem.symbol !== lineResult.highlight.id) {
                    return false;
                }
            }
            return true;
        }
    });
});

// ../private/de/adp/web/gui/elements/switchableBackground.js 
ig.baked = true;
ig.module("de.adp.web.gui.elements.switchableBackground").requires("impact.node").defines(function() {
    SwitchableBackground = ig.Node.extend({
        normalBg: null,
        freeBg: null,
        currentBg: null,
        isSwitched: false,
        visible: true,
        init: function(normalBackground, freeBackground) {
            this.normalBg = normalBackground;
            this.freeBg = freeBackground || null;
            this.currentBg = this.normalBg;
            this.addChild(this.currentBg);
        },
        switchToFree: function() {
            this.removeChild(this.currentBg);
            this.currentBg = this.freeBg;
            this.addChild(this.currentBg);
            this.isSwitched = true;
        },
        switchToNormal: function() {
            this.removeChild(this.currentBg);
            this.currentBg = this.normalBg;
            this.addChild(this.currentBg);
            this.isSwitched = false;
        },
        getCurrentBackgroundWidth: function() {
            return this.currentBg.width;
        }
    });
});

// ../private/client/gui/freegame/dstFreegameCounter.js 
ig.baked = true;
ig.module('client.gui.freegame.dstFreegameCounter').requires('impact.impact', 'de.adp.web.gui.freegame.basicFreegameCounter').defines(function() {
    DstFreegameCounter = BasicFreegameCounter.extend({
        parentDiv: null,
        availableGames: null,
        playedGames: null,
        lanCheck: null,
        init: function(parentdiv, lanCheck) {
            this.lanCheck = lanCheck;
            this.parentDiv = parentdiv;
            var curGameCap = '<span  class="freegame-counter-caption" id="curGameCap">Freegame </span>';
            $(this.parentDiv).append(curGameCap);
            var curGame = '<span class="freegame-counter-number" id="curGame">0</span>';
            $(this.parentDiv).append(curGame);
            var avGameCap = '<span  class="freegame-counter-caption1" id="avGameCap"> of </span>';
            $(this.parentDiv).append(avGameCap);
            var avGame = '<span  class="freegame-counter-number1" id="avGame">0</span>';
            $(this.parentDiv).append(avGame);
            $(this.parentDiv).trigger('create');
            ig.system.layoutHTMLElementAccordingToCanvas($(this.parentDiv), 85, 0, 750, 60, 65);
        },
        updateView: function() {
            console.log("Free  Game " + this.playedGames + " Of " + this.availableGames);
            $("#curGame").html(this.playedGames);
            $("#avGame").html(this.availableGames);
        },
        getClientWidth: function() {
            return ig.system.stageWidth;
        },
        translate: function(resProvider) {
            var usedCap = resProvider.getString("Bonusgame");
            var avCap = resProvider.getString("from");
            $("#curGameCap").html(usedCap);
            $("#avGameCap").html(avCap);
        },
        resize: function() {
            ig.system.layoutHTMLElementAccordingToCanvas($(this.parentDiv), 85, 0, 750, 60, 65);
        }
    });
});

// ../private/client/gui/freegame/dstFreegameDisplay.js 
ig.baked = true;
ig.module('client.gui.freegame.dstFreegameDisplay').requires('impact.impact', 'de.adp.web.gui.freegame.basicFreegameDisplay').defines(function() {
    DstFreegameDisplay = BasicFreegameDisplay.extend({
        parentDiv: null,
        rawCaption: null,
        lanCheck: null,
        init: function(parentdiv, lanCheck) {
            this.parentDiv = parentdiv;
            this.lanCheck = lanCheck;
            var curGameCap = $('<div id="freeGameDisplayCap" class="freegame-display"></div>');
            $(this.parentDiv).append(curGameCap);
            $(this.parentDiv).css("width", "100%");
            $(this.parentDiv).css("z-index", "100");
            ig.system.layoutHTMLElementAccordingToCanvas($(this.parentDiv), 193, 55, 536, 414, 65);
        },
        translate: function(resProvider) {
            var line1 = resProvider.getString("freeGameDisplayLineInside1");
            var line2 = resProvider.getString("freeGameDisplayLineInside3");
            if (line1 !== "") {
                this.rawCaption = "<p>" + line1 + " <br> 10 <br>" + line2 + "</p>";
            } else {
                this.rawCaption = "<p> 10 <br>" + line2 + "</p>";
            }
        },
        show: function(triggerResponse) {
            if (triggerResponse.gameResult.freeGamesTotal > 0) {
                var cap = null;
                cap = this.rawCaption;
                $(this.parentDiv).css("z-index", "100");
                $(this.parentDiv).css("pointer-events", "none");
                $("#freeGameDisplayCap").empty();
                $("#freeGameDisplayCap").append(cap);
            }
        },
        resize: function() {
            ig.system.layoutHTMLElementAccordingToCanvas($(this.parentDiv), 193, 55, 536, 414, 65);
        }
    });
});

// ../private/client/gui/freegame/dstSummaryDisplay.js 
ig.baked = true;
ig.module('client.gui.freegame.dstSummaryDisplay').requires('impact.impact', 'de.adp.web.gui.freegame.basicSummaryDisplay').defines(function() {
    DstSummaryDisplay = BasicSummaryDisplay.extend({
        parentDiv: null,
        triggerResponse: null,
        currencyFormatter: null,
        rawCaption: "",
        init: function(parentdiv, finishedCallback) {
            this.parentDiv = parentdiv;
            this.currencyFormatter = currencyFormatter;
            ig.system.layoutHTMLElementAccordingToCanvas($(this.parentDiv), 193, 55, 536, 414, 65);
        },
        translate: function(resProvider) {
            this.rawCaption = resProvider.getString("fg_summary_line1");
            $("#summaryDisplayCap").append(this.rawCaption);
        },
        divSetting: function() {
            var curGameCap = $('<div id="summaryDisplayCap" class="freegame-sum-display"></div>');
            $("#summary-display").empty();
            $(this.parentDiv).append(curGameCap);
            $(this.parentDiv).css("z-index", "100");
            $(this.parentDiv).css("pointer-events", "none");
            $("#summaryDisplayCap").show();
        },
        show: function(triggerResponse) {
            this.divSetting();
            var playedGames = triggerResponse.gameResult.freeGameRound;
            var wonAmount = this.currencyFormatter.getMoneyString(triggerResponse.uncommittedWinSum);
            var cap = this.rawCaption;
            cap = cap.replace('%games', playedGames);
            cap = cap.replace('%money', wonAmount);
            $("#summaryDisplayCap").append(cap);
            console.log("You played " + playedGames + " Freegames and won " + wonAmount);
        },
        resize: function() {
            ig.system.layoutHTMLElementAccordingToCanvas($(this.parentDiv), 193, 55, 536, 414, 65);
        }
    });
});

// ../private/client/gui/freegame/dstRetriggerAnimation.js 
ig.baked = true;
ig.module('client.gui.freegame.dstRetriggerAnimation').requires('impact.entity', 'de.adp.web.gui.freegame.switching.simpleRetriggerAnimation').defines(function() {
    DstRetriggerAnimation = SimpleRetriggerAnimation.extend({
        switchWithAnimation: function(triggerResponse) {
            this.clean();
            $('#freeGameDisplayCap').css({
                visibility: 'visible'
            });
            this.triggerResponse = triggerResponse;
            this.gameGui.darkeningLayer.visible = false;
            this.animationStartTime = ig.system.now();
            this.durationInMilliseconds = this.gameGui.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_ChooseSymbol_2");
            this.timeToHideFreegameDisplay = this.durationInMilliseconds;
            this.isAnimating = true;
            this.gameGui.sceneManager.getActiveScene().addChild(this);
            this.gameGui.casino.soundPlayer.playEffect("SFX_ChooseSymbol_2");
            this.gameGui.bannerAnimation.startAniLast();
            this.gameGui.winAnimation.clean();
        },
        stopAnimation: function() {
            $('#freeGameDisplayCap').css({
                visibility: 'hidden'
            });
            this.gameGui.bannerAnimation.cleanFeature();
            this.parent();
        },
        skipAnimation: function() {}
    });
});


// ../private/de/adp/web/gui/freegame/switching/simpleSwitchInAnimation.js 
ig.baked = true;
ig.module('de.adp.web.gui.freegame.switching.simpleSwitchInAnimation').requires('impact.impact', 'de.adp.web.gui.freegame.switching.simpleSwitchAnimation', 'impact.entity').defines(function() {
    SimpleSwitchInAnimation = SimpleSwitchAnimation.extend({
        init: function(mainGui, fgCounter, fgDisplay, fgBackground) {
            this.parent(mainGui, fgCounter, fgDisplay, fgBackground);
        },
        switchImmediatly: function(triggerResponse) {
            if (this.counter !== null) {
                this.counter.blendIn(0);
            }
            if (this.background !== null && this.gameGui !== null) {
                this.background.switchToFree();
                $('#main').removeClass('frame-background');
                $('#main').addClass('frame-background-free');
                this.switchTerminalElements();
            }
        },
        switchTerminalElements: function() {
            $('#terminal-frame').removeClass('terminal-frame-bg');
            $('#terminal-frame').addClass('terminal-frame-bg-free');
            $('#terminal-bar').removeClass('terminal-bar-bg');
            $('#terminal-bar').addClass('terminal-bar-bg-free');
            $('#terminal-meter').removeClass('terminal-meter-bg');
            $('#terminal-meter').addClass('terminal-meter-bg-free');
            this.gameGui.facade.sendNotification(PaytableIDs.NOTIFICATION_SWITCH_APPEARANCE, {
                gameMode: "FREEGAME"
            });
        },
        update: function() {
            this.parent();
            if (this.timeSinceAnimationStarted >= this.timeToDisplayCounter && this.counter !== null && !this.counterDisplayed) {
                this.counter.blendIn();
                this.counterDisplayed = true;
            }
            if (this.timeSinceAnimationStarted >= this.timeToDisplayFreegameDisplay && this.display !== null && !this.freegameDisplayDisplayed) {
                this.display.show(this.triggerResponse);
                this.display.blendIn();
                this.freegameDisplayDisplayed = true;
                this.isSkippingAllowed = true;
            }
            if (this.timeSinceAnimationStarted >= this.timeToHideFreegameDisplay && this.display !== null && !this.freegameDisplayHidden) {
                this.display.blendOut();
                this.freegameDisplayHidden = true;
                this.isSkippingAllowed = false;
            }
            if (this.timeSinceAnimationStarted >= this.timeToSwitchBackground && this.background !== null && this.gameGui !== null && !this.backgroundSwitched) {
                $('#main').removeClass('frame-background');
                $('#main').addClass('frame-background-free');
                this.background.switchToFree();
                this.backgroundSwitched = true;
                this.switchTerminalElements();
            }
            if (this.timeSinceAnimationStarted >= this.durationInMilliseconds) {
                this.stopAnimation();
            }
        }
    });
});

// ../private/client/gui/freegame/dstSwitchInAnimation.js 
ig.baked = true;
ig.module('client.gui.freegame.dstSwitchInAnimation').requires('impact.entity', 'de.adp.web.gui.freegame.switching.simpleSwitchInAnimation').defines(function() {
    DstSwitchInAnimation = SimpleSwitchInAnimation.extend({
        stopAnimation: function() {},
        custStopAnimation: function() {
            this.isAnimating = false;
            this.gameGui.sceneManager.getActiveScene().removeChild(this);
            this.callback();
            this.gameGui.casino.soundPlayer.playAmbient("SFX_FreegameLoop");
        },
        switchWithAnimation: function(triggerResponse) {
            this.clean();
            this.triggerResponse = triggerResponse;
            this.gameGui.darkeningLayer.visible = false;
            this.animationStartTime = ig.system.now();
            this.isAnimating = true;
            this.gameGui.sceneManager.getActiveScene().addChild(this);
            this.durationInMilliseconds = this.gameGui.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_FreeGamesIn");
            this.timeToHideFreegameDisplay = 2;
            $('#curGameCap').hide();
            $('#curGame').hide();
            $('#avGameCap').hide();
            $('#avGame').hide();
            this.switchTerminalElements();
        },
        skipAnimation: function() {}
    });
});

// ../private/client/gui/freegame/dstSwitchOutAnimation.js 
ig.baked = true;
ig.module('client.gui.freegame.dstSwitchOutAnimation').requires('de.adp.web.gui.freegame.switching.simpleSwitchOutAnimation').defines(function() {
    DstSwitchOutAnimation = SimpleSwitchOutAnimation.extend({
        switchWithAnimation: function(triggerResponse) {
            this.clean();
            this.gameGui.winAnimation.clean();
            this.triggerResponse = triggerResponse;
            this.gameGui.darkeningLayer.visible = false;
            this.animationStartTime = ig.system.now();
            this.isAnimating = true;
            this.gameGui.sceneManager.getActiveScene().addChild(this);
            this.durationInMilliseconds = this.gameGui.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_FreeGamesOut");
            this.timeToHideFreegameDisplay = this.durationInMilliseconds;
            this.gameGui.casino.soundPlayer.stopAmbient();
            this.gameGui.casino.soundPlayer.playEffect("SFX_FreeGamesOut");
            this.gameGui.bannerAnimation.startAniLast();
            this.timeToSwitchBackground = this.durationInMilliseconds;
            this.switchTerminalElements();
        },
        switchImmediatly: function(triggerResponse) {
            this.parent(triggerResponse);
            this.gameGui.casino.soundPlayer.stopAmbient();
        },
        stopAnimation: function() {
            this.parent();
            this.gameGui.bannerAnimation.cleanFeature();
        },
        skipAnimation: function() {}
    });
});

// ../private/client/gui/filters/dtsTextFilter.js 
ig.baked = true;
ig.module("client.gui.filters.dtsTextFilter").requires("de.adp.web.gui.filters.textFilter").defines(function() {
    DtsTextFilter = TextFilter.extend({
        init: function() {},
        apply: function(context, text, position) {
            context.shadowColor = "#FFFF00";
            context.shadowOffsetX = -2;
            context.shadowOffsetY = 0;
            context.shadowBlur = 3;
            context.shadowColor = "#FFFF00";
            context.shadowOffsetX = 0;
            context.shadowOffsetY = -2;
            context.shadowBlur = 3;
            context.shadowColor = "#FFFF00";
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 2;
            context.shadowBlur = 3;
            context.shadowColor = "#FFFF00";
            context.shadowOffsetX = 2;
            context.shadowOffsetY = 0;
            context.shadowBlur = 3;
        }
    });
});

// ../private/client/gui/freegame/dstFeature.js 
ig.baked = true;
ig.module('client.gui.freegame.dstFeature').requires('impact.node', 'impact.impact', 'impact.image', 'client.gui.filters.dtsTextFilter').defines(function() {
    DstFeature = ig.Node.extend({
        frameCount: 0,
        showReWinCallback: null,
        showPlayCallback: null,
        animStart: false,
        parentDiv: null,
        casino: null,
        selectionImage: [],
        selectedSymbol: null,
        checkslected: false,
        countVal: 0,
        bgAniReff: null,
        symbolvisisblecheck: null,
        imagePosition: [6, 8, 5, 4, 7, 3, 2, 1, 0],
        timeSinceAnimationStarted: 0,
        chooseSymbolSoundLenght: 0,
        FreegameInSoundLenght: 0,
        isSelectableImageAdd: false,
        isSelectedDisplayed: true,
        isBannerDispy: true,
        paytable: null,
        init: function(parentdiv, x, y, settings) {
            this.parent(x, y, settings);
            this.parentDiv = parentdiv;
            this.addImage();
        },
        divSetting: function() {
            var curGameCap = $('<div id="featureText" class="feture-text-display"></div>');
            $("#summary-display").empty();
            $(this.parentDiv).append(curGameCap);
            $(this.parentDiv).show();
            ig.system.layoutHTMLElementAccordingToCanvas($(this.parentDiv), 193, 85, 536, 414, 65);
            this.visible = true;
        },
        registerReWinCallback: function(callback, callbackfinish) {
            this.showReWinCallback = callback;
            this.showPlayCallback = callbackfinish;
        },
        animationStop: function(aniReff) {
            this.bgAniReff = aniReff;
        },
        dispalyText: function() {
            this.divSetting();
            $(this.parentDiv).css("z-index", "100");
            $(this.parentDiv).css("pointer-events", "none");
            var line1 = this.casino.resourceProvider.getString("freeGameDisplayLine1");
            var line2 = this.casino.resourceProvider.getString("freeGameDisplayLine3");
            var freeGameDispayText = "";
            if (line1 !== "") {
                freeGameDispayText = "<p>" + line1 + " <br> 10 <br>" + line2 + "</p>";
            } else {
                freeGameDispayText = "<p> 10 <br>" + line2 + "</p>";
            }
            $("#featureText").empty();
            $("#featureText").append(freeGameDispayText);
        },
        showMessage: function() {
            this.casino.soundPlayer.playEffect("SFX_ChooseSymbol_1");
            this.linetext = new TextBox(193, 5, 536, 30);
            this.linetext._context = ig.system.context;
            this.linetext.setTextFormat(28, "sans-serif", "bold", "#BE1507", "center");
            this.linetext.setText(this.casino.resourceProvider.getString("choose_symbol"));
            this.linetext.addTextFilter(new DtsTextFilter());
            this.addChild(this.linetext);
            $("#featureText").hide();
        },
        startDispalyAni: function() {
            this.running = true;
            this.visible = true;
            this.animStart = true;
            this.casino.soundPlayer.playEffect("SFX_FreeGamesIn");
            this.chooseSymbolSoundLenght = this.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_ChooseSymbol_1");
            this.FreegameInSoundLenght = this.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_FreeGamesIn");
            this.timeSinceAnimationStarted = ig.system.now();
        },
        addImage: function() {
            var positionx = 285;
            var positiony = 100;
            for (var i = 0; i < 9; i++) {
                this.selectionImage[i] = new ig.Image("private/media/DSTgfx/freegamedisplay/" + i + ".png");
                if (i === 3 || i === 6) {
                    positiony = positiony + 103;
                    positionx = 285;
                }
                if (i !== 0 && i !== 3 && i !== 6) {
                    positionx = positionx + 120;
                }
                this.selectionImage[i].pos = {
                    x: positionx,
                    y: positiony
                };
                this.selectionImage[i].visible = false;
                this.addChild(this.selectionImage[i]);
            }
        },
        addImageRe: function(xposition, yposition) {
            if (this.selectionImage[8] !== undefined && this.checkslected === false) {
                if (xposition > 285 && xposition < 405) {
                    if (yposition > 100 && yposition < 203) {
                        this.selectionImage[0].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                    if (yposition > 204 && yposition < 303) {
                        this.selectionImage[3].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                    if (yposition > 304 && yposition < 404) {
                        this.selectionImage[6].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                }
                if (xposition > 406 && xposition < 525) {
                    if (yposition > 100 && yposition < 203) {
                        this.selectionImage[1].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                    if (yposition > 204 && yposition < 303) {
                        this.selectionImage[4].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                    if (yposition > 304 && yposition < 403) {
                        this.selectionImage[7].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                }
                if (xposition > 526 && xposition < 645) {
                    if (yposition > 100 && yposition < 203) {
                        this.selectionImage[2].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                    if (yposition > 204 && yposition < 303) {
                        this.selectionImage[5].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                    if (yposition > 304 && yposition < 403) {
                        this.selectionImage[8].visible = false;
                        this.isSelectableImageAdd = false;
                        this.imageVisiblitycheck();
                    }
                }
            }
        },
        update: function() {
            if (!this.running) {
                return;
            }
            this.parent();
            var now = ig.system.now();
            if (this.timeSinceAnimationStarted + this.FreegameInSoundLenght < now && this.isSelectableImageAdd === true) {
                if (ig.input.pressed('skipReel')) {
                    this.addImageRe(ig.input.mouse.x, ig.input.mouse.y);
                }
            }
            if (this.selectedSymbol !== null && this.isSelectedDisplayed === false) {
                if (this.selectionImage[this.symbolvisisblecheck].visible === false) {
                    if (this.countVal === 5) {
                        this.selectionImage[this.symbolvisisblecheck].visible = true;
                        this.countVal = 0;
                    }
                } else {
                    if (this.countVal === 5) {
                        this.selectionImage[this.symbolvisisblecheck].visible = false;
                        this.countVal = 0;
                    }
                }
                this.countVal++;
            }
            if (this.animStart === true) {
                if ((this.timeSinceAnimationStarted + this.chooseSymbolSoundLenght + this.FreegameInSoundLenght + 100) > now) {
                    this.frameCount++;
                    if (this.timeSinceAnimationStarted + (this.FreegameInSoundLenght / 2) < now && this.isBannerDispy === true) {
                        this.dispalyText();
                        this.isBannerDispy = false;
                    }
                    if ((this.timeSinceAnimationStarted + this.FreegameInSoundLenght) < now && this.isSelectedDisplayed === true) {
                        this.isSelectedDisplayed = false;
                        this.showReWinCallback();
                        this.showMessage();
                        for (var i = 0; i < 9; i++) {
                            this.selectionImage[i].visible = true;
                        }
                        this.isSelectableImageAdd = true;
                    }
                    if (((this.timeSinceAnimationStarted + this.chooseSymbolSoundLenght + this.FreegameInSoundLenght) - 2000) < now && this.selectedSymbol === null) {
                        this.selectedSymbol = Math.floor((Math.random() * 9));
                        this.selectionImage[this.selectedSymbol].visible = false;
                        this.imageVisiblitycheck();
                    }
                } else {
                    if ((this.timeSinceAnimationStarted + this.chooseSymbolSoundLenght + this.FreegameInSoundLenght) < now) {
                        this.showPlayCallback();
                        this.paytable.setChoosenSymbol(this.selectedSymbol);
                        this.cleanFeature();
                    }
                }
            }
        },
        imageVisiblitycheck: function() {
            for (var a = 0; a < this.selectionImage.length; a++) {
                if (this.selectionImage[a].visible === false) {
                    this.symbolvisisblecheck = a;
                    this.checkslected = true;
                    this.selectedSymbol = this.imagePosition[a];
                    break;
                }
            }
        },
        cleanFeature: function() {
            this.running = false;
            this.FreegameInSoundLenght = 0;
            this.chooseSymbolSoundLenght = 0;
            this.timeSinceAnimationStarted = 0;
            this.frameCount = 0;
            this.animStart = false;
            this.symbolvisisblecheck = null;
            this.checkslected = false;
            this.bgAniReff.cleanFeature();
            this.selectedSymbol = null;
            $('#curGameCap').show();
            $('#curGame').show();
            $('#avGameCap').show();
            $('#avGame').show();
            this.linetext.visible = false;
            this.isSelectableImageAdd = false;
            this.isSelectedDisplayed = true;
            this.isBannerDispy = true;
            for (var a = 0; a < this.selectionImage.length; a++) {
                this.selectionImage[a].visible = false;
            }
        },
        resize: function() {
            ig.system.layoutHTMLElementAccordingToCanvas($(this.parentDiv), 193, 85, 536, 414, 65);
        }
    });
});

// ../private/client/payline/dstStandardWinAnimation.js 
ig.baked = true;
ig.module('client.payline.dstStandardWinAnimation').requires('de.adp.web.payline.standardWinAnimation').defines(function() {
    DstStandardWinAnimation = StandardWinAnimation.extend({
        checkfree: false,
        isScatterLoopAnim: false,
        darkeningLayer: null,
        buildWinningLines: function(response) {
            this.minimumAnimationLengthInMilliseconds = 250;
            if (this.checkfree === true) {
                this.gameResult = response;
                this.checkfree = false;
                this.customBuildWinningLines(response);
                this.startAnimation(this.darkeningLayer);
            } else {
                this.parent(response);
            }
        },
        customBuildWinningLines: function(response) {
            var wins = new Array();
            var scatterAni = null;
            for (var i = 0; i < this.gameResult.winnings.length; i++) {
                var win = this.gameResult.winnings[i];
                if (!this.isWinLine(win)) {
                    continue;
                }
                var lineAni = new WinLine(this.casino);
                wins.push(win);
                var lineGfx = this.lineContainer.getWinLineById(win.lineId);
                lineAni.addLineGfx(lineGfx);
                lineAni.winSum = win.winSum;
                this.lineGfxLayer.addChild(lineAni.getLine());
                if (win.items.length > 0 && win.items !== undefined && win.items !== null) {
                    for (var e = 0; e < win.items.length; e++) {
                        var winItem = win.items[e];
                        var position = winItem.point;
                        var reel = this.reelContainer.getReelById(position.x);
                        var symbol = reel.getSymbolAtRow(position.y);
                        var winSymbol = this.getMostValuableAnimationForPosition(position, symbol);
                        winSymbol.pos.x = reel.position().x;
                        winSymbol.pos.y = symbol.pos.y + reel.position().y;
                        lineAni.addSymbol(winSymbol);
                        var border = lineGfx.getBorder().getClone();
                        border.pos.x = winSymbol.pos.x;
                        border.pos.y = winSymbol.pos.y;
                        lineAni.addBorder(border);
                    }
                    lineAni.addLineResult(win);
                    this.addLineAnimation(lineAni, win);
                }
            }
        },
        startAnimation: function(darkeningLayer) {
            for (var k = 0; k < this.gameResult.winnings.length; k++) {
                this.lineContainer.lines[this.gameResult.winnings[k].lineId].setVisible(false, true);
            }
            this.darkeningLayer = darkeningLayer;
            this.parent(darkeningLayer);
        },
        clean: function() {
            this.parent();
            this.isScatterLoopAnim = false;
        },
        update: function() {
            this.parent();
            if (this.isScatterLoopAnim) {
                if (this.animations[this.animations.length - 1].symbols[0].currentAnim.frame === this.animations[this.animations.length - 1].symbols[0].currentAnim.sequence.length - 1) {
                    this.isScatterLoopAnim = false;
                    for (var q = 0; q < this.animations[this.animations.length - 1].symbols.length; q++) {
                        this.animations[this.animations.length - 1].symbols[q].currentAnim = this.availableSymbols[9].anims.scatterLoop.rewind();
                    }
                }
            }
        },
        adjustAnimationLengthToSoundLength: function(sound) {
            if (sound !== null && this.casino.soundPlayer.soundOn && this.casino.soundPlayer.ready) {
                this.singleAnimationLengthInMilliseconds = this.casino.soundPlayer.getSoundLengthInMilliSeconds(sound.sndID) - 100;
                if (this.singleAnimationLengthInMilliseconds < this.minimumAnimationLengthInMilliseconds) {
                    this.singleAnimationLengthInMilliseconds = this.minimumAnimationLengthInMilliseconds;
                }
            } else {
                this.singleAnimationLengthInMilliseconds = Math.floor(this.totalDurationInMilliseconds / this.animations.length);
            }
        },
        startSummaryAnimation: function() {
            this.parent();
            if (this.animations[this.animations.length - 1].lineGfx.lineId === 0)
                this.isScatterLoopAnim = true;
        }
    });
});

// ../private/client/gui/freegame/dstFeatureAni.js 
ig.baked = true;
ig.module('client.gui.freegame.dstFeatureAni').requires('impact.node', 'impact.impact', 'impact.image').defines(function() {
    DstFeatureAni = ig.Node.extend({
        imageCount: 0,
        animStart: false,
        displayAnimationImg: [],
        init: function() {
            for (var i = 0; i < 59; i++) {
                var n = String(i < 10 ? '0' + i : i);
                var img = new ig.Image("private/media/DSTgfx/DRTRF/drtr_feature_1" + n + ".png");
                img.pos = {
                    x: 193,
                    y: 55
                };
                img.visible = false;
                this.displayAnimationImg.push(img);
                this.addChild(img);
            }
            this.visible = true;
        },
        startAni: function() {
            for (var a = 0; a < this.displayAnimationImg.length; a++) {
                this.displayAnimationImg[a].visible = false;
            }
            this.visible = true;
            this.animStart = true;
            this.imageCount = 0;
        },
        startAniLast: function() {
            for (var a = 0; a < this.displayAnimationImg.length; a++) {
                this.displayAnimationImg[a].visible = false;
            }
            this.visible = true;
            this.animStart = true;
            this.imageCount = 38;
        },
        update: function() {
            if (this.animStart === true) {
                if (this.imageCount - 1 >= 0) {
                    this.displayAnimationImg[this.imageCount - 1].visible = false;
                }
                this.displayAnimationImg[this.imageCount].visible = true;
                if (this.imageCount === 38) {
                    this.displayAnimationImg[58].visible = false;
                }
                if (this.imageCount === 58) {
                    this.imageCount = 38;
                } else {
                    this.imageCount++;
                }
            }
        },
        cleanFeature: function() {
            this.visible = false;
            this.animStart = false;
        }
    });
});

// ../private/client/paytable/wildCaptioinPayGroup.js 
ig.baked = true;
ig.module("client.paytable.wildCaptioinPayGroup").requires("impact.impact", "de.adp.web.paytable.elements.payGroup").defines(function() {
    WildCaptionPayGroup = PayGroup.extend({
        cap1: null,
        cap2: null,
        text: null,
        text1: null,
        init: function(id, payGroupMemberIds, symbolGfxPath, occurences) {
            this.parent(id, payGroupMemberIds, symbolGfxPath, occurences);
            this.addCaptionBelowImage("WILD", "paytable-image-caption");
            this.translate = this.translate.bind(this);
            this.onDisplay = this.onDisplay.bind(this);
        },
        translate: function(resProvider) {
            this.text = resProvider.getString("pt_line1") + "<br>" + resProvider.getString("pt_lineplus") + "<br> " + resProvider.getString("pt_line3") + "<br>" + resProvider.getString("pt_line2");
            this.text1 = resProvider.getString("pt_line1") + "<br><br>" + resProvider.getString("pt_free_line1") + "<br> " + resProvider.getString("pt_free_line2") + "<span class='Selected_Image'>  <img id='Selected_Symbol' src=private/media/DSTgfx/10_selected_reel.jpg /><br></span>";
            this.cap1 = this.addSupportText(this.text, "paytable-caption");
        },
        addSupportText: function(localeKey, styleClasses) {
            if (styleClasses === undefined || styleClasses === null) {
                styleClasses = "";
            }
            var cap = $("<p class='" + styleClasses + "'>" + localeKey + "</p>");
            $(this._valueBox).empty()
            $(this._valueBox).append(cap);
            if (this.payItems.length < 1) {
                $(this._valueBox).addClass("paygroup-valueBox-onlyText");
            }
            return cap;
        },
        onDisplay: function() {
            ig.system.fitTextInto(this.cap1);
        },
        freegamePaytableIn: function() {
            this.cap2 = this.addSupportText(this.text1, "paytable-caption");
            ig.system.fitTextInto(this.cap2);
        },
        freegamePaytableOut: function() {
            this.cap1 = this.addSupportText(this.text, "paytable-caption");
            ig.system.fitTextInto(this.cap1);
        }
    });
});

// ../private/client/paytable/dstPaytable.js 
ig.baked = true;
ig.module('client.paytable.dstPaytable').requires('impact.impact', 'de.adp.web.paytable.paytable').defines(function() {
    DstPaytable = Paytable.extend({
        wildGroup: null,
        createWildGroup: function(paygroup) {
            this.wildGroup = paygroup;
        },
        switchToFree: function() {
            this.wildGroup.freegamePaytableIn();
        },
        switchToNormal: function() {
            this.wildGroup.freegamePaytableOut();
        },
        setChoosenSymbol: function(id) {}
    });
});

// ../private/client/sound/trigger/dstDragoneWinSound.js 
ig.baked = true;
ig.module("client.sound.trigger.dstDragoneWinSound").requires("de.adp.web.sound.trigger.winOrderSound").defines(function() {
    DstDragoneWinSound = WinOrderSound.extend({
        fulfilled: function(result, lineId, animationIndex) {
            for (var i = 0; i < result.winnings.length; i++) {
                if (result.winnings[i].lineId == lineId) {
                    for (var j = 0; j < result.winnings[i].items.length; j++) {
                        if (result.winnings[i].items[j].symbol === 9 && animationIndex === this.order) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
    });
});

// ../private/client/symbol/trigger/selectedfreegameOccurenceTrigger.js 
ig.baked = true;
ig.module("client.symbol.trigger.selectedfreegameOccurenceTrigger").requires("de.adp.web.symbol.trigger.occurrenceTrigger").defines(function() {
    SelectedfreegameOccurenceTrigger = OccurrenceTrigger.extend({
        triggeredBy: function(lineResult, result) {
            return (this.occurrences.indexOf(lineResult.highlight.occurrence) !== -1 && result.freeGameRound > 0 && result.parameters.SELECTED_SYMBOL === undefined && result._childGameResult === null) ? true : false;
        }
    });
});

// ../private/client/symbol/trigger/dstfreegameAndOccurrenceTrigger.js 
ig.baked = true;
ig.module("client.symbol.trigger.dstfreegameAndOccurrenceTrigger").requires("de.adp.web.symbol.trigger.occurrenceTrigger").defines(function() {
    DstFreegameAndOccurrenceTrigger = OccurrenceTrigger.extend({
        triggeredBy: function(lineResult, result) {
            return (this.occurrences.indexOf(lineResult.highlight.occurrence) !== -1 && result.freeGameRound > 0 && result.parameters.SELECTED_SYMBOL !== undefined) ? true : false;
        }
    });
});

// ../private/client/symbol/trigger/dstfreegameAnimationTrigger.js 
ig.baked = true;
ig.module("client.symbol.trigger.dstfreegameAnimationTrigger").requires("de.adp.web.symbol.trigger.symbolTrigger").defines(function() {
    DstFreegameAnimationTrigger = SymbolTrigger.extend({
        triggeredBy: function(lineResult, result) {
            return result.freeGameRound > 0 && lineResult === null && result.parameters.SELECTED_SYMBOL !== undefined;
        }
    });
});

// ../private/client/symbol/trigger/selectedfreegameAnimationTrigger.js 
ig.baked = true;
ig.module("client.symbol.trigger.selectedfreegameAnimationTrigger").requires("de.adp.web.symbol.trigger.symbolTrigger").defines(function() {
    SelectedFreegameAnimationTrigger = SymbolTrigger.extend({
        symbolID: null,
        init: function(symId) {
            this.symbolID = symId;
        },
        triggeredBy: function(lineResult, result, symbolID) {
            return result.freeGameRound > 0 && result.parameters.SELECTED_SYMBOL === this.symbolID && lineResult === null;
        }
    });
});

// ../private/client/symbol/trigger/scatterOccurrenceTrigger.js 
ig.baked = true;
ig.module("client.symbol.trigger.scatterOccurrenceTrigger").requires("de.adp.web.symbol.trigger.occurrenceTrigger").defines(function() {
    ScatterOccurrenceTrigger = OccurrenceTrigger.extend({
        triggeredBy: function(lineResult, result) {
            if (result.winnings[result.winnings.length - 1].lineId === 0) {
                return true;
            }
            return false;
        }
    });
});

// ../private/client/paytable/specialItems.js 
ig.baked = true;
ig.module("client.paytable.specialItems").requires("impact.entity").defines(function() {
    SpecialItems = ig.Entity.extend({
        gfx: null,
        possibleItems: [],
        possibleGfxName: ["10", "j", "q", "k", "a", "sword", "treasure", "hagen", "siegfried"],
        init: function() {
            this.createItemGraphics();
        },
        createItemGraphics: function() {
            for (var i = 0; i < this.possibleGfxName.length; i++) {
                var fx = new ig.Image("private/media/DSTgfx/" + this.possibleGfxName[i] + "_selected_reel.jpg");
                this.possibleItems.push(fx);
            }
        },
        draw: function() {
            if (this.gfx !== null) {
                ig.system.context.drawImage(this.gfx, 396, 415, 126, 114);
            }
        },
        createScaledVersion: function(gfx) {},
        setSpecialItem: function(id) {
            if (id >= 0 && id <= 8) {
                this.gfx = this.possibleItems[id].getScaledVersion(0.9);
            } else {
                this.gfx = null;
            }
        }
    });
});

// ../private/client/paytable/dtCanvasPaytable.js 
ig.baked = true;
ig.module("client.paytable.dtCanvasPaytable").requires("de.adp.web.paytable.canvasPaytable", "de.adp.web.gui.elements.textBox", "client.paytable.specialItems").defines(function() {
    DTCanvasPaytable = CanvasPaytable.extend({
        _scatterLine1: "",
        _scatterLine2: "",
        _scatterLine3: "",
        _lineSelectable: "",
        _freeLine1: "",
        _freeLine2: "",
        _specialItems: null,
        _dragon: null,
        _fillGradient1: null,
        _fillGradient2: null,
        _fillGradient3: null,
        _fillGradient4: null,
        init: function(background) {
            this.parent(background, new ig.Image("private/media/DSTgfx/hg2_fg.jpg"));
            this._fillGradient1 = {
                colors: [{
                    value: 0,
                    color: "#CA4900"
                }, {
                    value: 0.5,
                    color: "#FFFF00"
                }, {
                    value: 1,
                    color: "#CA4900"
                }]
            };
            this.createWildTextLine();
            this._dragon = new ig.Image("private/media/DSTgfx/dragon_small.png");
            this.addChild(this._dragon);
            this._dragon.pos.x = 299;
            this._dragon.pos.y = 317;
            this._dragon.visible = false;
        },
        createWildTextLine: function() {
            var outlineTextFilter = new OutlineTextFilter(8, "#000000");
            var shadowTextFilter = new OutlineTextFilter(8, "#000000");
            this._scatterLine1 = new TextBox(290, 276, 340, 40);
            this._scatterLine2 = new TextBox(290, 327, 340, 26);
            this._scatterLine3 = new TextBox(290, 355, 340, 26);
            this._lineSelectable = new TextBox(397, 457, 126, 26);
            this._scatterLine1.setTextFormat(40, "Arial", "bold", "#FFE400", "center", "middle");
            this._scatterLine2.setTextFormat(26, "Arial", "bold", "#FFE400", "center", "middle");
            this._scatterLine3.setTextFormat(26, "Arial", "bold", "#FFE400", "center", "middle");
            this._lineSelectable.setTextFormat(26, "Arial", "bold", "#FFE400", "center", "middle");
            this._scatterLine1.setFillGradient(this._fillGradient1);
            this._scatterLine2.setFillGradient(this._fillGradient1);
            this._scatterLine3.setFillGradient(this._fillGradient1);
            this._lineSelectable.setFillGradient(this._fillGradient1);
            this.addChild(this._scatterLine1);
            this.addChild(this._scatterLine2);
            this.addChild(this._scatterLine3);
            this.addChild(this._lineSelectable);
            this._scatterLine1.addTextFilter(outlineTextFilter);
            this._scatterLine2.addTextFilter(outlineTextFilter);
            this._scatterLine3.addTextFilter(outlineTextFilter);
            this._lineSelectable.addTextFilter(outlineTextFilter);
            this._lineSelectable.rotateAroundCenter(-30);
            this._freeLine1 = new TextBox(360, 344, 265, 26);
            this._freeLine2 = new TextBox(290, 373, 335, 26);
            this._freeLine1.setFillGradient(this._fillGradient1);
            this._freeLine2.setFillGradient(this._fillGradient1);
            this._freeLine1.setTextFormat(24, "Arial", "bold", "#FFE400", "center");
            this._freeLine2.setTextFormat(24, "Arial", "bold", "#FFE400", "center");
            this.addChild(this._freeLine1);
            this.addChild(this._freeLine2);
            this._freeLine1.addTextFilter(outlineTextFilter);
            this._freeLine2.addTextFilter(outlineTextFilter);
            this._freeLine1.visible = false;
            this._freeLine2.visible = false;
        },
        translate: function(resProv) {
            switch (resProv.localeID) {
                case "en":
                    break;
                case "de":
                    break;
                case "pl":
                    this._freeLine1.pos.x = 365;
                    this._freeLine1.pos.y = 325;
                    this._freeLine2.pos.x = 305;
                    this._freeLine2.pos.y = 355;
                    break;
                case "cs":
                    this._freeLine1.pos.x = 335;
                    this._freeLine2.pos.x = 298;
                    break;
                case "hu":
                    break;
                case "es":
                    this._freeLine1.pos.y = 325;
                    this._freeLine2.pos.x = 315;
                    this._freeLine2.pos.y = 355;
                    break;
                case "it":
                    break;
                case "tr":
                    this._freeLine1.pos.x = 365;
                    this._freeLine1.pos.y = 325;
                    break;
                case "ru":
                    this._freeLine1.pos.x = 365;
                    this._freeLine1.pos.y = 325;
                    this._freeLine2.pos.x = 305;
                    this._freeLine2.pos.y = 355;
                    break;
                case "hr":
                    this._freeLine1.pos.x = 350;
                    break;
                case "sr":
                    this._freeLine1.pos.x = 350;
                    break;
                case "fi":
                    break;
                case "nl":
                    break;
                case "nb":
                    break;
                case "pt":
                    this._freeLine1.pos.x = 365;
                    this._freeLine1.pos.y = 325;
                    this._freeLine2.pos.x = 305;
                    this._freeLine2.pos.y = 355;
                    break;
                case "sv":
                    break;
                case "fr":
                    break;
                case "da":
                    break;
            }
            this._scatterLine1.setText(resProv.getString("pt_line1"));
            this._scatterLine2.setText(resProv.getString("pt_lineplus"));
            this._scatterLine3.setText(resProv.getString("pt_line2"));
            this._lineSelectable.setText(resProv.getString("pt_line3"));
            this._freeLine1.setText(resProv.getString("pt_free_line1"));
            this._freeLine2.setText(resProv.getString("pt_free_line2"));
            this._freeLine2.adjustTextSize(this._freeLine1.getScaleDownRatio());
        },
        switchToFree: function() {
            this.parent();
            if (this._specialItems === null) {
                this.createSpecialItems();
            }
            this._specialItems.setSpecialItem(-1);
            this.addChild(this._specialItems);
            this._freeLine2.visible = true;
            this._freeLine1.visible = true;
            this._scatterLine2.visible = false;
            this._scatterLine3.visible = false;
            this._lineSelectable.visible = false;
            this._dragon.visible = true;
        },
        switchToNormal: function() {
            this.parent();
            this.removeChild(this._specialItems);
            this._freeLine2.visible = false;
            this._freeLine1.visible = false;
            this._scatterLine2.visible = true;
            this._scatterLine3.visible = true;
            this._lineSelectable.visible = true;
            this._dragon.visible = false;
        },
        createSpecialItems: function() {
            this._specialItems = new SpecialItems();
        },
        setChoosenSymbol: function(id) {
            if (this._specialItems === null) {
                this.createSpecialItems();
            }
            this._specialItems.setSpecialItem(id);
        }
    });
});

// ../private/client/gui/dstGui.js 
ig.baked = true;
ig.module('client.gui.dstGui').requires('de.adp.web.gui.freeGameGui', 'de.adp.web.payline.standardWinAnimation', 'de.adp.web.payline.lineNumber', 'de.adp.web.payline.lineContainer', 'de.adp.web.reel.reelContainer', 'de.adp.web.sound.trigger.oddsDependendSound', 'de.adp.web.sound.trigger.winOrderSound', 'de.adp.web.sound.trigger.teaserSound', 'de.adp.web.sound.trigger.suspenseSound', 'de.adp.web.symbol.symbol', 'de.adp.web.border.border', 'de.adp.web.gui.freegame.switching.simpleRetriggerAnimation', 'de.adp.web.gui.freegame.switching.simpleSwitchOutAnimation', 'de.adp.web.paytable.paytable', 'de.adp.web.paytable.elements.headerGroup', 'de.adp.web.paytable.elements.payGroup', 'de.adp.web.paytable.elements.payItem', 'de.adp.web.paytable.elements.canvasPaygroup', 'de.adp.web.paytable.elements.canvasPayitem', 'de.adp.web.symbol.trigger.standardReelSymbolTrigger', 'de.adp.web.symbol.trigger.freegameAnimationTrigger', "de.adp.web.symbol.trigger.freegameAndOccurrenceTrigger", "de.adp.web.symbol.trigger.occurrenceAndPurityTrigger", 'de.adp.web.symbol.trigger.occurrenceTrigger', 'de.adp.web.sound.trigger.winOrderSound', 'de.adp.web.gui.elements.switchableBackground', 'client.gui.freegame.dstFreegameCounter', 'client.gui.freegame.dstFreegameDisplay', 'client.gui.freegame.dstSummaryDisplay', 'client.gui.freegame.dstRetriggerAnimation', 'client.gui.freegame.dstSwitchInAnimation', 'client.gui.freegame.dstSwitchOutAnimation', 'client.gui.freegame.dstFeature', 'client.payline.dstStandardWinAnimation', 'client.gui.freegame.dstFeatureAni', 'client.paytable.wildCaptioinPayGroup', 'client.paytable.dstPaytable', 'client.sound.trigger.dstDragoneWinSound', 'client.symbol.trigger.selectedfreegameOccurenceTrigger', 'client.symbol.trigger.dstfreegameAndOccurrenceTrigger', 'client.symbol.trigger.dstfreegameAnimationTrigger', 'client.symbol.trigger.selectedfreegameAnimationTrigger', 'client.symbol.trigger.scatterOccurrenceTrigger', 'client.paytable.dtCanvasPaytable').defines(function() {
    DSTGui = FreeGameGui.extend({
        freeGameTriger: null,
        fgCounter: null,
        freeGamePlayed: false,
        SELECTED_SYMBOL: null,
        bannerAnimation: null,
        switchIn: null,
        selectedSymbolPaygroup: [],
        paygroup: [],
        symbolReplace: [],
        selectedsymbol: null,
        replaceID: 0,
        isReplaceStrat: false,
        timerValue: 0,
        curTimer: 20,
        isFreeGameLoopPlaying: false,
        speicialSymbol: null,
        borderTemplate1: new Border("private/media/DSTgfx/rahmen1_3.png"),
        borderTemplate2: new Border("private/media/DSTgfx/rahmen4.png"),
        borderTemplate3: new Border("private/media/DSTgfx/rahmen5.png"),
        init: function(casino) {
            this.parent(casino);
            this.bannerAnimation = new DstFeatureAni();
            this.bannerAnimation.visible = false;
            this.lineContainer.addChild(this.bannerAnimation);
            this.freeGameTriger = new DstFeature("#summary-display", 0, 10);
            this.freeGameTriger.paytable = this.paytable;
            this.freeGameTriger.animationStop(this.bannerAnimation);
            this.freeGameTriger.visible = false;
            this.showFeature = this.showFeature.bind(this);
            this.showPalyButton = this.showPalyButton.bind(this);
            this.freeGameTriger.registerReWinCallback(this.showFeature, this.showPalyButton);
            this.freeGameTriger.casino = this.casino;
            this.lineContainer.addChild(this.freeGameTriger);
        },
        createBackground: function() {
            var bg = new SwitchableBackground(new ig.Image('private/media/DSTgfx/drtr_hg_z22.png'), new ig.Image('private/media/DSTgfx/drtr_hg_fg_z22.png'));
            bg.pos.x = 0;
            bg.pos.y = 0;
            return bg;
        },
        createReelContainer: function() {
            var reelOffsetY = 70;
            var rc = new ReelContainer(this.casino);
            rc.pos.y = reelOffsetY;
            rc.pos.x = 0;
            var reelBaseX = 92;
            var reelBaseY = 0;
            var reel0 = new Reel(0, reelBaseX, reelBaseY, 140, 128, 3, 1, 0);
            var reel1 = new Reel(1, reelBaseX + (149), reelBaseY, 140, 128, 3, 1, 0);
            var reel2 = new Reel(2, reelBaseX + (2 * (149)), reelBaseY, 140, 128, 3, 1, 0);
            var reel3 = new Reel(3, reelBaseX + (3 * (149)), reelBaseY, 140, 128, 3, 1, 0);
            var reel4 = new Reel(4, reelBaseX + (4 * (149)), reelBaseY, 140, 128, 3, 1, 0);
            rc.addReel(reel0);
            rc.addReel(reel1);
            rc.addReel(reel2);
            rc.addReel(reel3);
            rc.addReel(reel4);
            rc.addTeaserSound(new TeaserSound("SFX_DragonTeaser_1", DSTGui.DRAGON, 1));
            rc.addTeaserSound(new TeaserSound("SFX_DragonTeaser_2", DSTGui.DRAGON, 2));
            rc.addTeaserSound(new TeaserSound("SFX_DragonTeaser_3", DSTGui.DRAGON, 3));
            rc.addTeaserSound(new TeaserSound("SFX_DragonTeaser_4", DSTGui.DRAGON, 4));
            rc.addTeaserSound(new TeaserSound("SFX_DragonTeaser_5", DSTGui.DRAGON, 5));
            rc.addSuspenseSound(new SuspenseSound("SFX_DragonSpin_3", DSTGui.DRAGON, 2));
            rc.addSuspenseSound(new SuspenseSound("SFX_DragonSpin_2", DSTGui.DRAGON, 3));
            rc.addSuspenseSound(new SuspenseSound("SFX_DragonSpin_1", DSTGui.DRAGON, 4));
            return rc;
        },
        createLineContainer: function() {
            var lc = new LineContainer();
            var lineOffSetX = 80;
            var lineOffSetY = 55;
            var lineTagAlignRight = 915;
            var lineTagAlignLeft = 143;
            var lineNoOffSet = 83;
            var pathbase = "private/media/DSTgfx/linie";
            var tabpathbase = "private/media/DSTgfx/drtr_marker_";
            var line0 = new LineContent(0, "", this.borderTemplate3, 0, 0);
            line0.addLineNumber(new LineNumber(0, "", 135 - lineOffSetX, 340 - lineOffSetY, 24, 24));
            line0.addLineNumber(new LineNumber(0, "", lineTagAlignRight - lineOffSetX, 340 - lineOffSetY, 24, 24));
            var line1 = new LineContent(1, pathbase + "1_3.png", this.borderTemplate1, lineNoOffSet, 313 - lineOffSetY);
            line1.addLineNumber(new LineNumber(1, tabpathbase + "1.png", lineTagAlignLeft - lineOffSetX, 302 - lineOffSetY, 22, 28));
            line1.addLineNumber(new LineNumber(1, tabpathbase + "1.png", lineTagAlignRight - lineOffSetX, 302 - lineOffSetY, 22, 28));
            var line2 = new LineContent(2, pathbase + "1_3.png", this.borderTemplate1, lineNoOffSet, 196 - lineOffSetY);
            line2.addLineNumber(new LineNumber(2, tabpathbase + "2.png", lineTagAlignLeft - lineOffSetX, 186 - lineOffSetY, 22, 28));
            line2.addLineNumber(new LineNumber(2, tabpathbase + "2.png", lineTagAlignRight - lineOffSetX, 186 - lineOffSetY, 22, 28));
            var line3 = new LineContent(3, pathbase + "1_3.png", this.borderTemplate1, lineNoOffSet, 431 - lineOffSetY);
            line3.addLineNumber(new LineNumber(3, tabpathbase + "3.png", lineTagAlignLeft - lineOffSetX, 420 - lineOffSetY, 22, 28));
            line3.addLineNumber(new LineNumber(3, tabpathbase + "3.png", lineTagAlignRight - lineOffSetX, 420 - lineOffSetY, 22, 28));
            var line4 = new LineContent(4, pathbase + "4.png", this.borderTemplate2, lineNoOffSet, 160 - lineOffSetY);
            line4.addLineNumber(new LineNumber(4, tabpathbase + "4.png", lineTagAlignLeft - lineOffSetX, 156 - lineOffSetY, 22, 28));
            line4.addLineNumber(new LineNumber(4, tabpathbase + "4.png", lineTagAlignRight - lineOffSetX, 156 - lineOffSetY, 22, 28));
            var line5 = new LineContent(5, pathbase + "5.png", this.borderTemplate3, lineNoOffSet, 198 - lineOffSetY);
            line5.addLineNumber(new LineNumber(5, tabpathbase + "5.png", lineTagAlignLeft - lineOffSetX, 450 - lineOffSetY, 22, 28));
            line5.addLineNumber(new LineNumber(5, tabpathbase + "5.png", lineTagAlignRight - lineOffSetX, 450 - lineOffSetY, 22, 28));
            this.gameLogo = new ig.Image('private/media/DSTgfx/drtr_logo.png');
            this.gameLogo.pos = {
                x: 240,
                y: 0
            };
            lc.addChild(this.gameLogo);
            lc.addWinLine(line0);
            lc.addWinLine(line1);
            lc.addWinLine(line2);
            lc.addWinLine(line3);
            lc.addWinLine(line4);
            lc.addWinLine(line5);
            return lc;
        },
        createPaytable: function() {
            this.paytable = new DstPaytable(this.casino.networkProvider.lastResult, "#paygroups");
            this.speicialSymbol = this.casino.networkProvider.lastResult._translations.pt_line2;
            var hgroup = new HeaderGroup("private/media/DSTgfx/drtr_logo.png");
            hgroup.addStyles("image", "pt-header-img");
            this.paytable.addHeaderGroup(hgroup);
            this.selectedSymbolPaygroup[0] = new PayGroup('s' + DSTGui.TEN, [DSTGui.TEN], "private/media/DSTgfx/10_selected_reel.jpg");
            this.selectedSymbolPaygroup[0].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem21 = new PayItem(0, 3);
            var payitem12 = new PayItem(0, 4);
            var payitem03 = new PayItem(0, 5);
            this.selectedSymbolPaygroup[0].addPayItem(payitem03);
            this.selectedSymbolPaygroup[0].addPayItem(payitem12);
            this.selectedSymbolPaygroup[0].addPayItem(payitem21);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[0]);
            this.selectedSymbolPaygroup[1] = new PayGroup('s' + DSTGui.JACK, [DSTGui.JACK], "private/media/DSTgfx/j_selected_reel.jpg");
            this.selectedSymbolPaygroup[1].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem51 = new PayItem(1, 3);
            var payitem42 = new PayItem(1, 4);
            var payitem33 = new PayItem(1, 5);
            this.selectedSymbolPaygroup[1].addPayItem(payitem33);
            this.selectedSymbolPaygroup[1].addPayItem(payitem42);
            this.selectedSymbolPaygroup[1].addPayItem(payitem51);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[1]);
            this.selectedSymbolPaygroup[2] = new PayGroup('s' + DSTGui.QUEEN, [DSTGui.QUEEN], "private/media/DSTgfx/q_selected_reel.jpg");
            this.selectedSymbolPaygroup[2].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem81 = new PayItem(2, 3);
            var payitem72 = new PayItem(2, 4);
            var payitem63 = new PayItem(2, 5);
            this.selectedSymbolPaygroup[2].addPayItem(payitem63);
            this.selectedSymbolPaygroup[2].addPayItem(payitem72);
            this.selectedSymbolPaygroup[2].addPayItem(payitem81);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[2]);
            this.selectedSymbolPaygroup[3] = new PayGroup('s' + DSTGui.KING, [DSTGui.KING], "private/media/DSTgfx/k_selected_reel.jpg");
            this.selectedSymbolPaygroup[3].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem111 = new PayItem(3, 3);
            var payitem102 = new PayItem(3, 4);
            var payitem93 = new PayItem(3, 5);
            this.selectedSymbolPaygroup[3].addPayItem(payitem93);
            this.selectedSymbolPaygroup[3].addPayItem(payitem102);
            this.selectedSymbolPaygroup[3].addPayItem(payitem111);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[3])
            this.selectedSymbolPaygroup[4] = new PayGroup('s' + DSTGui.ACE, [DSTGui.ACE], "private/media/DSTgfx/a_selected_reel.jpg");
            this.selectedSymbolPaygroup[4].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem141 = new PayItem(4, 3);
            var payitem132 = new PayItem(4, 4);
            var payitem123 = new PayItem(4, 5);
            this.selectedSymbolPaygroup[4].addPayItem(payitem123);
            this.selectedSymbolPaygroup[4].addPayItem(payitem132);
            this.selectedSymbolPaygroup[4].addPayItem(payitem141);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[4]);
            this.selectedSymbolPaygroup[5] = new PayGroup('s' + DSTGui.SWORD, [DSTGui.SWORD], "private/media/DSTgfx/sword_selected_reel.jpg");
            this.selectedSymbolPaygroup[5].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem181 = new PayItem(5, 2);
            var payitem172 = new PayItem(5, 3);
            var payitem163 = new PayItem(5, 4);
            var payitem154 = new PayItem(5, 5);
            this.selectedSymbolPaygroup[5].addPayItem(payitem154);
            this.selectedSymbolPaygroup[5].addPayItem(payitem163);
            this.selectedSymbolPaygroup[5].addPayItem(payitem172);
            this.selectedSymbolPaygroup[5].addPayItem(payitem181);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[5]);
            this.selectedSymbolPaygroup[6] = new PayGroup('s' + DSTGui.TREASURE, [DSTGui.TREASURE], "private/media/DSTgfx/treasure_selected_reel.jpg");
            this.selectedSymbolPaygroup[6].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem221 = new PayItem(6, 2);
            var payitem212 = new PayItem(6, 3);
            var payitem203 = new PayItem(6, 4);
            var payitem194 = new PayItem(6, 5);
            this.selectedSymbolPaygroup[6].addPayItem(payitem194);
            this.selectedSymbolPaygroup[6].addPayItem(payitem203);
            this.selectedSymbolPaygroup[6].addPayItem(payitem212);
            this.selectedSymbolPaygroup[6].addPayItem(payitem221);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[6]);
            this.selectedSymbolPaygroup[7] = new PayGroup('s' + DSTGui.HAGEN, [DSTGui.HAGEN], "private/media/DSTgfx/hagen_selected_reel.jpg");
            this.selectedSymbolPaygroup[7].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem261 = new PayItem(7, 2);
            var payitem252 = new PayItem(7, 3);
            var payitem243 = new PayItem(7, 4);
            var payitem234 = new PayItem(7, 5);
            this.selectedSymbolPaygroup[7].addPayItem(payitem234);
            this.selectedSymbolPaygroup[7].addPayItem(payitem243);
            this.selectedSymbolPaygroup[7].addPayItem(payitem252);
            this.selectedSymbolPaygroup[7].addPayItem(payitem261);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[7]);
            this.selectedSymbolPaygroup[8] = new PayGroup('s' + DSTGui.SIEGFRIED, [DSTGui.SIEGFRIED], "private/media/DSTgfx/siegfried_selected_reel.jpg");
            this.selectedSymbolPaygroup[8].addCaptionBelowImage(this.speicialSymbol, "paytable-image-caption");
            var payitem301 = new PayItem(8, 2);
            var payitem292 = new PayItem(8, 3);
            var payitem283 = new PayItem(8, 4);
            var payitem274 = new PayItem(8, 5);
            this.selectedSymbolPaygroup[8].addPayItem(payitem274);
            this.selectedSymbolPaygroup[8].addPayItem(payitem283);
            this.selectedSymbolPaygroup[8].addPayItem(payitem292);
            this.selectedSymbolPaygroup[8].addPayItem(payitem301);
            this.paytable.addPaygroup(this.selectedSymbolPaygroup[8]);
            this.paygroup[0] = new WildCaptionPayGroup(DSTGui.DRAGON, [DSTGui.DRAGON], "private/media/DSTgfx/dragon_normal_reel.jpg");
            this.casino.resourceProvider.registerTranslatableObject(this.paygroup[0]);
            this.paytable.addPaygroup(this.paygroup[0]);
            this.paytable.createWildGroup(this.paygroup[0]);
            this.paygroup[1] = new PayGroup(DSTGui.DRAGON, [DSTGui.DRAGON], "private/media/DSTgfx/dragon_normal_reel.jpg", [3, 4, 5]);
            var payitem33 = new PayItem(9, 3, true);
            var payitem32 = new PayItem(9, 4, true);
            var payitem31 = new PayItem(9, 5, true);
            this.paygroup[1].addPayItem(payitem31);
            this.paygroup[1].addPayItem(payitem32);
            this.paygroup[1].addPayItem(payitem33);
            this.paygroup[1].addCaptionBelowImage("SCATTER", "paytable-image-caption");
            this.paytable.addPaygroup(this.paygroup[1]);
            this.paygroup[2] = new PayGroup(DSTGui.SIEGFRIED, [DSTGui.SIEGFRIED], "private/media/DSTgfx/siegfried_normal_reel.jpg", [2, 3, 4, 5]);
            var payitem30 = new PayItem(8, 2);
            var payitem29 = new PayItem(8, 3);
            var payitem28 = new PayItem(8, 4);
            var payitem27 = new PayItem(8, 5);
            this.paygroup[2].addPayItem(payitem27);
            this.paygroup[2].addPayItem(payitem28);
            this.paygroup[2].addPayItem(payitem29);
            this.paygroup[2].addPayItem(payitem30);
            this.paytable.addPaygroup(this.paygroup[2]);
            this.paygroup[3] = new PayGroup(DSTGui.HAGEN, [DSTGui.HAGEN], "private/media/DSTgfx/hagen_normal_reel.jpg", [2, 3, 4, 5]);
            var payitem26 = new PayItem(7, 2);
            var payitem25 = new PayItem(7, 3);
            var payitem24 = new PayItem(7, 4);
            var payitem23 = new PayItem(7, 5);
            this.paygroup[3].addPayItem(payitem23);
            this.paygroup[3].addPayItem(payitem24);
            this.paygroup[3].addPayItem(payitem25);
            this.paygroup[3].addPayItem(payitem26);
            this.paytable.addPaygroup(this.paygroup[3]);
            this.paygroup[4] = new PayGroup(DSTGui.TREASURE, [DSTGui.TREASURE], "private/media/DSTgfx/treasure_normal_reel.jpg", [2, 3, 4, 5]);
            var payitem22 = new PayItem(6, 2);
            var payitem21 = new PayItem(6, 3);
            var payitem20 = new PayItem(6, 4);
            var payitem19 = new PayItem(6, 5);
            this.paygroup[4].addPayItem(payitem19);
            this.paygroup[4].addPayItem(payitem20);
            this.paygroup[4].addPayItem(payitem21);
            this.paygroup[4].addPayItem(payitem22);
            this.paytable.addPaygroup(this.paygroup[4]);
            this.paygroup[5] = new PayGroup(DSTGui.SWORD, [DSTGui.SWORD], "private/media/DSTgfx/sword_normal_reel.jpg", [2, 3, 4, 5]);
            var payitem18 = new PayItem(5, 2);
            var payitem17 = new PayItem(5, 3);
            var payitem16 = new PayItem(5, 4);
            var payitem15 = new PayItem(5, 5);
            this.paygroup[5].addPayItem(payitem15);
            this.paygroup[5].addPayItem(payitem16);
            this.paygroup[5].addPayItem(payitem17);
            this.paygroup[5].addPayItem(payitem18);
            this.paytable.addPaygroup(this.paygroup[5]);
            this.paygroup[6] = new PayGroup(DSTGui.ACE, [DSTGui.ACE], "private/media/DSTgfx/a_normal_reel.jpg", [3, 4, 5]);
            var payitem14 = new PayItem(4, 3);
            var payitem13 = new PayItem(4, 4);
            var payitem12 = new PayItem(4, 5);
            this.paygroup[6].addPayItem(payitem12);
            this.paygroup[6].addPayItem(payitem13);
            this.paygroup[6].addPayItem(payitem14);
            this.paytable.addPaygroup(this.paygroup[6]);
            this.paygroup[7] = new PayGroup(DSTGui.KING, [DSTGui.KING], "private/media/DSTgfx/k_normal_reel.jpg", [3, 4, 5]);
            var payitem11 = new PayItem(3, 3);
            var payitem10 = new PayItem(3, 4);
            var payitem9 = new PayItem(3, 5);
            this.paygroup[7].addPayItem(payitem9);
            this.paygroup[7].addPayItem(payitem10);
            this.paygroup[7].addPayItem(payitem11);
            this.paytable.addPaygroup(this.paygroup[7])
            this.paygroup[8] = new PayGroup(DSTGui.QUEEN, [DSTGui.QUEEN], "private/media/DSTgfx/q_normal_reel.jpg", [3, 4, 5]);
            var payitem8 = new PayItem(2, 3);
            var payitem7 = new PayItem(2, 4);
            var payitem6 = new PayItem(2, 5);
            this.paygroup[8].addPayItem(payitem6);
            this.paygroup[8].addPayItem(payitem7);
            this.paygroup[8].addPayItem(payitem8);
            this.paytable.addPaygroup(this.paygroup[8]);
            this.paygroup[9] = new PayGroup(DSTGui.JACK, [DSTGui.JACK], "private/media/DSTgfx/j_normal_reel.jpg", [3, 4, 5]);
            var payitem5 = new PayItem(1, 3);
            var payitem4 = new PayItem(1, 4);
            var payitem3 = new PayItem(1, 5);
            this.paygroup[9].addPayItem(payitem3);
            this.paygroup[9].addPayItem(payitem4);
            this.paygroup[9].addPayItem(payitem5);
            this.paytable.addPaygroup(this.paygroup[9]);
            this.paygroup[10] = new PayGroup(DSTGui.TEN, [DSTGui.TEN], "private/media/DSTgfx/10_normal_reel.jpg", [3, 4, 5]);
            var payitem2 = new PayItem(0, 3);
            var payitem1 = new PayItem(0, 4);
            var payitem0 = new PayItem(0, 5);
            this.paygroup[10].addPayItem(payitem0);
            this.paygroup[10].addPayItem(payitem1);
            this.paygroup[10].addPayItem(payitem2);
            this.paytable.addPaygroup(this.paygroup[10]);
            this.paytable.mainPaygroup = this.paygroup;
            $("#paygroups0").hide();
            $("#paygroups1").hide();
            $("#paygroups2").hide();
            $("#paygroups3").hide();
            $("#paygroups4").hide();
            $("#paygroups5").hide();
            $("#paygroups6").hide();
            $("#paygroups7").hide();
            $("#paygroups8").hide();
            this.reassignPaytableClasses();
        },
        createCanvasPaytable: function() {
            var payItemTextFormat = {
                fontSize: 18,
                fontName: "Arial",
                fontStyle: "bold",
                fontColor: "#eeee00",
                alignment: "center",
                verticalAlignment: "middle"
            };
            var outlineTextFilter = new OutlineTextFilter(3, "#000");
            var paytable = new DTCanvasPaytable(new ig.Image("private/media/DSTgfx/hg2.jpg"));
            paytable.pos.x = 0;
            paytable.pos.y = 0;
            var itemWidth = 100;
            var itemHeight = 23;
            var royals_right = new CanvasPaygroup([DSTGui.TEN, DSTGui.JACK, DSTGui.QUEEN]);
            royals_right.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            royals_right.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 1 * itemHeight));
            royals_right.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var royals_left = new CanvasPaygroup([DSTGui.ACE, DSTGui.KING]);
            royals_left.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            royals_left.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            royals_left.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var sword = new CanvasPaygroup([DSTGui.SWORD]);
            sword.addPayItem(new CanvasPayitem(2, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 3 * itemHeight));
            sword.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            sword.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            sword.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var treasure = new CanvasPaygroup([DSTGui.TREASURE]);
            treasure.addPayItem(new CanvasPayitem(2, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 3 * itemHeight));
            treasure.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            treasure.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            treasure.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var hagen = new CanvasPaygroup([DSTGui.HAGEN]);
            hagen.addPayItem(new CanvasPayitem(2, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 3 * itemHeight));
            hagen.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            hagen.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            hagen.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var siegfried = new CanvasPaygroup([DSTGui.SIEGFRIED]);
            siegfried.addPayItem(new CanvasPayitem(2, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 3 * itemHeight));
            siegfried.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            siegfried.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            siegfried.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var dragon = new CanvasPaygroup([DSTGui.DRAGON], true);
            dragon.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            dragon.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 1 * itemHeight));
            dragon.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            paytable.addPayGroup(royals_right, 650, 437);
            paytable.addPayGroup(royals_left, 208, 437);
            paytable.addPayGroup(sword, 701, 303);
            paytable.addPayGroup(treasure, 153, 303);
            paytable.addPayGroup(hagen, 701, 119);
            paytable.addPayGroup(siegfried, 153, 119);
            paytable.addPayGroup(dragon, 427, 193);
            this.casino.resourceProvider.registerTranslatableObject(paytable);
            return paytable;
        },
        reassignPaytableClasses: function() {
            var visiblePaygroups = $(":not([style]):regex(id,(paygroup?.[0-9]\\b))");
            var identifyClassname = function(index, css) {
                return (css.match(/(^|\s)ui-block\S+/g) || []).join(' ');
            };
            for (var i = 0; i < visiblePaygroups.length; i++) {
                var paygrp = visiblePaygroups[i];
                switch (i % 4) {
                    case 0:
                        $(paygrp).removeClass(identifyClassname);
                        $(paygrp).addClass('ui-block-a');
                        break;
                    case 1:
                        $(paygrp).removeClass(identifyClassname);
                        $(paygrp).addClass('ui-block-b');
                        break;
                    case 2:
                        $(paygrp).removeClass(identifyClassname);
                        $(paygrp).addClass('ui-block-c');
                        break;
                    case 3:
                        $(paygrp).removeClass(identifyClassname);
                        $(paygrp).addClass('ui-block-d');
                        break;
                }
            }
            if (this.SELECTED_SYMBOL != null) {
                var srcpath = '#paygroups' + this.SELECTED_SYMBOL + 'symbolImage';
                var path = $(srcpath).attr("src");
                $("#Selected_Symbol").attr("src", path);
            }
        },
        createFreegameCounter: function() {
            this.fgCounter = new DstFreegameCounter("#freegame-counter", this.casino.resourceProvider);
            this.casino.resourceProvider.registerTranslatableObject(this.fgCounter);
            this.registerResizableObject(this.fgCounter);
            return this.fgCounter;
        },
        createFreegameDisplay: function() {
            var fgDisplay = new DstFreegameDisplay("#freegame-display", this.casino.resourceProvider);
            this.casino.resourceProvider.registerTranslatableObject(fgDisplay);
            this.registerResizableObject(fgDisplay);
            return fgDisplay;
        },
        createSummaryDisplay: function() {
            var sumDisplay = new DstSummaryDisplay("#summary-display");
            this.casino.resourceProvider.registerTranslatableObject(sumDisplay);
            this.registerResizableObject(sumDisplay);
            return sumDisplay;
        },
        createSwitchInAnimation: function() {
            this.switchIn = new DstSwitchInAnimation(this);
            this.switchIn.counter = this.getFreegameCounter();
            this.switchIn.display = this.getFreegameDisplay();
            this.switchIn.background = this.background;
            return this.switchIn;
        },
        createSwitchOutAnimation: function() {
            var switchOut = new DstSwitchOutAnimation(this);
            switchOut.counter = this.getFreegameCounter();
            switchOut.display = this.getSummaryDisplay();
            switchOut.background = this.background;
            return switchOut;
        },
        createRetriggerAnimation: function() {
            var retriggerAni = new DstRetriggerAnimation(this);
            retriggerAni.counter = this.getFreegameCounter();
            retriggerAni.display = this.getFreegameDisplay();
            return retriggerAni;
        },
        createDarkeningLayer: function() {
            var darklayer = new ig.Image('private/media/DSTgfx/drtr_hg_walze_grau.png');
            darklayer.pos.x = 0;
            darklayer.pos.y = 0;
            darklayer.visible = false;
            return darklayer;
        },
        createWinAnimation: function() {
            var winAni = new DstStandardWinAnimation(this.updateWinSum, this.onResultAnimationFinished);
            winAni.addWinSound(new DstDragoneWinSound('SFX_WinLine1J', 1));
            winAni.addWinSound(new WinOrderSound('SFX_WinLine1', 1));
            winAni.addWinSound(new DstDragoneWinSound('SFX_WinLine2J', 2));
            winAni.addWinSound(new WinOrderSound('SFX_WinLine2', 2));
            winAni.addWinSound(new DstDragoneWinSound('SFX_WinLine3J', 3));
            winAni.addWinSound(new WinOrderSound('SFX_WinLine3', 3));
            winAni.addWinSound(new DstDragoneWinSound('SFX_WinLine4J', 4));
            winAni.addWinSound(new WinOrderSound('SFX_WinLine4', 4));
            winAni.addWinSound(new DstDragoneWinSound('SFX_WinLine5J', 5));
            winAni.addWinSound(new WinOrderSound('SFX_WinLine5', 5));
            winAni.addSummarySound(new OddsDependendSound('SFX_WinTiny', 3));
            winAni.addSummarySound(new OddsDependendSound('SFX_WinVerySmall', 7));
            winAni.addSummarySound(new OddsDependendSound('SFX_WinSmall', 15));
            winAni.addSummarySound(new OddsDependendSound('SFX_WinMedium', 39));
            winAni.addSummarySound(new OddsDependendSound('SFX_WinBig', 79));
            winAni.addSummarySound(new OddsDependendSound('SFX_WinHuge', 199));
            winAni.addSummarySound(new OddsDependendSound('SFX_WinTop', Number.MAX_VALUE));
            return winAni;
        },
        onResultAnimationFinished: function() {
            if (this.gameResult._wonFreegames > 0 && this.gameResult.freeGamesTotal === 0 && this.freeGamePlayed === false) {
                this.winAnimation.clean();
                this.bannerAnimation.startAni();
                this.freeGameTriger.startDispalyAni();
            } else {
                if (this.gameResult._childGameResult != null) {
                    this.winAnimation.clean();
                    this.winAnimation.checkfree = true;
                    this.isFreeGameLoopPlaying = true;
                    this.replaceReelSymbol();
                } else {
                    this.facade.sendNotification("RESULT_ANIMATION_FINISHED", this.facade.lastResponse);
                    if (this.isFreeGameLoopPlaying) {
                        this.isFreeGameLoopPlaying = false;
                        this.casino.soundPlayer.playAmbient("SFX_FreegameLoop");
                    }
                }
            }
        },
        directlyFinishResult: function() {
            this.reelContainer.directlyFinishReelRun(this.gameResult);
            $('#choseMsg').hide();
            $('#freegame-counter').hide();
            if (this.gameResult._childGameResult != null) {
                for (var i = 0; i < 5; i++) {
                    var reel = this.reelContainer.getReelById(i);
                    for (var j = 0; j < 3; j++) {
                        var symbol = reel.getSymbolAtRow(j);
                        if (this.gameResult.parameters.SELECTED_SYMBOL === symbol.id) {
                            for (var k = 0; k < 3; k++) {
                                var symbol1 = reel.getSymbolAtRow(k);
                                if (symbol1.id !== this.gameResult.parameters.SELECTED_SYMBOL) {
                                    var position = {
                                        x: i,
                                        y: k
                                    };
                                    this.symbolReplace.push(position);
                                    var reelR = this.reelContainer.getReelById(this.symbolReplace[this.replaceID].x);
                                    var symbolR = reelR.getSymbolAtRow(this.symbolReplace[this.replaceID].y);
                                    var newSymbol = reelR.availableSymbols[this.gameResult.parameters.SELECTED_SYMBOL].getReelGfx(this.gameResult);
                                    newSymbol.setAnimation(newSymbol.anims.idleFreeSelected);
                                    reelR.directlyReplace(symbolR, newSymbol);
                                    this.replaceID++;
                                }
                            }
                        }
                    }
                }
            }
            this.gameLogo.visible = true;
        },
        replaceReelSymbol: function() {
            this.symbolReplace = [];
            this.isReplaceStrat = true;
            this.curTimer = 0
            this.replaceID = 0;
            this.timerValue = ig.system.now();
            for (var i = 0; i < 5; i++) {
                var reel = this.reelContainer.getReelById(i);
                for (var j = 0; j < 3; j++) {
                    var symbol = reel.getSymbolAtRow(j);
                    if (this.SELECTED_SYMBOL === symbol.id) {
                        for (var k = 0; k < 3; k++) {
                            var symbol1 = reel.getSymbolAtRow(k);
                            if (symbol1.id !== this.SELECTED_SYMBOL) {
                                var position = {
                                    x: i,
                                    y: k
                                };
                                this.symbolReplace.push(position);
                            }
                        }
                    }
                }
            }
        },
        update: function() {
            this.parent();
            if (this.isReplaceStrat) {
                if (this.timerValue < ig.system.now()) {
                    this.replaceSelectedSymbol();
                    this.timerValue = (this.casino.soundPlayer.getSoundLengthInMilliSeconds("SFX_Expand") - 250) + ig.system.now();
                }
            }
        },
        replaceSelectedSymbol: function() {
            if (this.replaceID >= this.symbolReplace.length) {
                this.isReplaceStrat = false;
                this.gameResult = this.gameResult.childGameResult();
                this.scanGameResultChild(this.gameResult);
            } else {
                var reel = this.reelContainer.getReelById(this.symbolReplace[this.replaceID].x);
                var symbol = reel.getSymbolAtRow(this.symbolReplace[this.replaceID].y);
                this.casino.soundPlayer.playAmbient("SFX_Expand");
                var newSymbol = reel.availableSymbols[this.SELECTED_SYMBOL].getReelGfx(this.gameResult);
                newSymbol.setAnimation(newSymbol.anims.idleFreeSelected);
                reel.directlyReplace(symbol, newSymbol);
            }
            this.replaceID++;
        },
        scanGameResultChild: function(rslt) {
            this.winAnimation.buildWinningLines(rslt);
            var wins = new Array();
            for (var i = 0; i < rslt.winnings.length; i++) {
                var win = rslt.winnings[i];
                wins.push(win);
            }
            this.winnings.fill(wins);
        },
        onReelMotionFinished: function() {
            if (this.gameResult.winnings.length > 0) {
                for (var i = 0; i < 6; i++) {
                    this.lineContainer.lines[i].setVisible(false, false);
                }
            }
            this.scanGameResult(this.gameResult);
            if (ig.ua.terminal) {
                if (this.casino.networkProvider.getLastResponse().currentFrame > 0) {
                    this.facade.sendNotification(PaytableIDs.NOTIFICATION_SWITCH_APPEARANCE, {
                        gameMode: "FREEGAME",
                        selectedSymbol: this.SELECTED_SYMBOL
                    });
                }
            }
        },
        switchAppearanceToFreegameMode: function(triggerResponse, withAnimation) {
            this.parent(triggerResponse, withAnimation);
            this.gameLogo.visible = false;
        },
        switchAppearanceToNormalFinished: function() {
            this.parent();
            $("#paygroups" + this.SELECTED_SYMBOL + "").hide();
            this.gameLogo.visible = true;
            this.freeGamePlayed = false;
            this.reassignPaytableClasses();
        },
        createSymbols: function() {
            var reelGfx = ['private/media/DSTgfx/10_normal_reel.jpg', 'private/media/DSTgfx/j_normal_reel.jpg', 'private/media/DSTgfx/q_normal_reel.jpg', 'private/media/DSTgfx/k_normal_reel.jpg', 'private/media/DSTgfx/a_normal_reel.jpg', 'private/media/DSTgfx/sword_normal_reel.jpg', 'private/media/DSTgfx/treasure_normal_reel.jpg', 'private/media/DSTgfx/hagen_normal_reel.jpg', 'private/media/DSTgfx/siegfried_normal_reel.jpg', 'private/media/DSTgfx/dragon_normal_reel.jpg'];
            var reelGfxFree = ['private/media/DSTgfx/10_fg_reel.jpg', 'private/media/DSTgfx/j_fg_reel.jpg', 'private/media/DSTgfx/q_fg_reel.jpg', 'private/media/DSTgfx/k_fg_reel.jpg', 'private/media/DSTgfx/a_fg_reel.jpg', 'private/media/DSTgfx/sword_fg_reel.jpg', 'private/media/DSTgfx/treasure_fg_reel.jpg', 'private/media/DSTgfx/hagen_fg_reel.jpg', 'private/media/DSTgfx/siegfried_fg_reel.jpg', 'private/media/DSTgfx/dragon_freegame_reel.jpg'];
            var reelGfxFreeSelected = ['private/media/DSTgfx/10_selected_reel.jpg', 'private/media/DSTgfx/j_selected_reel.jpg', 'private/media/DSTgfx/q_selected_reel.jpg', 'private/media/DSTgfx/k_selected_reel.jpg', 'private/media/DSTgfx/a_selected_reel.jpg', 'private/media/DSTgfx/sword_selected_reel.jpg', 'private/media/DSTgfx/treasure_selected_reel.jpg', 'private/media/DSTgfx/hagen_selected_reel.jpg', 'private/media/DSTgfx/siegfried_selected_reel.jpg', 'private/media/DSTgfx/dragon_freegame_reel.jpg'];
            var symbolGfx = ['private/media/DSTgfx/10_normal_ani.jpg', 'private/media/DSTgfx/j_normal_ani.jpg', 'private/media/DSTgfx/q_normal_ani.jpg', 'private/media/DSTgfx/k_normal_ani.jpg', 'private/media/DSTgfx/a_normal_ani.png', 'private/media/DSTgfx/sword_normal_ani.jpg', 'private/media/DSTgfx/treasure_normal_ani.jpg', 'private/media/DSTgfx/hagen_normal_ani.jpg', 'private/media/DSTgfx/siegfried_normal_ani.jpg', 'private/media/DSTgfx/dragon_normal_ani.jpg'];
            var symbolGfxFree = ['private/media/DSTgfx/10_freegame_ani.jpg', 'private/media/DSTgfx/j_freegame_ani.jpg', 'private/media/DSTgfx/q_freegame_ani.jpg', 'private/media/DSTgfx/k_freegame_ani.jpg', 'private/media/DSTgfx/a_freegame_ani.png', 'private/media/DSTgfx/sword_freegame_ani.jpg', 'private/media/DSTgfx/treasure_freegame_ani.jpg', 'private/media/DSTgfx/hagen_freegame_ani.jpg', 'private/media/DSTgfx/siegfried_freegame_ani.jpg', 'private/media/DSTgfx/drtr_fg_dragon_ani.jpg'];
            var symbolGfxSelected = ['private/media/DSTgfx/10_freegame_selected_ani.jpg', 'private/media/DSTgfx/j_selected_ani.jpg', 'private/media/DSTgfx/q_selected_ani.jpg', 'private/media/DSTgfx/k_selected_ani.jpg', 'private/media/DSTgfx/a_selected_ani.jpg', 'private/media/DSTgfx/sword_selected_ani.jpg', 'private/media/DSTgfx/treasure_selected_ani.jpg', 'private/media/DSTgfx/hagen_freegame_selected_ani.jpg', 'private/media/DSTgfx/siegrfried_selected_ani.jpg', 'private/media/DSTgfx/drtr_fg_dragon_ani.jpg'];
            var symbols = [];
            var animSpeedFast = 0.05;
            var animSpeedSlow = 0.075;
            for (var i = 0; i < symbolGfx.length; i++) {
                var sym = new Symbol(i, 140, 128, 0, 0);
                sym.registerAnimation('idleFreeSelected', reelGfxFreeSelected[i], 140, 128, 1, [0], new SelectedFreegameAnimationTrigger(i));
                sym.registerAnimation('idleFree', reelGfxFree[i], 140, 128, 1, [0], new DstFreegameAnimationTrigger());
                sym.registerAnimation('idle', reelGfx[i], 140, 128, 1, [0], new StandardReelSymbolTrigger());
                if (i === DSTGui.TEN || i === DSTGui.JACK || i === DSTGui.QUEEN || i === DSTGui.KING || i == DSTGui.ACE) {
                    sym.registerAnimation('winS', symbolGfxSelected[i], 140, 128, animSpeedSlow, [0, 1, 2, 3, 4, 5, 6, 7, 8], new SelectedfreegameOccurenceTrigger(i, [3, 4, 5]));
                    sym.registerAnimation('winF', symbolGfxFree[i], 140, 128, animSpeedSlow, [0, 1, 2, 3, 4, 5, 6, 7, 8], new DstFreegameAndOccurrenceTrigger(i, [3, 4, 5]));
                    sym.registerAnimation('win', symbolGfx[i], 140, 128, animSpeedSlow, [0, 1, 2, 3, 4, 5, 6, 7, 8], new OccurrenceTrigger(i, [3, 4, 5]));
                } else if (i === DSTGui.SWORD) {
                    sym.registerAnimation('winS', symbolGfxSelected[i], 140, 128, animSpeedFast, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], new SelectedfreegameOccurenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerAnimation('winF', symbolGfxFree[i], 140, 128, animSpeedFast, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], new DstFreegameAndOccurrenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerAnimation('win', symbolGfx[i], 140, 128, animSpeedFast, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], new OccurrenceTrigger(i, [2, 3, 4, 5]));
                } else if (i == DSTGui.TREASURE) {
                    sym.registerAnimation('winS', symbolGfxSelected[i], 140, 128, animSpeedFast, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], new SelectedfreegameOccurenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerLoopSequenceForAnimation('winS', [20, 21, 22, 23, 24, 25, 26, 27, 28]);
                    sym.registerAnimation('winF', symbolGfxFree[i], 140, 128, animSpeedFast, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], new DstFreegameAndOccurrenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerLoopSequenceForAnimation('winF', [20, 21, 22, 23, 24, 25, 26, 27, 28]);
                    sym.registerAnimation('win', symbolGfx[i], 140, 128, animSpeedFast, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], new OccurrenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerLoopSequenceForAnimation('win', [20, 21, 22, 23, 24, 25, 26, 27, 28]);
                } else if (i === DSTGui.HAGEN) {
                    sym.registerAnimation('winS', symbolGfxSelected[i], 140, 128, animSpeedSlow, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], new SelectedfreegameOccurenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerAnimation('winF', symbolGfxFree[i], 140, 128, animSpeedSlow, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], new DstFreegameAndOccurrenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerAnimation('win', symbolGfx[i], 140, 128, animSpeedSlow, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], new OccurrenceTrigger(i, [2, 3, 4, 5]));
                } else if (i === DSTGui.SIEGFRIED) {
                    sym.registerAnimation('winS', symbolGfxSelected[i], 140, 128, 0.060, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], new SelectedfreegameOccurenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerAnimation('winF', symbolGfxFree[i], 140, 128, 0.060, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], new DstFreegameAndOccurrenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerAnimation('win', symbolGfx[i], 140, 128, 0.060, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], new OccurrenceTrigger(i, [2, 3, 4, 5]));
                } else if (i === DSTGui.DRAGON) {
                    sym.registerAnimation('scatter', symbolGfx[i], 140, 128, animSpeedFast, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], new ScatterOccurrenceTrigger(i, [3, 4, 5]));
                    sym.registerAnimation('winF', symbolGfxFree[i], 140, 128, animSpeedFast, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], new DstFreegameAndOccurrenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerAnimation('win', symbolGfx[i], 140, 128, animSpeedFast, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], new OccurrenceTrigger(i, [2, 3, 4, 5]));
                    sym.registerAnimation('scatterLoop', symbolGfx[i], 140, 128, 0.2, [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 47, 46, 45, 44, 43, 42, 41, 40], new OccurrenceTrigger(i, [3, 4, 5]));
                }
                symbols.push(sym);
            }
            return symbols;
        },
        showFeature: function() {
            this.freeGamePlayed = true;
            this.onResultAnimationFinished();
        },
        showPalyButton: function() {
            this.SELECTED_SYMBOL = this.freeGameTriger.selectedSymbol;
            this.paytable.setChoosenSymbol(this.SELECTED_SYMBOL);
            if (ig.ua.terminal) {
                this.facade.sendNotification(PaytableIDs.NOTIFICATION_SWITCH_APPEARANCE, {
                    gameMode: "FREEGAME",
                    selectedSymbol: this.SELECTED_SYMBOL
                });
            }
            $("#paygroups" + this.SELECTED_SYMBOL + "").removeAttr('style');
            this.reassignPaytableClasses();
            this.switchIn.custStopAnimation();
        },
        onResultReceived: function(data, isReconstruction) {
            this.parent(data, isReconstruction);
            if (isReconstruction) {
                $("#freegame-display").css("position", "absolute");
                this.SELECTED_SYMBOL = this.gameResult.parameters.SELECTED_SYMBOL;
                this.paytable.setChoosenSymbol(this.SELECTED_SYMBOL);
                if (ig.ua.terminal) {
                    this.facade.sendNotification(PaytableIDs.NOTIFICATION_SWITCH_APPEARANCE, {
                        gameMode: "FREEGAME",
                        selectedSymbol: this.SELECTED_SYMBOL
                    });
                }
                if (this.gameResult.freeGamesTotal > 0) {
                    this.casino.soundPlayer.playAmbient("SFX_FreegameLoop");
                }
                $("#paygroups" + this.SELECTED_SYMBOL + "").removeAttr('style');
                this.reassignPaytableClasses();
            }
        }
    });
    DSTGui.TEN = 0;
    DSTGui.JACK = 1;
    DSTGui.QUEEN = 2;
    DSTGui.KING = 3;
    DSTGui.ACE = 4;
    DSTGui.SWORD = 5;
    DSTGui.TREASURE = 6;
    DSTGui.HAGEN = 7;
    DSTGui.SIEGFRIED = 8;
    DSTGui.DRAGON = 9;
});

// ../private/client/dragonstreasure.js 
ig.baked = true;
ig.module('client.dragonstreasure').requires('de.adp.web.gui.gameFacade', 'de.adp.web.controller.playCommand', 'de.adp.web.controller.autoSpinAmountChangedCommand', 'de.adp.web.controller.freegame.switchToFreeCommand', 'de.adp.web.controller.freegame.retriggerFreegameCommand', 'de.adp.web.controller.freegame.switchToNormalCommand', 'de.adp.web.controller.freegame.switchToFreeFinishedCommand', 'de.adp.web.controller.freegame.switchToNormalFinishedCommand', 'de.adp.web.controller.freegame.resumeToFreeCommand', 'de.adp.web.controller.gameFlow.proceedGameCommand', 'de.adp.web.controller.gameFlow.startNewRoundCommand', 'de.adp.web.notifications.notification', 'de.adp.web.controller.collectCommand', 'client.controller.customSwitchToFreeFinishedCommand', 'de.adp.web.controller.updateButtonsCommand', 'client.gui.dstGui').defines(function() {
    DragonsTreasure = GameFacade.extend({
        createGameGui: function() {
            this.casino.displayProvider.showGameName("Dragon´s Treasure");
            return new DSTGui(this.casino);
        },
        createCommands: function() {
            var commands = this.parent();
            var freegameSwitchFinishedCommand = new CustomSwitchToFreeFinishedCommand(this);
            this.registerCommand("SWITCH_TO_FREEGAME_ANIMATED", freegameSwitchFinishedCommand);
            return commands;
        },
        getGameId: function() {
            return "dragonstreasure";
        },
        createGameSpecificAutoplayConditions: function() {
            if (this.casino.getCasinoConfiguration("AUTOPLAY_FREESPINS_ENABLED")) {
                var freeCondition = new FreeGameCondition(this);
                this.autoPlay.registerAbortCondition(freeCondition);
                this.casino.resourceProvider.registerTranslatableObject(freeCondition);
            }
        },
        getRTP: function() {
            let seperator = currencyFormatter.currencyOptions.decimalPoint;
            return "95" + seperator + "56%";
        },
        getWinProbability: function() {
            return 100970;
        }
    });
});

// ../private/gameLauncher.js 
ig.baked = true;
ig.module('gameLauncher').requires('de.adp.web.launcher', 'client.dragonstreasure').defines(function() {
    DSTLauncher = Launcher.extend({
        getGameClass: function() {
            return DragonsTreasure;
        },
        getGameName: function() {
            return "dragonstreasure";
        },
        getClearColor: function() {
            return "#000";
        },
        isWebGLPossible: function() {
            return false;
        },
        getResources: function() {
            var res = ['private/media/DSTgfx/DRTRF/drtr_feature_100.png', 'private/media/DSTgfx/DRTRF/drtr_feature_101.png', 'private/media/DSTgfx/DRTRF/drtr_feature_102.png', 'private/media/DSTgfx/DRTRF/drtr_feature_103.png', 'private/media/DSTgfx/DRTRF/drtr_feature_104.png', 'private/media/DSTgfx/DRTRF/drtr_feature_105.png', 'private/media/DSTgfx/DRTRF/drtr_feature_106.png', 'private/media/DSTgfx/DRTRF/drtr_feature_107.png', 'private/media/DSTgfx/DRTRF/drtr_feature_108.png', 'private/media/DSTgfx/DRTRF/drtr_feature_109.png', 'private/media/DSTgfx/DRTRF/drtr_feature_110.png', 'private/media/DSTgfx/DRTRF/drtr_feature_111.png', 'private/media/DSTgfx/DRTRF/drtr_feature_112.png', 'private/media/DSTgfx/DRTRF/drtr_feature_113.png', 'private/media/DSTgfx/DRTRF/drtr_feature_114.png', 'private/media/DSTgfx/DRTRF/drtr_feature_115.png', 'private/media/DSTgfx/DRTRF/drtr_feature_116.png', 'private/media/DSTgfx/DRTRF/drtr_feature_117.png', 'private/media/DSTgfx/DRTRF/drtr_feature_118.png', 'private/media/DSTgfx/DRTRF/drtr_feature_119.png', 'private/media/DSTgfx/DRTRF/drtr_feature_120.png', 'private/media/DSTgfx/DRTRF/drtr_feature_121.png', 'private/media/DSTgfx/DRTRF/drtr_feature_122.png', 'private/media/DSTgfx/DRTRF/drtr_feature_123.png', 'private/media/DSTgfx/DRTRF/drtr_feature_124.png', 'private/media/DSTgfx/DRTRF/drtr_feature_125.png', 'private/media/DSTgfx/DRTRF/drtr_feature_126.png', 'private/media/DSTgfx/DRTRF/drtr_feature_127.png', 'private/media/DSTgfx/DRTRF/drtr_feature_128.png', 'private/media/DSTgfx/DRTRF/drtr_feature_129.png', 'private/media/DSTgfx/DRTRF/drtr_feature_130.png', 'private/media/DSTgfx/DRTRF/drtr_feature_131.png', 'private/media/DSTgfx/DRTRF/drtr_feature_132.png', 'private/media/DSTgfx/DRTRF/drtr_feature_133.png', 'private/media/DSTgfx/DRTRF/drtr_feature_134.png', 'private/media/DSTgfx/DRTRF/drtr_feature_135.png', 'private/media/DSTgfx/DRTRF/drtr_feature_136.png', 'private/media/DSTgfx/DRTRF/drtr_feature_137.png', 'private/media/DSTgfx/DRTRF/drtr_feature_138.png', 'private/media/DSTgfx/DRTRF/drtr_feature_139.png', 'private/media/DSTgfx/DRTRF/drtr_feature_140.png', 'private/media/DSTgfx/DRTRF/drtr_feature_141.png', 'private/media/DSTgfx/DRTRF/drtr_feature_142.png', 'private/media/DSTgfx/DRTRF/drtr_feature_143.png', 'private/media/DSTgfx/DRTRF/drtr_feature_144.png', 'private/media/DSTgfx/DRTRF/drtr_feature_145.png', 'private/media/DSTgfx/DRTRF/drtr_feature_146.png', 'private/media/DSTgfx/DRTRF/drtr_feature_147.png', 'private/media/DSTgfx/DRTRF/drtr_feature_148.png', 'private/media/DSTgfx/DRTRF/drtr_feature_149.png', 'private/media/DSTgfx/DRTRF/drtr_feature_150.png', 'private/media/DSTgfx/DRTRF/drtr_feature_151.png', 'private/media/DSTgfx/DRTRF/drtr_feature_152.png', 'private/media/DSTgfx/DRTRF/drtr_feature_153.png', 'private/media/DSTgfx/DRTRF/drtr_feature_154.png', 'private/media/DSTgfx/DRTRF/drtr_feature_155.png', 'private/media/DSTgfx/DRTRF/drtr_feature_156.png', 'private/media/DSTgfx/DRTRF/drtr_feature_157.png', 'private/media/DSTgfx/DRTRF/drtr_feature_158.png', 'private/media/DSTgfx/freegamedisplay/0.png', 'private/media/DSTgfx/freegamedisplay/1.png', 'private/media/DSTgfx/freegamedisplay/2.png', 'private/media/DSTgfx/freegamedisplay/3.png', 'private/media/DSTgfx/freegamedisplay/4.png', 'private/media/DSTgfx/freegamedisplay/5.png', 'private/media/DSTgfx/freegamedisplay/6.png', 'private/media/DSTgfx/freegamedisplay/7.png', 'private/media/DSTgfx/freegamedisplay/8.png', 'private/media/DSTgfx/10_fg_reel.jpg', 'private/media/DSTgfx/10_freegame_ani.jpg', 'private/media/DSTgfx/10_freegame_selected_ani.jpg', 'private/media/DSTgfx/10_normal_ani.jpg', 'private/media/DSTgfx/10_normal_reel.jpg', 'private/media/DSTgfx/10_selected_reel.jpg', 'private/media/DSTgfx/a_fg_reel.jpg', 'private/media/DSTgfx/a_freegame_ani.png', 'private/media/DSTgfx/a_normal_ani.png', 'private/media/DSTgfx/a_normal_reel.jpg', 'private/media/DSTgfx/a_selected_ani.jpg', 'private/media/DSTgfx/a_selected_reel.jpg', 'private/media/DSTgfx/dragon_freegame_reel.jpg', 'private/media/DSTgfx/dragon_normal_ani.jpg', 'private/media/DSTgfx/dragon_normal_reel.jpg', 'private/media/DSTgfx/dragon_small.png', 'private/media/DSTgfx/drtr2_hg_banner.jpg', 'private/media/DSTgfx/drtr_1400x1000.jpg', 'private/media/DSTgfx/drtr_1400x1000_fg.jpg', 'private/media/DSTgfx/drtr_fg_dragon_ani.jpg', 'private/media/DSTgfx/drtr_hg_fg_z22.png', 'private/media/DSTgfx/drtr_hg_walze_grau.png', 'private/media/DSTgfx/drtr_hg_z22.png', 'private/media/DSTgfx/drtr_logo.png', 'private/media/DSTgfx/drtr_marker_1.png', 'private/media/DSTgfx/drtr_marker_2.png', 'private/media/DSTgfx/drtr_marker_3.png', 'private/media/DSTgfx/drtr_marker_4.png', 'private/media/DSTgfx/drtr_marker_5.png', 'private/media/DSTgfx/hagen_fg_reel.jpg', 'private/media/DSTgfx/hagen_freegame_ani.jpg', 'private/media/DSTgfx/hagen_freegame_selected_ani.jpg', 'private/media/DSTgfx/hagen_normal_ani.jpg', 'private/media/DSTgfx/hagen_normal_reel.jpg', 'private/media/DSTgfx/hagen_selected_reel.jpg', 'private/media/DSTgfx/hg2.jpg', 'private/media/DSTgfx/hg2_fg.jpg', 'private/media/DSTgfx/j_fg_reel.jpg', 'private/media/DSTgfx/j_freegame_ani.jpg', 'private/media/DSTgfx/j_normal_ani.jpg', 'private/media/DSTgfx/j_normal_reel.jpg', 'private/media/DSTgfx/j_selected_ani.jpg', 'private/media/DSTgfx/j_selected_reel.jpg', 'private/media/DSTgfx/k_fg_reel.jpg', 'private/media/DSTgfx/k_freegame_ani.jpg', 'private/media/DSTgfx/k_normal_ani.jpg', 'private/media/DSTgfx/k_normal_reel.jpg', 'private/media/DSTgfx/k_selected_ani.jpg', 'private/media/DSTgfx/k_selected_reel.jpg', 'private/media/DSTgfx/linie1_3.png', 'private/media/DSTgfx/linie4.png', 'private/media/DSTgfx/linie5.png', 'private/media/DSTgfx/q_fg_reel.jpg', 'private/media/DSTgfx/q_freegame_ani.jpg', 'private/media/DSTgfx/q_normal_ani.jpg', 'private/media/DSTgfx/q_normal_reel.jpg', 'private/media/DSTgfx/q_selected_ani.jpg', 'private/media/DSTgfx/q_selected_reel.jpg', 'private/media/DSTgfx/rahmen1_3.png', 'private/media/DSTgfx/rahmen4.png', 'private/media/DSTgfx/rahmen5.png', 'private/media/DSTgfx/siegfried_fg_reel.jpg', 'private/media/DSTgfx/siegfried_freegame_ani.jpg', 'private/media/DSTgfx/siegfried_normal_ani.jpg', 'private/media/DSTgfx/siegfried_normal_reel.jpg', 'private/media/DSTgfx/siegfried_selected_reel.jpg', 'private/media/DSTgfx/siegrfried_selected_ani.jpg', 'private/media/DSTgfx/sword_fg_reel.jpg', 'private/media/DSTgfx/sword_freegame_ani.jpg', 'private/media/DSTgfx/sword_normal_ani.jpg', 'private/media/DSTgfx/sword_normal_reel.jpg', 'private/media/DSTgfx/sword_selected_ani.jpg', 'private/media/DSTgfx/sword_selected_reel.jpg', 'private/media/DSTgfx/treasure_fg_reel.jpg', 'private/media/DSTgfx/treasure_freegame_ani.jpg', 'private/media/DSTgfx/treasure_normal_ani.jpg', 'private/media/DSTgfx/treasure_normal_reel.jpg', 'private/media/DSTgfx/treasure_selected_ani.jpg', 'private/media/DSTgfx/treasure_selected_reel.jpg'];
            return res;
        },
        createSounds: function() {
            var soundSprite = new SoundSprite();
            soundSprite.registerSoundsFromJSON({
                "urls": ["private/media/DSTsfx/dragonstreasure_soundsprite.mp3", "private/media/DSTsfx/dragonstreasure_soundsprite.m4a", "private/media/DSTsfx/dragonstreasure_soundsprite.webm", "private/media/DSTsfx/dragonstreasure_soundsprite.opus"],
                "sprite": {
                    "SFX_FreeGamesIn": [0, 3356, false],
                    "SFX_FreegameLoop": [3606, 13633, true],
                    "SFX_FreeGamesOut": [17489, 6321, false],
                    "SFX_WinBig": [24060, 5609, false],
                    "SFX_WinHuge": [29919, 9759, false],
                    "SFX_WinMedium": [39928, 4593, false],
                    "SFX_WinSmall": [44771, 2398, false],
                    "SFX_WinTiny": [47419, 917, false],
                    "SFX_WinTop": [48586, 19606, false],
                    "SFX_WinVerySmall": [68442, 858, false],
                    "SFX_Expand": [69550, 499, false],
                    "SFX_ChooseSymbol_1": [70299, 8035, false],
                    "SFX_ChooseSymbol_2": [78584, 5409, false],
                    "DRTR_Line": [84243, 157, false],
                    "SFX_DragonTeaser_1": [84650, 1166, false],
                    "SFX_DragonTeaser_2": [86066, 1219, false],
                    "SFX_DragonTeaser_3": [87535, 1136, false],
                    "SFX_DragonTeaser_4": [88921, 1226, false],
                    "SFX_DragonTeaser_5": [90397, 1129, false],
                    "SFX_DragonSpin_1": [91776, 1401, false],
                    "SFX_DragonSpin_2": [93427, 1901, false],
                    "SFX_DragonSpin_3": [95578, 2402, false],
                    "SFX_WinLine1": [98230, 500, false],
                    "SFX_WinLine10": [98980, 500, false],
                    "SFX_WinLine10J": [99730, 801, false],
                    "SFX_WinLine1J": [100781, 800, false],
                    "SFX_WinLine2": [101831, 500, false],
                    "SFX_WinLine2J": [102581, 800, false],
                    "SFX_WinLine3": [103631, 500, false],
                    "SFX_WinLine3J": [104381, 800, false],
                    "SFX_WinLine4": [105431, 500, false],
                    "SFX_WinLine4J": [106181, 800, false],
                    "SFX_WinLine5": [107231, 500, false],
                    "SFX_WinLine5J": [107981, 800, false],
                    "SFX_WinLine6": [109031, 500, false],
                    "SFX_WinLine6J": [109781, 800, false],
                    "SFX_WinLine7": [110831, 500, false],
                    "SFX_WinLine7J": [111581, 800, false],
                    "SFX_WinLine8": [112631, 500, false],
                    "SFX_WinLine8J": [113381, 800, false],
                    "SFX_WinLine9": [114431, 500, false],
                    "SFX_WinLine9J": [115181, 801, false],
                    "SFX_ReelRun": [116232, 3502, false],
                    "SFX_ReelStop": [119984, 454, false]
                }
            });
            return soundSprite;
        }
    });
    launcher = new DSTLauncher();
});

// ../private/client/paytable/dtExternalPaytable.js 
ig.baked = true;
ig.module('client.paytable.dtExternalPaytable').requires('client.paytable.dtCanvasPaytable', 'de.adp.web.gui.filters.outlineTextFilter', 'de.adp.web.paytable.elements.canvasPayitem', 'de.adp.web.paytable.elements.canvasPaygroup', "de.adp.web.paytable.external.externalPaytable", 'client.gui.dstGui').defines(function() {
    DCExternalPaytable = ExternalPaytable.extend({
        createPaytableView: function() {
            this.gameKey = "dragonstreasure";
            this.ptView = this.createCanvasPaytable();
        },
        createCanvasPaytable: function() {
            var payItemTextFormat = {
                fontSize: 18,
                fontName: "Arial",
                fontStyle: "bold",
                fontColor: "#eeee00",
                alignment: "center",
                verticalAlignment: "middle"
            };
            var outlineTextFilter = new OutlineTextFilter(3, "#000");
            var paytable = new DTCanvasPaytable(new ig.Image("private/media/DSTgfx/hg2.jpg"));
            paytable.createSpecialItems();
            paytable.pos.x = 0;
            paytable.pos.y = 0;
            var itemWidth = 100;
            var itemHeight = 23;
            var royals_right = new CanvasPaygroup([DSTGui.TEN, DSTGui.JACK, DSTGui.QUEEN]);
            royals_right.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            royals_right.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 1 * itemHeight));
            royals_right.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var royals_left = new CanvasPaygroup([DSTGui.ACE, DSTGui.KING]);
            royals_left.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            royals_left.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            royals_left.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var sword = new CanvasPaygroup([DSTGui.SWORD]);
            sword.addPayItem(new CanvasPayitem(2, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 3 * itemHeight));
            sword.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            sword.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            sword.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var treasure = new CanvasPaygroup([DSTGui.TREASURE]);
            treasure.addPayItem(new CanvasPayitem(2, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 3 * itemHeight));
            treasure.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            treasure.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            treasure.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var hagen = new CanvasPaygroup([DSTGui.HAGEN]);
            hagen.addPayItem(new CanvasPayitem(2, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 3 * itemHeight));
            hagen.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            hagen.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            hagen.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var siegfried = new CanvasPaygroup([DSTGui.SIEGFRIED]);
            siegfried.addPayItem(new CanvasPayitem(2, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 3 * itemHeight));
            siegfried.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            siegfried.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, itemHeight));
            siegfried.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            var dragon = new CanvasPaygroup([DSTGui.DRAGON], true);
            dragon.addPayItem(new CanvasPayitem(3, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 2 * itemHeight));
            dragon.addPayItem(new CanvasPayitem(4, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 1 * itemHeight));
            dragon.addPayItem(new CanvasPayitem(5, payItemTextFormat, outlineTextFilter, itemWidth, itemHeight, 0, 0));
            paytable.addPayGroup(royals_right, 650, 437);
            paytable.addPayGroup(royals_left, 208, 437);
            paytable.addPayGroup(sword, 701, 303);
            paytable.addPayGroup(treasure, 153, 303);
            paytable.addPayGroup(hagen, 701, 119);
            paytable.addPayGroup(siegfried, 153, 119);
            paytable.addPayGroup(dragon, 427, 193);
            this.casino.resourceProvider.registerTranslatableObject(paytable);
            return paytable;
        },
        switchTerminalElements: function() {},
        switchVisualAppearance: function(data) {
            this.parent(data);
            var rawObject = JSON.parse(data);
            if (rawObject.selectedSymbol) {
                this.ptView.setChoosenSymbol(rawObject.selectedSymbol);
            }
        },
        switchToFreeMode: function(json) {
            this.parent(json);
            var rawObject = JSON.parse(json);
            if (rawObject.mainGameResult) {
                if (rawObject.mainGameResult.parameters) {
                    if (rawObject.mainGameResult.parameters.SELECTED_SYMBOL) {
                        this.ptView.setChoosenSymbol(rawObject.mainGameResult.parameters.SELECTED_SYMBOL);
                    }
                }
            }
        },
    });
});

// ../private/paytableLauncher.js 
ig.baked = true;
ig.module('paytableLauncher').requires('de.adp.web.paytable.external.externalPaytableLauncher', 'client.paytable.dtExternalPaytable').defines(function() {
    PTLauncher = ExternalPaytableLauncher.extend({
        getPaytableClass: function() {
            return DCExternalPaytable;
        },
        getGameName: function() {
            return "dragonstreasure";
        },
        getClearColor: function() {
            return "#fff";
        },
        getAssetsToPreload: function() {
            return ["private/media/DSTgfx/10_selected_reel.jpg", "private/media/DSTgfx/j_selected_reel.jpg", "private/media/DSTgfx/q_selected_reel.jpg", "private/media/DSTgfx/k_selected_reel.jpg", "private/media/DSTgfx/a_selected_reel.jpg", "private/media/DSTgfx/sword_selected_reel.jpg", "private/media/DSTgfx/treasure_selected_reel.jpg", "private/media/DSTgfx/hagen_selected_reel.jpg", "private/media/DSTgfx/siegfried_selected_reel.jpg"];
        },
    });
    paytablelauncher = new PTLauncher();
});
gameinformation = {
    "frameworkversion": "1.15.4",
    "gameclientversion": "1.14",
    "eoccoreversion": "7.2"
};
var ReleaseBuild = true;
